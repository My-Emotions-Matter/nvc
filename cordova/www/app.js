/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(2);


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var App, AppNamespace, FullScreenApp;

	AppNamespace = __webpack_require__(3);

	__webpack_require__(7);

	App = __webpack_require__(279).App;

	FullScreenApp = __webpack_require__(82).FullScreenApp;

	FullScreenApp.init({
	  title: AppNamespace.namespace.name
	}).then(function() {
	  return App.instantiateAsTopComponent();
	});


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var Nvc,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Nvc = __webpack_require__(4);

	module.exports = Nvc.App || (Nvc.App = (function(superClass) {
	  extend(App, superClass);

	  function App() {
	    return App.__super__.constructor.apply(this, arguments);
	  }

	  App.namespace = Nvc;

	  App.namespacePath = "Neptune.Nvc.App";

	  return App;

	})(Neptune.Base));

	Nvc.addNamespace(Nvc.App);


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Nvc || (Neptune.Nvc = (function(superClass) {
	  extend(Nvc, superClass);

	  function Nvc() {
	    return Nvc.__super__.constructor.apply(this, arguments);
	  }

	  Nvc.namespace = Neptune;

	  Nvc.namespacePath = "Neptune.Nvc";

	  return Nvc;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Nvc);


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(6);


/***/ },
/* 6 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var Base, Neptune,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	if (typeof global === 'object') {
	  global.self = global;
	}

	Base = (function() {
	  function Base() {}

	  Base.namespacePath = "Neptune.Base";

	  Base.namespace = null;

	  Base.allNamespaces = {};

	  Base.classes = [];

	  Base.namespaces = [];

	  Base.addNamespace = function(namespace) {
	    var base, base1, name1, name2;
	    (base = this.allNamespaces)[name1 = namespace.namespacePath] || (base[name1] = []);
	    this.namespaces = (base1 = this.allNamespaces)[name2 = this.namespacePath] || (base1[name2] = []);
	    return this.namespaces.push(namespace);
	  };

	  Base.finishLoad = function(classes) {
	    var klass, name, newClasses;
	    newClasses = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = classes.length; i < len; i++) {
	        name = classes[i];
	        if (!(typeof (klass = this[name]) === "function")) {
	          continue;
	        }
	        klass.namespace = this;
	        klass.namespacePath = this.namespacePath + "." + klass.name;
	        results.push(klass);
	      }
	      return results;
	    }).call(this);
	    return this.classes = this.classes.concat(newClasses);
	  };

	  return Base;

	})();

	module.exports = self.Neptune = Neptune = (function(superClass) {
	  extend(Neptune, superClass);

	  function Neptune() {
	    return Neptune.__super__.constructor.apply(this, arguments);
	  }

	  Neptune.Base = Base;

	  Neptune.namespacePath = "Neptune";

	  Neptune.namespace = null;

	  return Neptune;

	})(Base);

	console.log("neptune-namespaces global defined: self.Neptune");

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var Models;

	module.exports = Models = __webpack_require__(8);

	Models.NavState = __webpack_require__(9);

	Models.finishLoad(["NavState"]);


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var App,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	App = __webpack_require__(3);

	module.exports = App.Models || (App.Models = (function(superClass) {
	  extend(Models, superClass);

	  function Models() {
	    return Models.__super__.constructor.apply(this, arguments);
	  }

	  Models.namespace = App;

	  Models.namespacePath = "Neptune.Nvc.App.Models";

	  return Models;

	})(Neptune.Base));

	App.addNamespace(App.Models);


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var ApplicationState, Data, Flux, Foundation, NavState, createHotWithPostCreate,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Flux = __webpack_require__(81);

	Data = __webpack_require__(276);

	createHotWithPostCreate = Foundation.createHotWithPostCreate;

	ApplicationState = Flux.ApplicationState;

	module.exports = createHotWithPostCreate(module, NavState = (function(superClass) {
	  extend(NavState, superClass);

	  function NavState() {
	    return NavState.__super__.constructor.apply(this, arguments);
	  }

	  NavState.stateFields({
	    currentPath: [],
	    currentMap: Data.Nvc.core
	  });

	  return NavState;

	})(ApplicationState));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(12);


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation;

	module.exports = Foundation = __webpack_require__(13);

	Foundation.All = __webpack_require__(15);

	Foundation.Analytics = __webpack_require__(58);

	Foundation.Array = __webpack_require__(16);

	Foundation.BaseModule = __webpack_require__(59);

	Foundation.BaseObject = __webpack_require__(30);

	Foundation.BatchLoader = __webpack_require__(60);

	Foundation.CallStack = __webpack_require__(31);

	Foundation.Clone = __webpack_require__(38);

	Foundation.Epoch = __webpack_require__(61);

	Foundation.Eq = __webpack_require__(51);

	Foundation.Function = __webpack_require__(53);

	Foundation.Hash = __webpack_require__(52);

	Foundation.JsonStore = __webpack_require__(62);

	Foundation.Log = __webpack_require__(19);

	Foundation.Map = __webpack_require__(39);

	Foundation.Math = __webpack_require__(17);

	Foundation.Promise = __webpack_require__(25);

	Foundation.PromisedFileReader = __webpack_require__(57);

	Foundation.Regexp = __webpack_require__(18);

	Foundation.RestClient = __webpack_require__(63);

	Foundation.Ruby = __webpack_require__(54);

	Foundation.ShallowClone = __webpack_require__(35);

	Foundation.SingleObjectTransaction = __webpack_require__(64);

	Foundation.Stat = __webpack_require__(65);

	Foundation.String = __webpack_require__(34);

	Foundation.Time = __webpack_require__(55);

	Foundation.Transaction = __webpack_require__(66);

	Foundation.Types = __webpack_require__(20);

	Foundation.Unique = __webpack_require__(33);

	Foundation.WebWorker = __webpack_require__(56);

	Foundation.WebpackHotLoader = __webpack_require__(36);

	Foundation.WorkerRpc = __webpack_require__(67);

	Foundation.Async = __webpack_require__(21);

	Foundation.Binary = __webpack_require__(68);

	Foundation.Browser = __webpack_require__(78);

	Foundation.Inspect = __webpack_require__(40);

	Foundation.finishLoad(["All", "Analytics", "Array", "BaseModule", "BaseObject", "BatchLoader", "CallStack", "Clone", "Epoch", "Eq", "Function", "Hash", "JsonStore", "Log", "Map", "Math", "Promise", "PromisedFileReader", "Regexp", "RestClient", "Ruby", "ShallowClone", "SingleObjectTransaction", "Stat", "String", "Time", "Transaction", "Types", "Unique", "WebWorker", "WebpackHotLoader", "WorkerRpc"]);


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(14);

	module.exports = Art.Foundation || (Art.Foundation = (function(superClass) {
	  extend(Foundation, superClass);

	  function Foundation() {
	    return Foundation.__super__.constructor.apply(this, arguments);
	  }

	  Foundation.namespace = Art;

	  Foundation.namespacePath = "Neptune.Art.Foundation";

	  return Foundation;

	})(Neptune.Base));

	Art.addNamespace(Art.Foundation);


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var Array, Async, BaseObject, CallStack, Clone, Eq, Foundation, Function, GlobalCounts, Hash, Inspect, Log, Map, Math, PFileReader, Promise, Regexp, Ruby, ShallowClone, String, Time, Types, WebWorker, createAllClass, select;

	Array = __webpack_require__(16);

	Async = __webpack_require__(21);

	BaseObject = __webpack_require__(30);

	CallStack = __webpack_require__(31);

	Clone = __webpack_require__(38);

	Eq = __webpack_require__(51);

	Foundation = __webpack_require__(13);

	Function = __webpack_require__(53);

	Hash = __webpack_require__(52);

	Inspect = __webpack_require__(40);

	Log = __webpack_require__(19);

	Map = __webpack_require__(39);

	Math = __webpack_require__(17);

	Promise = __webpack_require__(25);

	Regexp = __webpack_require__(18);

	Ruby = __webpack_require__(54);

	ShallowClone = __webpack_require__(35);

	String = __webpack_require__(34);

	Time = __webpack_require__(55);

	Types = __webpack_require__(20);

	WebWorker = __webpack_require__(56);

	PFileReader = __webpack_require__(57);

	createAllClass = BaseObject.createAllClass;

	select = Hash.select;

	GlobalCounts = (function() {
	  var currentSecond, globalCounts, globalTime, isPlainObject;

	  function GlobalCounts() {}

	  isPlainObject = Types.isPlainObject;

	  currentSecond = Time.currentSecond;

	  Foundation.globalCounts = globalCounts = {};

	  globalTime = null;

	  GlobalCounts.resetGlobalCounts = function() {
	    globalTime = currentSecond();
	    return Foundation.globalCounts = globalCounts = {};
	  };

	  GlobalCounts.globalCount = function(name, amount) {
	    var k, last, results, v;
	    if (amount == null) {
	      amount = 1;
	    }
	    if (isPlainObject(amount)) {
	      if (last = globalCounts[name]) {
	        results = [];
	        for (k in amount) {
	          v = amount[k];
	          results.push(last[k] += v);
	        }
	        return results;
	      } else {
	        return globalCounts[name] = amount;
	      }
	    } else {
	      return globalCounts[name] = (globalCounts[name] || 0) + amount;
	    }
	  };

	  GlobalCounts.countStep = function() {
	    var globalCount, nextTime;
	    nextTime = currentSecond();
	    if (nextTime - globalCount > .002) {
	      console.error("gap");
	    }
	    globalCount = nextTime;
	    return Foundation.globalCount("step");
	  };

	  return GlobalCounts;

	})();

	createAllClass(Foundation, select(BaseObject, "createWithPostCreate", "mixInto", "createAllClass", "createHotWithPostCreate"), select(Inspect, "inspect", "inspectLean", "miniInspect"), Array, Async, CallStack, Clone, Eq, Function, GlobalCounts, Hash, Log, Math, PFileReader, Regexp, Ruby, ShallowClone, String, Time, Types, WebWorker);


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var ArrayExtensions, arraySlice, bound, doFlattenInternal, flattenIfNeeded, intRand, isArguments, isArrayOrArguments, isNumber, keepAll, log, max, modulo, moveArrayElement1, moveArrayElement2, needsFlatteningOrCompacting, ref,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	ref = __webpack_require__(17), bound = ref.bound, max = ref.max, intRand = ref.intRand, modulo = ref.modulo;

	log = __webpack_require__(19).log;

	isNumber = __webpack_require__(20).isNumber;

	arraySlice = Array.prototype.slice;

	isArguments = function(o) {
	  return o.constructor === Object && (typeof o.callee === "function") && (typeof o.length === "number");
	};

	isArrayOrArguments = function(o) {
	  return o && (o.constructor === Array || isArguments(o));
	};

	doFlattenInternal = function(array, keepTester, output) {
	  var a, len1, p;
	  output || (output = []);
	  for (p = 0, len1 = array.length; p < len1; p++) {
	    a = array[p];
	    if (isArrayOrArguments(a)) {
	      flattenIfNeeded(a, keepTester, output);
	    } else if (keepTester(a)) {
	      output.push(a);
	    }
	  }
	  return output;
	};

	needsFlatteningOrCompacting = function(array, keepTester) {
	  var a, len1, p;
	  for (p = 0, len1 = array.length; p < len1; p++) {
	    a = array[p];
	    if (isArrayOrArguments(a) || !keepTester(a)) {
	      return true;
	    }
	  }
	  return false;
	};

	keepAll = function() {
	  return true;
	};

	flattenIfNeeded = function(array, keepTester, output) {
	  var len1, p, v;
	  if (keepTester == null) {
	    keepTester = keepAll;
	  }
	  if (needsFlatteningOrCompacting(array, keepTester)) {
	    return doFlattenInternal(array, keepTester, output);
	  } else if (output) {
	    for (p = 0, len1 = array.length; p < len1; p++) {
	      v = array[p];
	      output.push(v);
	    }
	    return output;
	  } else if (array.constructor !== Array) {
	    return arraySlice.call(array);
	  } else {
	    return array;
	  }
	};

	moveArrayElement1 = function(array, from, to) {
	  array.splice(to, 0, array[from]);
	  return array;
	};

	moveArrayElement2 = function(array, from, to) {
	  var i, p, q, ref1, ref2, ref3, ref4, tmp;
	  tmp = array[from];
	  if (from < to) {
	    for (i = p = ref1 = from, ref2 = to - 1; p <= ref2; i = p += 1) {
	      array[i] = array[i + 1];
	    }
	  } else {
	    for (i = q = ref3 = from, ref4 = to + 1; q <= ref4; i = q += 1) {
	      array[i] = array[i - 1];
	    }
	  }
	  array[to] = tmp;
	  return array;
	};

	module.exports = ArrayExtensions = (function() {
	  var arrayWithElementMoved, basicCompareFunction, compact, discardNullAndUndefined, flatten, indexOfOrLength, keepIfRubyTrue, leftOfIndex, longestCommonSubsequence, moveArrayElement, randomElement, rightOfIndex;

	  function ArrayExtensions() {}


	  /*
	  Useful compact and compactFlatten keepTester functions
	   */

	  ArrayExtensions.keepAll = keepAll = function() {
	    return true;
	  };

	  ArrayExtensions.discardNullAndUndefined = discardNullAndUndefined = function(a) {
	    return a !== void 0 && a !== null;
	  };

	  ArrayExtensions.keepIfRubyTrue = keepIfRubyTrue = function(a) {
	    return a !== void 0 && a !== null && a !== false;
	  };

	  ArrayExtensions.arrayToTruthMap = function(array) {
	    var a, len1, p, res;
	    res = {};
	    for (p = 0, len1 = array.length; p < len1; p++) {
	      a = array[p];
	      res[a] = true;
	    }
	    return res;
	  };

	  ArrayExtensions.arrayToFalseMap = function(array) {
	    var a, len1, p, res;
	    res = {};
	    for (p = 0, len1 = array.length; p < len1; p++) {
	      a = array[p];
	      res[a] = false;
	    }
	    return res;
	  };

	  ArrayExtensions.peek = function(array, offset) {
	    if (offset == null) {
	      offset = -1;
	    }
	    if (array) {
	      return array[array.length + offset];
	    } else {
	      return void 0;
	    }
	  };

	  basicCompareFunction = function(a, b) {
	    return a - b;
	  };

	  ArrayExtensions.leftOfIndex = leftOfIndex = function(array, index) {
	    if (!array) {
	      return array;
	    }
	    return array.slice(0, index);
	  };

	  ArrayExtensions.rightOfIndex = rightOfIndex = function(array, index) {
	    if (!array) {
	      return array;
	    }
	    if (index < 0) {
	      index += array.length;
	    }
	    return array.slice(index + 1);
	  };

	  indexOfOrLength = function(array, value) {
	    var i;
	    if (0 > (i = array.indexOf(value))) {
	      return array.length;
	    } else {
	      return i;
	    }
	  };

	  ArrayExtensions.leftOf = function(array, value) {
	    return leftOfIndex(array, indexOfOrLength(array, value));
	  };

	  ArrayExtensions.rightOf = function(array, value) {
	    return rightOfIndex(array, indexOfOrLength(array, value));
	  };

	  ArrayExtensions.splitArray = function(array, value) {
	    var index;
	    index = indexOfOrLength(array, value);
	    return [leftOfIndex(array, index), rightOfIndex(array, index)];
	  };


	  /*
	  findSortedFirst
	  
	  Acts as-if it sorted the array and returned the first element.
	  
	  Details:
	    tests each element in the array againts the current "smallest"
	    returns the element for which tests "smaller" than every other
	    element a is "smaller" than b if compareFunction(a, b) returns >0 value
	  
	  IN:
	    array - the array to search or null
	    compareFunction - (a, b) -> # standard compare function
	      returns:
	        0: if a and b are equal
	        <0: if b is greater than a
	        >0: if a is greater than b
	      default: (a, b) -> a - b
	  
	  OUT:
	    largest value in array or undefined if array is null or length 0
	   */

	  ArrayExtensions.findSortedFirst = function(array, compareFunction) {
	    var element, i, p, ref1, returnElement;
	    if (compareFunction == null) {
	      compareFunction = basicCompareFunction;
	    }
	    if (!((array != null ? array.length : void 0) > 0)) {
	      return void 0;
	    }
	    returnElement = array[0];
	    for (i = p = 1, ref1 = array.length; p < ref1; i = p += 1) {
	      if (0 < compareFunction(returnElement, element = array[i])) {
	        returnElement = element;
	      }
	    }
	    return returnElement;
	  };

	  ArrayExtensions.first = function(array) {
	    return array[0];
	  };

	  ArrayExtensions.second = function(array) {
	    return array[1];
	  };

	  ArrayExtensions.third = function(array) {
	    return array[2];
	  };

	  ArrayExtensions.forth = function(array) {
	    return array[3];
	  };

	  ArrayExtensions.fifth = function(array) {
	    return array[4];
	  };

	  ArrayExtensions.last = function(array) {
	    if (array) {
	      return array[array.length - 1];
	    } else {
	      return void 0;
	    }
	  };

	  ArrayExtensions.compact = compact = function(array, keepTester) {
	    var a, len1, p;
	    if (keepTester == null) {
	      keepTester = discardNullAndUndefined;
	    }
	    for (p = 0, len1 = array.length; p < len1; p++) {
	      a = array[p];
	      if (!keepTester(a)) {
	        return (function() {
	          var len2, q, results;
	          results = [];
	          for (q = 0, len2 = array.length; q < len2; q++) {
	            a = array[q];
	            if (keepTester(a)) {
	              results.push(a);
	            }
	          }
	          return results;
	        })();
	      }
	    }
	    return array;
	  };

	  ArrayExtensions.pushIfNotPresent = function(array, item) {
	    if (indexOf.call(array, item) >= 0) {
	      return false;
	    } else {
	      array.push(item);
	      return true;
	    }
	  };

	  ArrayExtensions.randomElement = randomElement = function(array, fromFirstN) {
	    if (fromFirstN == null) {
	      fromFirstN = array.length;
	    }
	    return array[Math.random() * fromFirstN | 0];
	  };

	  ArrayExtensions.randomSort = function(array) {
	    var a, i, j, len, p, ref1;
	    len = array.length;
	    for (i = p = ref1 = len - 1; p >= 0; i = p += -1) {
	      j = intRand(i);
	      a = array[i];
	      array[i] = array[j];
	      array[j] = a;
	    }
	    return array;
	  };

	  ArrayExtensions.flatten = flatten = function(firstArg) {
	    return flattenIfNeeded(arguments.length === 1 ? isArrayOrArguments(firstArg) ? firstArg : [firstArg] : arguments);
	  };

	  ArrayExtensions.compactFlatten = function(array, keepTester) {
	    if (keepTester == null) {
	      keepTester = discardNullAndUndefined;
	    }
	    return flattenIfNeeded(array, keepTester);
	  };

	  ArrayExtensions.insert = function(array, index, item) {
	    if (index < 0) {
	      index = array.length + index + 1;
	    }
	    array.splice(index, 0, item);
	    array;
	    return array;
	  };

	  ArrayExtensions.withInserted = function(array, index, item) {
	    return ArrayExtensions.insert(array.slice(), index, item);
	  };

	  ArrayExtensions.remove = function(array, index, amount) {
	    if (amount == null) {
	      amount = 1;
	    }
	    if (index < 0) {
	      index = array.length + index + 1;
	    }
	    array.splice(index, amount);
	    return array;
	  };

	  ArrayExtensions.removeFirstMatch = function(array, toMatchValue) {
	    var index;
	    index = array.indexOf(toMatchValue);
	    if (index >= 0) {
	      return ArrayExtensions.remove(array, index);
	    } else {
	      return array;
	    }
	  };

	  ArrayExtensions.arrayWithout = function(array, index, amount) {
	    if (amount == null) {
	      amount = 1;
	    }
	    return ArrayExtensions.remove(array.slice(), index, amount);
	  };

	  ArrayExtensions.arrayWithoutValue = function(array, value) {
	    return ArrayExtensions.remove(array.slice(), array.indexOf(value), 1);
	  };

	  ArrayExtensions.arrayWith = function(array, value) {
	    if (!array) {
	      return [value];
	    }
	    array = array.slice();
	    array.push(value);
	    return array;
	  };

	  ArrayExtensions.truncatedArrayWith = function(array, length, value) {
	    if (!array) {
	      return [value];
	    }
	    array = array.slice(0, length);
	    array.push(value);
	    return array;
	  };

	  ArrayExtensions.poppedArray = function(array) {
	    return array.slice(0, array.length - 1);
	  };

	  ArrayExtensions.arrayWithOne = function(array, value) {
	    if (!array) {
	      return [value];
	    }
	    array = array.slice();
	    if (indexOf.call(array, value) < 0) {
	      array.push(value);
	    }
	    return array;
	  };

	  ArrayExtensions.slice = function(a, b, c) {
	    return arraySlice.call(a, b, c);
	  };

	  ArrayExtensions.shuffleArray = function(a) {
	    var i, j, t;
	    i = a.length;
	    while (--i > 0) {
	      j = ~~(Math.random() * (i + 1));
	      t = a[j];
	      a[j] = a[i];
	      a[i] = t;
	    }
	    return a;
	  };

	  ArrayExtensions.moveArrayElement1 = moveArrayElement1;

	  ArrayExtensions.moveArrayElement2 = moveArrayElement2;

	  ArrayExtensions.moveArrayElement = moveArrayElement = function(array, from, to) {
	    from = modulo(from | 0, array.length);
	    to = modulo(to | 0, array.length);
	    if (Math.abs(from - to) > 300) {
	      moveArrayElement1(array, from, to);
	    } else {
	      moveArrayElement2(array, from, to);
	    }
	    return array;
	  };

	  ArrayExtensions.arrayWithElementMoved = arrayWithElementMoved = function(array, from, to) {
	    from = modulo(from | 0, array.length);
	    to = modulo(to | 0, array.length);
	    if (from === to) {
	      return array;
	    }
	    array = array.slice();
	    return moveArrayElement(array, from, to);
	  };

	  ArrayExtensions.arrayWithElementValueMoved = function(array, value, to) {
	    var from;
	    from = array.indexOf(value);
	    if (from < 0) {
	      return array;
	    }
	    return arrayWithElementMoved(array, from, to);
	  };

	  ArrayExtensions.stableSort = function(array, compare) {
	    var a, b, i, length, notSorted, p, ref1;
	    compare || (compare = function(a, b) {
	      return a - b;
	    });
	    notSorted = true;
	    length = array.length;
	    while (notSorted) {
	      notSorted = false;
	      for (i = p = 1, ref1 = length; p < ref1; i = p += 1) {
	        if (compare(a = array[i - 1], b = array[i]) > 0) {
	          array[i - 1] = b;
	          array[i] = a;
	          notSorted = true;
	        }
	      }
	    }
	    return array;
	  };

	  ArrayExtensions.longestCommonSubsequence = longestCommonSubsequence = function(a, b) {
	    var c, diag, i, j, latch, lcs, left, m, n, p, q, r, ref1, ref2, ref3, row, s;
	    lcs = [];
	    row = [];
	    c = [];
	    if (m < n) {
	      s = a;
	      a = b;
	      b = s;
	    }
	    m = a.length;
	    n = b.length;
	    for (j = p = 0, ref1 = n; p < ref1; j = p += 1) {
	      row[j] = 0;
	    }
	    for (i = q = 0, ref2 = m; q < ref2; i = q += 1) {
	      c[i] = row = row.slice();
	      diag = 0;
	      for (j = r = 0, ref3 = n - 1; r <= ref3; j = r += 1) {
	        latch = row[j];
	        if (a[i] === b[j]) {
	          row[j] = diag + 1;
	        } else {
	          left = row[j - 1] || 0;
	          if (left > row[j]) {
	            row[j] = left;
	          }
	        }
	        diag = latch;
	      }
	    }
	    i--;
	    j--;
	    while (i > -1 && j > -1) {
	      switch (c[i][j]) {
	        case i && c[i - 1][j]:
	          i--;
	          continue;
	        case j && c[i][j - 1]:
	          j--;
	          break;
	        default:
	          j--;
	          lcs.unshift(a[i]);
	          i--;
	          continue;
	      }
	    }
	    return lcs;
	  };

	  ArrayExtensions.minimumOrderedOverlappingMerge = function(a, b) {
	    var ai, bj, c, ck, i, j, k, l, m, n, o, out;
	    c = longestCommonSubsequence(a, b);
	    m = a.length;
	    n = b.length;
	    o = c.length;
	    out = new Array(n);
	    i = 0;
	    j = 0;
	    k = 0;
	    l = 0;
	    while (i < m && j < n && k < o) {
	      ai = a[i];
	      bj = b[j];
	      ck = c[k];
	      if (ai === ck && bj === ck) {
	        i++;
	        j++;
	        k++;
	        out[l++] = ai;
	      } else if (ai !== ck) {
	        i++;
	        if (indexOf.call(b, ai) < 0) {
	          out[l++] = ai;
	        }
	      } else {
	        j++;
	        out[l++] = bj;
	      }
	    }
	    while (i < m) {
	      ai = a[i++];
	      if (indexOf.call(b, ai) < 0) {
	        out[l++] = ai;
	      }
	    }
	    while (j < n) {
	      out[l++] = b[j++];
	    }
	    return out;
	  };

	  return ArrayExtensions;

	})();


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, Math, Regexp, abs, ceil, float32Precision, float64Precision, floor, inverseFloat64Precision, inverstFlaot32Precision, max, min, numberRegexp, pow, random, ref, round;

	Foundation = __webpack_require__(13);

	Regexp = __webpack_require__(18);

	numberRegexp = Regexp.numberRegexp;

	float64Precision = 0.0000000001;

	float32Precision = 0.0000001;

	inverseFloat64Precision = 1 / float64Precision;

	inverstFlaot32Precision = 1 / float32Precision;

	ref = self.Math, abs = ref.abs, min = ref.min, max = ref.max, ceil = ref.ceil, floor = ref.floor, round = ref.round, random = ref.random, pow = ref.pow;

	module.exports = Math = (function() {
	  var bound;

	  function Math() {}

	  Math.nearInfinity = pow(10, 100);

	  Math.nearInfinityResult = pow(10, 50);

	  Math.float32Precision = float32Precision;

	  Math.float64Precision = float64Precision;

	  Math.modulo = function(a, b) {
	    var r;
	    r = a % b;
	    if (r < 0) {
	      return r + b;
	    } else {
	      return r;
	    }
	  };

	  Math.stringToNumberArray = function(string) {
	    var a, i, j, len, match, v;
	    a = string.split(",");
	    for (i = j = 0, len = a.length; j < len; i = ++j) {
	      v = a[i];
	      match = v.match(numberRegexp);
	      a[i] = match != null ? match[0] - 0 : 0;
	    }
	    return a;
	  };

	  Math.minMagnitude = function(a, magnitude) {
	    if (a < 0) {
	      return min(a, -magnitude);
	    } else {
	      return max(a, magnitude);
	    }
	  };

	  Math.maxMagnitude = function(a, magnitude) {
	    return bound(-magnitude, a, magnitude);
	  };

	  Math.maxChange = function(newValue, oldValue, maxChangeV) {
	    return bound(oldValue - maxChangeV, newValue, oldValue + maxChangeV);
	  };

	  Math.bound = bound = function(a, b, c) {
	    if (isNaN(b)) {
	      return a;
	    }
	    if (b < a) {
	      return a;
	    } else if (b > c) {
	      return c;
	    } else {
	      return b;
	    }
	  };

	  Math.absGt = function(a, b) {
	    return abs(a) > abs(b);
	  };

	  Math.absLt = function(a, b) {
	    return abs(a) < abs(b);
	  };

	  Math.absGte = function(a, b) {
	    return abs(a) >= abs(b);
	  };

	  Math.absLte = function(a, b) {
	    return abs(a) <= abs(b);
	  };

	  Math.abs = abs;

	  Math.min = min;

	  Math.max = max;

	  Math.round = round;

	  Math.ceil = function(v, m) {
	    if (m == null) {
	      m = 1;
	    }
	    return ceil(v / m) * m;
	  };

	  Math.floor = function(v, m) {
	    if (m == null) {
	      m = 1;
	    }
	    return floor(v / m) * m;
	  };

	  Math.round = function(v, m) {
	    if (m == null) {
	      m = 1;
	    }
	    return round(v / m) * m;
	  };

	  Math.simplifyNum = function(num) {
	    return round(num * inverseFloat64Precision) * float64Precision;
	  };

	  Math.floatEq = function(n1, n2) {
	    return n1 === n2 || float64Precision > abs(n1 - n2);
	  };

	  Math.float32Eq = function(n1, n2) {
	    return n1 === n2 || float32Precision > abs(n1 - n2);
	  };

	  Math.floatEq0 = function(n1) {
	    return n1 === 0 || float64Precision > abs(n1);
	  };

	  Math.float32Eq0 = function(n1) {
	    return n1 === 0 || float32Precision > abs(n1);
	  };

	  Math.random = random;

	  Math.intRand = function(max) {
	    return random() * max | 0;
	  };

	  Math.iPart = function(v) {
	    return v - (v % 1);
	  };

	  Math.fPart = function(v) {
	    return v % 1;
	  };

	  Math.commaize = function(x) {
	    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
	  };

	  Math.cyclingSequenceFunction = function(sequence) {
	    var sequencePos;
	    sequencePos = sequence.length;
	    return function() {
	      sequencePos++;
	      if (sequencePos >= sequence.length) {
	        sequencePos = 0;
	      }
	      return sequence[sequencePos];
	    };
	  };

	  return Math;

	})();


/***/ },
/* 18 */
/***/ function(module, exports) {

	var Regexp;

	module.exports = Regexp = (function() {
	  function Regexp() {}

	  Regexp.findUrlProtocolRegexp = /([\w-]+)(:\/\/)/;

	  Regexp.findDomainRegexp = /[\w]+(?:-[\w]+)*(?:\.[\w]+(?:-[\w]+)*)*(?:\.[a-z]{2,20})?/;

	  Regexp.urlQueryParamsRegexp = /(?:[-+=&*._\w]|%[a-f\d]{2})+/i;

	  Regexp.findUrlPathRegexp = /(?:\/~?(?:[-+*._\w]|%[a-f\d]{2})*)*/;

	  Regexp.findUrlPortRegexp = /(\:)(\d+)/;

	  Regexp.emailRegexp = RegExp("^([_\\w-]+(?:\\.[_\\w]+)*)@(" + Regexp.findDomainRegexp.source + ")$", "i");

	  Regexp.numberRegexp = /([-]?\.[0-9]+)|([-]?[0-9]+(\.[0-9]+)?)/;

	  Regexp.urlProtocolRegexp = RegExp("^" + Regexp.findUrlProtocolRegexp.source + "$", "i");

	  Regexp.domainRegexp = RegExp("^" + Regexp.findDomainRegexp.source + "$", "i");

	  Regexp.urlPathRegexp = RegExp("^" + Regexp.findUrlPathRegexp.source + "$", "i");

	  Regexp.urlQueryRegexp = RegExp("^" + Regexp.urlQueryParamsRegexp.source + "$", "i");

	  Regexp.isoDateRegexp = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;

	  Regexp.hex16ColorRegex = /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])?$/i;

	  Regexp.hex256ColorRegex = /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})?$/i;

	  Regexp.rgbColorRegex = /rgb *\( *(\d+%?) *, *(\d+%?) *, *(\d+%?) *\)/;

	  Regexp.rgbaColorRegex = /rgba *\( *(\d+%?) *, *(\d+%?) *, *(\d+%?) *, *(\d*\.?\d*)\)/;

	  Regexp.colorRegex = new RegExp("(" + Regexp.hex16ColorRegex.source + ")|(" + Regexp.hex256ColorRegex.source + ")|(" + Regexp.rgbColorRegex.source + ")|(" + Regexp.rgbaColorRegex.source + ")");

	  Regexp.wordsRegex = /[^\s]+/g;


	  /*
	  match OUTPUT: [url, protocol, '://', domain, ':', port, path, '?', query]
	  
	  USAGE:
	    [_, protocol, _, domain, _, port, path, _, query] = str.match findUrlRegexp
	  
	  DESIGN NOTE:
	    The reason why I included the fixed strings ('://', ':' and '?') was so that
	    you can take the matchResult, alter individual elements and create a value url easily by:
	  
	      matchResult.slice(1).join ''
	   */

	  Regexp.findUrlRegexp = RegExp("(?:" + Regexp.findUrlProtocolRegexp.source + ")(" + Regexp.findDomainRegexp.source + ")(?:" + Regexp.findUrlPortRegexp.source + ")?(" + Regexp.findUrlPathRegexp.source + ")?(?:(\\?)(" + Regexp.urlQueryParamsRegexp.source + ")?)?", "i");

	  Regexp.findSourceReferenceUrlRegexp = RegExp("(" + Regexp.findUrlProtocolRegexp.source + ")(" + Regexp.findDomainRegexp.source + ")?(?:" + Regexp.findUrlPortRegexp.source + ")?(" + Regexp.findUrlPathRegexp.source + ")?(?:(\\?)(" + Regexp.urlQueryParamsRegexp.source + ")?)?(?:\\:(\\d+))?(?:\\:(\\d+))?", "i");

	  Regexp.urlRegexp = RegExp("^" + Regexp.findUrlRegexp.source + "$", "i");

	  return Regexp;

	})();


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, Log, log,
	  slice = [].slice;

	Foundation = __webpack_require__(13);

	module.exports = Log = (function() {
	  function Log() {}

	  Log.contextString = function(stack, defaultContext) {
	    var caller, context;
	    if (stack && (caller = stack[1])) {
	      context = caller["function"] ? caller["class"] ? caller["class"] + "::" + caller["function"] + "()" : caller["function"] + "()" : defaultContext ? defaultContext + ":" : "";
	      if (caller.sourceFileName) {
	        return caller.sourceFileName + ("-" + caller.sourceLine + ": ") + context;
	      }
	    } else {
	      return "()";
	    }
	  };

	  Log.autoSizedIndepect = function(toInspect, maxLength, maxDepth) {
	    var depth, inspected;
	    if (maxLength == null) {
	      maxLength = 512;
	    }
	    if (maxDepth == null) {
	      maxDepth = 10;
	    }
	    inspected = null;
	    depth = maxDepth;
	    while ((inspected = Foundation.Inspect.inspectLean(toInspect, {
	        maxDepth: depth,
	        maxLength: maxLength
	      })).match(/\.\.\.$/)) {
	      depth--;
	    }
	    return inspected;
	  };

	  Log.loggedParamsString = function(params) {
	    if (typeof params === "string") {
	      return params;
	    } else {
	      return this.autoSizedIndepect(params);
	    }
	  };

	  Log.hideLogging = function() {
	    return this.loggingHidden = true;
	  };

	  Log.showLogging = function() {
	    return this.loggingHidden = false;
	  };

	  Log.rawLog = function() {
	    if (!this.loggingHidden) {
	      return console.log.apply(console, arguments);
	    }
	  };

	  Log.rawErrorLog = function() {
	    if (!this.loggingHidden) {
	      return console.error.apply(console, arguments);
	    }
	  };

	  Log.logCore = function(m, stack, className) {
	    if (this.alternativeLogger) {
	      return this.alternativeLogger.logCore(m, stack, className);
	    } else {
	      return this.rawLog(((this.contextString(stack, className)) + " ") + this.loggedParamsString(m));
	    }
	  };

	  return Log;

	})();

	Log.log = log = function() {
	  var args, m, stack;
	  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	  m = args.length === 1 ? args[0] : args;
	  stack = Foundation.callStack();
	  Log.logCore(m, stack, this.name);
	  return args[args.length - 1];
	};

	Log.logL = function(obj) {
	  var k, ret, v;
	  ret = null;
	  for (k in obj) {
	    v = obj[k];
	    ret = v;
	  }
	  log(obj);
	  return ret;
	};


/***/ },
/* 20 */
/***/ function(module, exports) {

	
	/*
	Maybe we should just the API for array compatibility rather than specific types.
	  typeof obj == "object" &&
	    && isFunction obj.forEach
	    && isFunction obj.indexOf
	    && isNumber obj.length
	 */
	var Types, isArray;

	isArray = self.Uint8ClampedArray ? function(obj) {
	  return !!obj && (obj.constructor === Array || obj instanceof Uint8ClampedArray || obj instanceof Int8Array || obj instanceof Uint8Array || obj instanceof Int16Array || obj instanceof Uint16Array || obj instanceof Int32Array || obj instanceof Uint32Array || obj instanceof Float32Array || obj instanceof Float64Array);
	} : function(obj) {
	  return !!obj && (obj.constructor === Array || obj instanceof Int8Array || obj instanceof Uint8Array || obj instanceof Int16Array || obj instanceof Uint16Array || obj instanceof Int32Array || obj instanceof Uint32Array || obj instanceof Float32Array || obj instanceof Float64Array);
	};

	module.exports = Types = (function() {
	  var cloneObjectUpToKey, deepEach, deepMap, deepMapArray, deepMapObject, functionName, hasKeys, isClass, isFunction, isJsonAtomicType, isNumber, isObject, isPlainArray, isPlainObject, isString, noopMapper, objectName, toJsonStructure, toPostMessageStructure;

	  function Types() {}

	  Types.isPromise = function(obj) {
	    return isFunction(obj != null ? obj.then : void 0);
	  };

	  Types.isRegExp = function(obj) {
	    return obj instanceof RegExp;
	  };

	  Types.isNumber = isNumber = function(obj) {
	    return typeof obj === "number";
	  };

	  Types.isArray = isArray;

	  Types.isDate = function(obj) {
	    return obj && obj.constructor === Date;
	  };

	  Types.isString = isString = function(obj) {
	    return typeof obj === "string";
	  };

	  Types.isFunction = isFunction = function(obj) {
	    return typeof obj === "function";
	  };

	  Types.isEmptyObject = function(obj) {
	    return Object.keys(obj).length === 0;
	  };

	  Types.isClass = isClass = function(obj) {
	    return !!(typeof obj === "function" && ((typeof obj.__super__ === "object") || (obj.prototype && hasKeys(obj.prototype))));
	  };

	  Types.isJsonAtomicType = isJsonAtomicType = function(a) {
	    return isString(a) || isNumber(a) || a === true || a === false || a === null;
	  };

	  Types.isJsonType = function() {
	    return isJsonAtomicType(a) || isPlainObject(a) || isPlainArray(a);
	  };


	  /*
	  like RubyOnRails#present:
	    "An object is present if it's not blank."
	  
	  Examples:
	    "", undefined, null => false
	    0 => true
	  
	  If 'obj' has method: obj.present() => !!obj.present()
	   */

	  Types.present = function(obj) {
	    if (isFunction(obj != null ? obj.present : void 0)) {
	      return !!obj.present();
	    } else {
	      return obj !== "" && obj !== void 0 && obj !== null;
	    }
	  };

	  Types.isObject = isObject = function(obj) {
	    return !!obj && typeof obj === "object" && !isArray(obj);
	  };

	  Types.functionName = functionName = function(f) {
	    var matched;
	    return f.name || ((matched = ("" + f).match(/function ([a-zA-Z]+)\(/)) && matched[1]) || "function";
	  };

	  Types.objectName = objectName = function(obj) {
	    var a, name, ref;
	    if (!obj) {
	      return "" + obj;
	    } else if (a = typeof obj.getClassPathName === "function" ? obj.getClassPathName() : void 0) {
	      return a;
	    } else if (a = obj.classPathName) {
	      return a;
	    } else if (obj.constructor === Object) {
	      return "Object";
	    } else if (isFunction(obj)) {
	      return functionName(obj);
	    } else if (isString(name = (ref = obj.constructor) != null ? ref.name : void 0) && name.length > 0) {
	      return name;
	    } else if (obj instanceof Object) {
	      return "(anonymous instanceof Object)";
	    } else {
	      return "(objectName unknown)";
	    }
	  };

	  Types.isBrowserObject = function(obj) {
	    var name;
	    if (!Types.isObject(obj)) {
	      return false;
	    }
	    name = Types.objectName(obj);
	    return name.slice(0, 4) === "HTML" || name.slice(0, 22) === "CanvasRenderingContext";
	  };

	  Types.isPlainArray = isPlainArray = function(v) {
	    if (v) {
	      return v.constructor === Array;
	    } else {
	      return false;
	    }
	  };

	  Types.isPlainObject = isPlainObject = function(v) {
	    if (v) {
	      return v.constructor === Object;
	    } else {
	      return false;
	    }
	  };

	  Types.hasKeys = hasKeys = function(o) {
	    var k;
	    for (k in o) {
	      return true;
	    }
	    return false;
	  };

	  Types.deepEach = deepEach = function(v, f) {
	    var j, k, len, subV;
	    if (isPlainArray(v)) {
	      for (j = 0, len = v.length; j < len; j++) {
	        subV = v[j];
	        deepEach(subV, f);
	      }
	    } else if (isPlainObject(v)) {
	      for (k in v) {
	        subV = v[k];
	        deepEach(subV, f);
	      }
	    } else {
	      f(v);
	    }
	    return v;
	  };


	  /*
	  only creates a new array if the children changed
	   */

	  deepMapArray = function(array, mapper, options) {
	    var i, j, len, r, res, v;
	    res = null;
	    for (i = j = 0, len = array.length; j < len; i = ++j) {
	      v = array[i];
	      r = deepMap(v, mapper, options);
	      if (r !== v) {
	        res || (res = array.slice());
	        res[i] = r;
	      }
	    }
	    return res || array;
	  };

	  cloneObjectUpToKey = function(obj, k) {
	    var k2, res, v;
	    res = {};
	    for (k2 in obj) {
	      v = obj[k2];
	      if (k2 === k) {
	        break;
	      }
	      res[k2] = v;
	    }
	    return res;
	  };

	  deepMapObject = function(obj, mapper, options) {
	    var k, r, res, v;
	    res = null;
	    for (k in obj) {
	      v = obj[k];
	      r = deepMap(v, mapper, options);
	      if (r !== v || res) {
	        res || (res = cloneObjectUpToKey(obj, k));
	        res[k] = r;
	      }
	    }
	    return res || obj;
	  };

	  noopMapper = function(v) {
	    return v;
	  };


	  /*
	  Applies "f" to every -value- in a nested structure of plain arrays and objects.
	  Pure functional efficient:
	    If an array or object, and all its sub values, didn't change, the original array/object is reused.
	  
	  NOTE: deepMap only yields values to 'mapper' which are NOT plain arrays nor plain objects.
	   */

	  Types.deepMap = deepMap = function(v, mapper, options) {
	    var arrayMapper, objectMapper;
	    arrayMapper = (options != null ? options.arrays : void 0) || noopMapper;
	    objectMapper = (options != null ? options.objects : void 0) || noopMapper;
	    mapper || (mapper = noopMapper);
	    if (isPlainArray(v)) {
	      return deepMapArray(arrayMapper(v), mapper, options);
	    } else if (isPlainObject(v)) {
	      return deepMapObject(objectMapper(v), mapper, options);
	    } else {
	      return mapper(v);
	    }
	  };

	  Types.toPlainStructure = function(o) {
	    return deepMap(o, function(o) {
	      if (isObject(o)) {
	        if (o.toPlainStructure) {
	          return o.toPlainStructure();
	        } else {
	          return objectName(o);
	        }
	      } else {
	        return o;
	      }
	    });
	  };


	  /*
	  similar to toPlainStructure, except all non-JSON types are converted to strings
	   */

	  Types.toJsonStructure = toJsonStructure = function(o) {
	    return deepMap(o, function(o) {
	      if (isObject(o)) {
	        if (o.toJsonStructure) {
	          return o.toJsonStructure();
	        } else {
	          return toJsonStructure(o.toPlainStructure ? o.toPlainStructure() : "" + o);
	        }
	      } else if (isJsonAtomicType(o)) {
	        return o;
	      } else {
	        return "" + o;
	      }
	    });
	  };

	  Types.toPostMessageStructure = toPostMessageStructure = function(o) {
	    return deepMap(o, function(o) {
	      switch (o.constructor) {
	        case ArrayBuffer:
	        case Date:
	        case RegExp:
	        case Blob:
	        case File:
	        case FileList:
	        case ImageData:
	        case Boolean:
	        case String:
	          return o;
	        default:
	          if (isObject(o)) {
	            if (o.toPostMessageStructure) {
	              return o.toPostMessageStructure();
	            } else {
	              if (o.toPlainStructure) {
	                return toPostMessageStructure(o.toPlainStructure());
	              } else {
	                return "" + o;
	              }
	            }
	          } else {
	            return "" + o;
	          }
	      }
	    });
	  };

	  return Types;

	})();


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var Async;

	module.exports = Async = __webpack_require__(22);

	Async.All = __webpack_require__(23);

	Async.Basic = __webpack_require__(24);

	Async.ProgressAdapter = __webpack_require__(37);

	Async.finishLoad(["All", "Basic", "ProgressAdapter"]);


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(13);

	module.exports = Foundation.Async || (Foundation.Async = (function(superClass) {
	  extend(Async, superClass);

	  function Async() {
	    return Async.__super__.constructor.apply(this, arguments);
	  }

	  Async.namespace = Foundation;

	  Async.namespacePath = "Neptune.Art.Foundation.Async";

	  return Async;

	})(Neptune.Base));

	Foundation.addNamespace(Foundation.Async);


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var Async, Basic, createAllClass;

	Async = __webpack_require__(22);

	Basic = __webpack_require__(24);

	createAllClass = __webpack_require__(30).createAllClass;

	createAllClass(Async, Basic);


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var Basic, Promise, log;

	log = __webpack_require__(19).log;

	Promise = __webpack_require__(25);

	module.exports = Basic = (function() {
	  var timeout;

	  function Basic() {}

	  Basic.timeout = timeout = function(ms, f) {
	    return new Promise(function(resolve) {
	      return setTimeout(function() {
	        if (typeof f === "function") {
	          f();
	        }
	        return resolve();
	      }, ms);
	    });
	  };

	  Basic.requestAnimationFrame = self.requestAnimationFrame || self.webkitRequestAnimationFrame || self.mozRequestAnimationFrame || self.oRequestAnimationFrame || self.msRequestAnimationFrame || function(f) {
	    return setTimeout(f, 1000 / 60);
	  };

	  Basic.nextTick = function(f) {
	    return timeout(0, f);
	  };

	  Basic.throwErrorOutOfStack = function(e) {
	    return timeout(0, function() {
	      throw e;
	    });
	  };

	  Basic.evalAndThrowErrorsOutOfStack = function(f) {
	    var e, error;
	    try {
	      return f();
	    } catch (error) {
	      e = error;
	      console.error(e.stack);
	      return Basic.throwErrorOutOfStack(e);
	    }
	  };

	  return Basic;

	})();


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var ArtPromise, Promise;

	Promise = self.Promise || __webpack_require__(26);


	/*
	ArtPromise extends ES6 Promises in the following ways:

	- constructing a promise with no parameters is allowed
	- promise.resolve and promise.reject are supported as
	  alternative ways to resolve or reject a promise

	If native promises are supported, they are used,
	otherwise a polyfill is used.
	 */

	module.exports = ArtPromise = (function() {
	  ArtPromise.ES6Promise = Promise;

	  ArtPromise.all = Promise.all;

	  ArtPromise.race = Promise.race;

	  ArtPromise.reject = Promise.reject;

	  ArtPromise.resolve = Promise.resolve;

	  function ArtPromise(_function) {
	    this.resolve = this.reject = null;
	    this._nativePromise = null;
	    this._nativePromise = new Promise((function(_this) {
	      return function(resolve, reject) {
	        _this.resolve = resolve;
	        _this.reject = reject;
	        return typeof _function === "function" ? _function(_this.resolve, _this.reject) : void 0;
	      };
	    })(this));
	  }

	  ArtPromise.prototype.then = function(a, b) {
	    return this._nativePromise.then(a, b);
	  };

	  ArtPromise.prototype["catch"] = function(a) {
	    return this._nativePromise["catch"](a);
	  };

	  return ArtPromise;

	})();

	self.Promise || (self.Promise = ArtPromise);


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, global, module) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   3.0.2
	 */

	(function() {
	    "use strict";
	    function lib$es6$promise$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }

	    function lib$es6$promise$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }

	    function lib$es6$promise$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }

	    var lib$es6$promise$utils$$_isArray;
	    if (!Array.isArray) {
	      lib$es6$promise$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      lib$es6$promise$utils$$_isArray = Array.isArray;
	    }

	    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
	    var lib$es6$promise$asap$$len = 0;
	    var lib$es6$promise$asap$$toString = {}.toString;
	    var lib$es6$promise$asap$$vertxNext;
	    var lib$es6$promise$asap$$customSchedulerFn;

	    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
	      lib$es6$promise$asap$$len += 2;
	      if (lib$es6$promise$asap$$len === 2) {
	        // If len is 2, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        if (lib$es6$promise$asap$$customSchedulerFn) {
	          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
	        } else {
	          lib$es6$promise$asap$$scheduleFlush();
	        }
	      }
	    }

	    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
	      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
	    }

	    function lib$es6$promise$asap$$setAsap(asapFn) {
	      lib$es6$promise$asap$$asap = asapFn;
	    }

	    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
	    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
	    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
	    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

	    // test for web worker but not in IE10
	    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';

	    // node
	    function lib$es6$promise$asap$$useNextTick() {
	      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	      // see https://github.com/cujojs/when/issues/410 for details
	      return function() {
	        process.nextTick(lib$es6$promise$asap$$flush);
	      };
	    }

	    // vertx
	    function lib$es6$promise$asap$$useVertxTimer() {
	      return function() {
	        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
	      };
	    }

	    function lib$es6$promise$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });

	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }

	    // web worker
	    function lib$es6$promise$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = lib$es6$promise$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }

	    function lib$es6$promise$asap$$useSetTimeout() {
	      return function() {
	        setTimeout(lib$es6$promise$asap$$flush, 1);
	      };
	    }

	    var lib$es6$promise$asap$$queue = new Array(1000);
	    function lib$es6$promise$asap$$flush() {
	      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
	        var callback = lib$es6$promise$asap$$queue[i];
	        var arg = lib$es6$promise$asap$$queue[i+1];

	        callback(arg);

	        lib$es6$promise$asap$$queue[i] = undefined;
	        lib$es6$promise$asap$$queue[i+1] = undefined;
	      }

	      lib$es6$promise$asap$$len = 0;
	    }

	    function lib$es6$promise$asap$$attemptVertx() {
	      try {
	        var r = require;
	        var vertx = __webpack_require__(28);
	        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
	        return lib$es6$promise$asap$$useVertxTimer();
	      } catch(e) {
	        return lib$es6$promise$asap$$useSetTimeout();
	      }
	    }

	    var lib$es6$promise$asap$$scheduleFlush;
	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (lib$es6$promise$asap$$isNode) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
	    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
	    } else if (lib$es6$promise$asap$$isWorker) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
	    } else if (lib$es6$promise$asap$$browserWindow === undefined && "function" === 'function') {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
	    } else {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
	    }

	    function lib$es6$promise$$internal$$noop() {}

	    var lib$es6$promise$$internal$$PENDING   = void 0;
	    var lib$es6$promise$$internal$$FULFILLED = 1;
	    var lib$es6$promise$$internal$$REJECTED  = 2;

	    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

	    function lib$es6$promise$$internal$$selfFulfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }

	    function lib$es6$promise$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.');
	    }

	    function lib$es6$promise$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
	        return lib$es6$promise$$internal$$GET_THEN_ERROR;
	      }
	    }

	    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }

	    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
	       lib$es6$promise$asap$$asap(function(promise) {
	        var sealed = false;
	        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            lib$es6$promise$$internal$$resolve(promise, value);
	          } else {
	            lib$es6$promise$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;

	          lib$es6$promise$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));

	        if (!sealed && error) {
	          sealed = true;
	          lib$es6$promise$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }

	    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
	      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, thenable._result);
	      } else {
	        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      }
	    }

	    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
	      if (maybeThenable.constructor === promise.constructor) {
	        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        var then = lib$es6$promise$$internal$$getThen(maybeThenable);

	        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        } else if (lib$es6$promise$utils$$isFunction(then)) {
	          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }

	    function lib$es6$promise$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
	      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
	        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
	      } else {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      }
	    }

	    function lib$es6$promise$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }

	      lib$es6$promise$$internal$$publish(promise);
	    }

	    function lib$es6$promise$$internal$$fulfill(promise, value) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }

	      promise._result = value;
	      promise._state = lib$es6$promise$$internal$$FULFILLED;

	      if (promise._subscribers.length !== 0) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
	      }
	    }

	    function lib$es6$promise$$internal$$reject(promise, reason) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	      promise._state = lib$es6$promise$$internal$$REJECTED;
	      promise._result = reason;

	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
	    }

	    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;

	      parent._onerror = null;

	      subscribers[length] = child;
	      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;

	      if (length === 0 && parent._state) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
	      }
	    }

	    function lib$es6$promise$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;

	      if (subscribers.length === 0) { return; }

	      var child, callback, detail = promise._result;

	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];

	        if (child) {
	          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }

	      promise._subscribers.length = 0;
	    }

	    function lib$es6$promise$$internal$$ErrorObject() {
	      this.error = null;
	    }

	    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

	    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
	        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
	      }
	    }

	    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
	          value, error, succeeded, failed;

	      if (hasCallback) {
	        value = lib$es6$promise$$internal$$tryCatch(callback, detail);

	        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }

	        if (promise === value) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
	          return;
	        }

	      } else {
	        value = detail;
	        succeeded = true;
	      }

	      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      } else if (failed) {
	        lib$es6$promise$$internal$$reject(promise, error);
	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, value);
	      }
	    }

	    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        lib$es6$promise$$internal$$reject(promise, e);
	      }
	    }

	    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
	      var enumerator = this;

	      enumerator._instanceConstructor = Constructor;
	      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

	      if (enumerator._validateInput(input)) {
	        enumerator._input     = input;
	        enumerator.length     = input.length;
	        enumerator._remaining = input.length;

	        enumerator._init();

	        if (enumerator.length === 0) {
	          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	        } else {
	          enumerator.length = enumerator.length || 0;
	          enumerator._enumerate();
	          if (enumerator._remaining === 0) {
	            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	          }
	        }
	      } else {
	        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
	      }
	    }

	    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
	      return lib$es6$promise$utils$$isArray(input);
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
	      return new Error('Array Methods must be provided an Array');
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
	      this._result = new Array(this.length);
	    };

	    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

	    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
	      var enumerator = this;

	      var length  = enumerator.length;
	      var promise = enumerator.promise;
	      var input   = enumerator._input;

	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        enumerator._eachEntry(input[i], i);
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var enumerator = this;
	      var c = enumerator._instanceConstructor;

	      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
	        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
	          entry._onerror = null;
	          enumerator._settledAt(entry._state, i, entry._result);
	        } else {
	          enumerator._willSettleAt(c.resolve(entry), i);
	        }
	      } else {
	        enumerator._remaining--;
	        enumerator._result[i] = entry;
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var enumerator = this;
	      var promise = enumerator.promise;

	      if (promise._state === lib$es6$promise$$internal$$PENDING) {
	        enumerator._remaining--;

	        if (state === lib$es6$promise$$internal$$REJECTED) {
	          lib$es6$promise$$internal$$reject(promise, value);
	        } else {
	          enumerator._result[i] = value;
	        }
	      }

	      if (enumerator._remaining === 0) {
	        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
	      }
	    };

	    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;

	      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
	      });
	    };
	    function lib$es6$promise$promise$all$$all(entries) {
	      return new lib$es6$promise$enumerator$$default(this, entries).promise;
	    }
	    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
	    function lib$es6$promise$promise$race$$race(entries) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      var promise = new Constructor(lib$es6$promise$$internal$$noop);

	      if (!lib$es6$promise$utils$$isArray(entries)) {
	        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
	        return promise;
	      }

	      var length = entries.length;

	      function onFulfillment(value) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      }

	      function onRejection(reason) {
	        lib$es6$promise$$internal$$reject(promise, reason);
	      }

	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
	      }

	      return promise;
	    }
	    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
	    function lib$es6$promise$promise$resolve$$resolve(object) {
	      /*jshint validthis:true */
	      var Constructor = this;

	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }

	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$resolve(promise, object);
	      return promise;
	    }
	    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
	    function lib$es6$promise$promise$reject$$reject(reason) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$reject(promise, reason);
	      return promise;
	    }
	    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

	    var lib$es6$promise$promise$$counter = 0;

	    function lib$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }

	    function lib$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }

	    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise's eventual value or the reason
	      why the promise cannot be fulfilled.

	      Terminology
	      -----------

	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.

	      A promise can be in one of three states: pending, fulfilled, or rejected.

	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.

	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.


	      Basic Usage:
	      ------------

	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);

	        // on failure
	        reject(reason);
	      });

	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Advanced Usage:
	      ---------------

	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.

	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();

	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();

	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }

	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```

	      Unlike callbacks, promises are great composable primitives.

	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON

	        return values;
	      });
	      ```

	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function lib$es6$promise$promise$$Promise(resolver) {
	      this._id = lib$es6$promise$promise$$counter++;
	      this._state = undefined;
	      this._result = undefined;
	      this._subscribers = [];

	      if (lib$es6$promise$$internal$$noop !== resolver) {
	        if (!lib$es6$promise$utils$$isFunction(resolver)) {
	          lib$es6$promise$promise$$needsResolver();
	        }

	        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
	          lib$es6$promise$promise$$needsNew();
	        }

	        lib$es6$promise$$internal$$initializePromise(this, resolver);
	      }
	    }

	    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
	    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
	    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
	    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
	    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
	    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
	    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;

	    lib$es6$promise$promise$$Promise.prototype = {
	      constructor: lib$es6$promise$promise$$Promise,

	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.

	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```

	      Chaining
	      --------

	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.

	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });

	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```

	      Assimilation
	      ------------

	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```

	      If the assimliated promise rejects, then the downstream promise will also reject.

	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```

	      Simple Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var result;

	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```

	      Advanced Example
	      --------------

	      Synchronous Example

	      ```javascript
	      var author, books;

	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```

	      Errback Example

	      ```js

	      function foundBooks(books) {

	      }

	      function failure(reason) {

	      }

	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```

	      Promise Example;

	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: function(onFulfillment, onRejection) {
	        var parent = this;
	        var state = parent._state;

	        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
	          return this;
	        }

	        var child = new this.constructor(lib$es6$promise$$internal$$noop);
	        var result = parent._result;

	        if (state) {
	          var callback = arguments[state - 1];
	          lib$es6$promise$asap$$asap(function(){
	            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
	          });
	        } else {
	          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	        }

	        return child;
	      },

	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.

	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }

	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }

	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```

	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };
	    function lib$es6$promise$polyfill$$polyfill() {
	      var local;

	      if (typeof global !== 'undefined') {
	          local = global;
	      } else if (typeof self !== 'undefined') {
	          local = self;
	      } else {
	          try {
	              local = Function('return this')();
	          } catch (e) {
	              throw new Error('polyfill failed because global object is unavailable in this environment');
	          }
	      }

	      var P = local.Promise;

	      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
	        return;
	      }

	      local.Promise = lib$es6$promise$promise$$default;
	    }
	    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

	    var lib$es6$promise$umd$$ES6Promise = {
	      'Promise': lib$es6$promise$promise$$default,
	      'polyfill': lib$es6$promise$polyfill$$default
	    };

	    /* global define:true module:true window: true */
	    if ("function" === 'function' && __webpack_require__(29)['amd']) {
	      !(__WEBPACK_AMD_DEFINE_RESULT__ = function() { return lib$es6$promise$umd$$ES6Promise; }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = lib$es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
	    }

	    lib$es6$promise$polyfill$$default();
	}).call(this);


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(27), (function() { return this; }()), __webpack_require__(10)(module)))

/***/ },
/* 27 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 28 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, CallStack, Log, ShallowClone, String, Types, Unique, WebpackHotLoader, callStack, capitalize, decapitalize, extendClone, functionName, isFunction, isPlainObject, isString, log, nextUniqueObjectId, objectName,
	  slice = [].slice,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	CallStack = __webpack_require__(31);

	Log = __webpack_require__(19);

	Types = __webpack_require__(20);

	Unique = __webpack_require__(33);

	String = __webpack_require__(34);

	ShallowClone = __webpack_require__(35);

	WebpackHotLoader = __webpack_require__(36);

	capitalize = String.capitalize, decapitalize = String.decapitalize;

	log = Log.log;

	callStack = CallStack.callStack;

	extendClone = ShallowClone.extendClone;

	isFunction = Types.isFunction, objectName = Types.objectName, isPlainObject = Types.isPlainObject, functionName = Types.functionName, isString = Types.isString;

	nextUniqueObjectId = Unique.nextUniqueObjectId;

	module.exports = BaseObject = (function() {
	  var addGetter, addGetters, addSetter, addSetters, defProperties, defProperty, excludedKeys, imprintObject, mixInto, propGetterName, propInternalName, propSetterName;

	  BaseObject.objectsCreated = 0;

	  BaseObject.objectsCreatedByType = {};

	  BaseObject.resetStats = function() {
	    BaseObject.objectsCreated = 0;
	    return BaseObject.objectsCreatedByType = {};
	  };

	  BaseObject.imprintObject = imprintObject = function(toObject, fromObject, clearOldState) {
	    var k, v;
	    if (clearOldState == null) {
	      clearOldState = false;
	    }
	    if (clearOldState) {
	      for (k in toObject) {
	        v = toObject[k];
	        if (!fromObject.hasOwnProperty(k)) {
	          delete toObject[k];
	        }
	      }
	    }
	    for (k in fromObject) {
	      v = fromObject[k];
	      if (fromObject.hasOwnProperty(k)) {
	        toObject[k] = fromObject[k];
	      }
	    }
	    return fromObject;
	  };

	  BaseObject.imprintFromClass = function(updatedKlass) {
	    if (updatedKlass !== this) {
	      imprintObject(this, updatedKlass, false);
	      imprintObject(this.prototype, updatedKlass.prototype, true);
	    }
	    return this;
	  };

	  BaseObject.inspect = function() {
	    return this.getClassPathName();
	  };

	  BaseObject.getName = function() {
	    return this._name || this.name;
	  };


	  /*
	  TODO: consolidated on one inspector system
	  NOTE: "inspector" parameter is part of the old inspect system
	    The purpose was to resolve recurson on recursive structures.
	    But it ended up being ungainly most the time.
	   */

	  BaseObject.createWithPostCreate = function(klass) {
	    return (klass != null ? klass.postCreate() : void 0) || klass;
	  };


	  /*
	  IN:
	    _module should be the CommonJS 'module'
	    klass: class object which extends BaseObject
	  
	  OUT: originalKlass.postCreate hotReloaded, classModuleState, klass, _module
	  
	  EFFECTS:
	    originalKlass.imprintFromClass newKlass
	    originalKlass.postCreate hotReloaded, classModuleState, klass, _module
	   */

	  BaseObject.createHotWithPostCreate = function(_module, klass) {
	    return WebpackHotLoader.runHot(_module, function(moduleState) {
	      var name, originalKlass;
	      return originalKlass = (moduleState[name = klass.getName()] || (moduleState[name] = {
	        originalKlass: klass
	      })).originalKlass.imprintFromClass(klass).postCreate(klass !== originalKlass, moduleState[klass.getName()], klass, _module);
	    });
	  };


	  /*
	  called every load
	  IN:
	    NOTE: hot-loading inputs are only set if this class created as follows:
	      createHotWithPostCreate module, class Foo extends BaseObject
	  
	    hotReload: true if this class was hot-reloaded
	  
	    classModuleState: a plain-object specific to this class in this module
	      If there is more than one hot-loaded class in the same module, each will have its own classModuleState.
	      classModuleState.originalClass == @
	      Except for .originalClass, you can motify this object as you please. It is persisted
	      across hot loads.
	  
	    klass: the newly loaded class object
	  
	    _module: the CommonJs module object.
	   */

	  BaseObject.postCreate = function(hotReloaded, classModuleState, klass, _module) {
	    return this;
	  };

	  excludedKeys = ["__super__", "namespace", "namespacePath"].concat(Object.keys(Neptune.Base));

	  BaseObject.mixInto = mixInto = function() {
	    var i, intoClass, k, keys, klass, len, v;
	    intoClass = arguments[0], klass = arguments[1], keys = 3 <= arguments.length ? slice.call(arguments, 2) : [];
	    if (keys.length === 0) {
	      keys = Object.keys(klass);
	    }
	    for (i = 0, len = keys.length; i < len; i++) {
	      k = keys[i];
	      if (!(indexOf.call(excludedKeys, k) < 0)) {
	        continue;
	      }
	      v = klass[k];
	      if (intoClass[k]) {
	        console.error("Foundation.mixInto - mix " + (getClassName(klass)) + " into " + (getClassName(intoClass)) + ": " + k + " already exists.");
	      }
	      intoClass[k] = v;
	    }
	    return intoClass;
	  };

	  BaseObject.createAllClass = function() {
	    var All, arg, args, i, len, namespace;
	    namespace = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    for (i = 0, len = args.length; i < len; i++) {
	      arg = args[i];
	      if (arg.prototype instanceof BaseObject) {
	        console.error("createAllClass arguments cannot be subclasses of BaseObject: " + (getClassName(namespace)) + ":" + (getClassName(arg)));
	      }
	      mixInto(namespace, arg);
	    }
	    return All = (function(superClass) {
	      extend(All, superClass);

	      function All() {
	        return All.__super__.constructor.apply(this, arguments);
	      }

	      return All;

	    })(namespace);
	  };

	  function BaseObject() {
	    this.__uniqueId = null;
	  }

	  BaseObject.implementsInterface = function(object, methods) {
	    var i, len, method;
	    for (i = 0, len = methods.length; i < len; i++) {
	      method = methods[i];
	      if (typeof object[method] !== "function") {
	        return false;
	      }
	    }
	    return true;
	  };


	  /*
	  mix-in class methods
	  Define getters/setters example:
	    class MyMixin
	      included: ->
	        @getter foo: -> @_foo
	        @setter foo: (v) -> @_foo = v
	  
	  NOTE! This will NOT include any properties you defined with getter or setter!
	  NOTE! This only copies over values if there aren't already values in the included-into class
	    This somewhat mirrors Ruby's include where the included-into-class's methods take precidence.
	    However, if you include two modules in a row, the first module gets priority here.
	    In ruby the second module gets priority (I believe).
	   */

	  BaseObject.include = function(obj) {
	    var key, ref, value;
	    for (key in obj) {
	      value = obj[key];
	      if (key !== 'included') {
	        if (!this[key]) {
	          this[key] = value;
	        }
	      }
	    }
	    ref = obj.prototype;
	    for (key in ref) {
	      value = ref[key];
	      if (key) {
	        if (!this.prototype[key]) {
	          this.prototype[key] = value;
	        }
	      }
	    }
	    if (typeof obj.included === "function") {
	      obj.included(this);
	    }
	    return this;
	  };

	  BaseObject.getPrototypePropertyExtendedByInheritance = function(propertyName, defaultStructure) {
	    if (this.prototype.hasOwnProperty(propertyName)) {
	      return this.prototype[propertyName];
	    } else {
	      return this.prototype[propertyName] = extendClone(this.__super__[propertyName] || defaultStructure);
	    }
	  };

	  BaseObject.propInternalName = propInternalName = function(prop) {
	    return "_" + prop;
	  };

	  BaseObject._propInternalName = propInternalName;

	  BaseObject._propGetterName = propGetterName = function(prop) {
	    return "get" + capitalize(prop);
	  };

	  BaseObject._propSetterName = propSetterName = function(prop) {
	    return "set" + capitalize(prop);
	  };

	  BaseObject._addGetter = addGetter = function(obj, prop, getter) {
	    obj[propGetterName(prop)] = getter;
	    Object.defineProperty(obj, prop, {
	      get: getter,
	      configurable: true
	    });
	    return prop;
	  };

	  BaseObject._addGetters = addGetters = function(obj, map) {
	    var getter, prop;
	    for (prop in map) {
	      getter = map[prop];
	      addGetter(obj, prop, getter);
	    }
	    return map;
	  };

	  BaseObject._addSetter = addSetter = function(obj, prop, setter) {
	    obj[propSetterName(prop)] = setter;
	    Object.defineProperty(obj, prop, {
	      set: setter,
	      configurable: true
	    });
	    return prop;
	  };

	  BaseObject._addSetters = addSetters = function(obj, map) {
	    var prop, setter;
	    for (prop in map) {
	      setter = map[prop];
	      addSetter(obj, prop, setter);
	    }
	    return map;
	  };

	  BaseObject._defProperty = defProperty = function(obj, prop, defineGetter, defineSetter, initializer) {
	    var propName;
	    propName = propInternalName(prop);
	    if (defineGetter) {
	      addGetter(obj, prop, obj[propGetterName(prop)] = isFunction(initializer) ? function() {
	        if (this[propName] != null) {
	          return this[propName];
	        } else {
	          return this[propName] = initializer();
	        }
	      } : initializer ? function() {
	        if (this[propName] != null) {
	          return this[propName];
	        } else {
	          return this[propName] = initializer;
	        }
	      } : function() {
	        return this[propName];
	      });
	    }
	    if (defineSetter) {
	      return addSetter(obj, prop, function(v) {
	        return this[propName] = v;
	      });
	    }
	  };

	  BaseObject._defProperties = defProperties = function(obj, props, defineGetter, defineSetter) {
	    var i, initializer, len, prop, propMap, results;
	    results = [];
	    for (i = 0, len = props.length; i < len; i++) {
	      prop = props[i];
	      if (isPlainObject(propMap = prop)) {
	        results.push((function() {
	          var results1;
	          results1 = [];
	          for (prop in propMap) {
	            initializer = propMap[prop];
	            results1.push(defProperty(obj, prop, defineGetter, defineSetter, initializer));
	          }
	          return results1;
	        })());
	      } else {
	        results.push(defProperty(obj, prop, defineGetter, defineSetter, null));
	      }
	    }
	    return results;
	  };

	  BaseObject.property = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return defProperties(this.prototype, props, true, true);
	  };

	  BaseObject.propGetter = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    console.error("DEPRICATED: propGetter. Use @getter");
	    return defProperties(this.prototype, props, true, false);
	  };

	  BaseObject.propSetter = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    console.error("DEPRICATED: propSetter. Use @setter");
	    return defProperties(this.prototype, props, false, true);
	  };

	  BaseObject._propListStringToArray = function(propList) {
	    return propList.match(/[_a-z][_a-z0-9]*/gi);
	  };

	  BaseObject._getterSetterHelper = function(isGetter, args, obj) {
	    var arg, i, len, results;
	    if (obj == null) {
	      obj = this.prototype;
	    }
	    results = [];
	    for (i = 0, len = args.length; i < len; i++) {
	      arg = args[i];
	      if (isPlainObject(arg)) {
	        if (isGetter) {
	          results.push(addGetters(obj, arg));
	        } else {
	          results.push(addSetters(obj, arg));
	        }
	      } else if (isString(arg)) {
	        results.push(defProperties(obj, this._propListStringToArray(arg), isGetter, !isGetter));
	      } else {
	        throw new Error("invalid value. Expected string or plain-object:", arg);
	      }
	    }
	    return results;
	  };

	  BaseObject.getter = function() {
	    return this._getterSetterHelper(true, arguments);
	  };

	  BaseObject.setter = function() {
	    return this._getterSetterHelper(false, arguments);
	  };

	  BaseObject.classGetter = function() {
	    return this._getterSetterHelper(true, arguments, this);
	  };

	  BaseObject.classSetter = function() {
	    return this._getterSetterHelper(false, arguments, this);
	  };

	  BaseObject.classProperty = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return defProperties(this.prototype, props, true, true);
	  };

	  BaseObject.classPropGetter = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    console.error("DEPRICATED: classPropGetter. Use @classGetter");
	    return defProperties(this.prototype, props, true, false);
	  };

	  BaseObject.classPropGetter = function() {
	    var props;
	    props = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    console.error("DEPRICATED: classPropGetter. Use @classSetter");
	    return defProperties(this.prototype, props, false, true);
	  };

	  BaseObject.classGetter({
	    classPath: function() {
	      return this.namespace.namespacePath;
	    },
	    classPathArray: function() {
	      return this.namespacePathArray || (this.namespacePathArray = this.getClassPath().split("."));
	    },
	    classPathName: function() {
	      var p, ref;
	      if (p = (ref = this.namespace) != null ? ref.namespacePath : void 0) {
	        return p + "." + this.getClassName();
	      } else {
	        return this.getClassName();
	      }
	    }
	  });

	  BaseObject.getClassName = function(klass) {
	    if (klass == null) {
	      klass = this;
	    }
	    return (typeof klass.getName === "function" ? klass.getName() : void 0) || klass.name;
	  };


	  /*
	  creates the classGetter "singleton" which returns a single instance of the current class.
	  
	  IN: args are passed to the singleton constructor
	  OUT: null
	  
	  The singleton instance is created on demand the first time it is accessed.
	   */

	  BaseObject.singletonClass = function() {
	    var args, map;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    map = {
	      singleton: (function(_this) {
	        return function() {
	          var ref;
	          if (((ref = _this._singleton) != null ? ref["class"] : void 0) === _this) {
	            return _this._singleton;
	          } else {
	            return _this._singleton = (function(func, args, ctor) {
	              ctor.prototype = func.prototype;
	              var child = new ctor, result = func.apply(child, args);
	              return Object(result) === result ? result : child;
	            })(_this, args, function(){});
	          }
	        };
	      })(this)
	    };
	    map[decapitalize(functionName(this))] = (function(_this) {
	      return function() {
	        return _this.getSingleton();
	      };
	    })(this);
	    this.classGetter(map);
	    return null;
	  };

	  BaseObject.getter({
	    className: function() {
	      return this["class"].getClassName();
	    },
	    "class": function() {
	      return this.constructor;
	    },
	    keys: function() {
	      return Object.keys(this);
	    },
	    classPathArray: function() {
	      return this["class"].getClassPathArray();
	    },
	    classPath: function() {
	      return this["class"].getClassPath();
	    },
	    classPathName: function() {
	      return this["class"].getClassPathName();
	    },
	    classPathNameAndId: function() {
	      return this.classPathName + ":" + this.objectId;
	    },
	    uniqueId: function() {
	      return this.__uniqueId || (this.__uniqueId = nextUniqueObjectId());
	    },
	    objectId: function() {
	      return this.__uniqueId || (this.__uniqueId = nextUniqueObjectId());
	    }
	  });

	  BaseObject.prototype.implementsInterface = function(methods) {
	    return Function.BaseObject.implementsInterface(this, methods);
	  };

	  BaseObject.prototype.tap = function(f) {
	    f(this);
	    return this;
	  };

	  BaseObject.rawLog = function() {
	    return Log.rawLog.apply(Log, arguments);
	  };

	  BaseObject.log = function() {
	    var a, stack, toLog;
	    stack = callStack();
	    toLog = (function() {
	      var i, len, results;
	      if (arguments.length > 1) {
	        results = [];
	        for (i = 0, len = arguments.length; i < len; i++) {
	          a = arguments[i];
	          results.push(a);
	        }
	        return results;
	      } else {
	        return arguments[0];
	      }
	    }).apply(this, arguments);
	    Log.logCore(toLog, stack, this.className);
	    return arguments[arguments.length - 1];
	  };

	  BaseObject.prototype.log = BaseObject.log;

	  BaseObject.prototype.rawLog = BaseObject.rawLog;

	  return BaseObject;

	})();


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var CallStack, Parse, parseURL;

	Parse = __webpack_require__(32);

	parseURL = Parse.url;

	module.exports = CallStack = (function() {
	  var CallStackLine;

	  function CallStack() {}

	  CallStack.CallStackLine = CallStackLine = (function() {
	    CallStackLine.getter = function(map) {
	      var getter, prop, results;
	      results = [];
	      for (prop in map) {
	        getter = map[prop];
	        results.push(Object.defineProperty(this.prototype, prop, {
	          get: getter,
	          configurable: true
	        }));
	      }
	      return results;
	    };

	    CallStackLine.setter = function(map) {
	      var prop, results, setter;
	      results = [];
	      for (prop in map) {
	        setter = map[prop];
	        results.push(Object.defineProperty(this.prototype, prop, {
	          set: setter,
	          configurable: true
	        }));
	      }
	      return results;
	    };

	    function CallStackLine(line) {
	      this.original = line;
	      this["function"] = null;
	      this.source = null;
	      this["class"] = null;
	      this.classPath = null;
	      this.sourceFileName = null;
	      this.sourcePath = null;
	      this.sourceHostWithPort = null;
	      this.sourceLine = 0;
	      this.sourceColumn = 0;
	      if (this.parseLineWithFunction(line)) {

	      } else {
	        this.parseLineWithoutFunction(line);
	      }
	      this.subParseFunction();
	      this.subParseSource();
	    }

	    CallStackLine.prototype.toString = function() {
	      return this.original;
	    };

	    CallStackLine.getter({
	      fileWithLocation: function() {
	        return this._fileWithLocation || (this._fileWithLocation = this.sourceFileName ? this.sourcePath + "/" + this.sourceFileName + ":" + this.sourceLine + ":" + this.sourceColumn : this.original);
	      }
	    });

	    CallStackLine.prototype.parseLineWithFunction = function(line) {
	      var r;
	      if (r = line.match(/\s*at\s((new\s)?[a-zA-Z0-9_.<>]+)\s\(([^)]*):([0-9]+):([0-9]+)\)/)) {
	        this["function"] = r[1];
	        this.source = r[3];
	        this.sourceLine = r[4] | 0;
	        return this.sourceColumn = r[5] | 0;
	      }
	    };

	    CallStackLine.prototype.parseLineWithoutFunction = function(line) {
	      var r;
	      if (r = line.match(/\s*at\s([^)]*):([0-9]+):([0-9]+)/)) {
	        this.source = r[1];
	        this.sourceLine = r[2] | 0;
	        return this.sourceColumn = r[3] | 0;
	      }
	    };

	    CallStackLine.prototype.subParseSource = function() {
	      var url;
	      if (this.source) {
	        url = parseURL(this.source);
	        this.sourceFileName = url.fileName;
	        this.sourcePath = url.path;
	        return this.sourceHostWithPort = url.hostWithPort;
	      }
	    };

	    CallStackLine.prototype.subParseFunction = function() {
	      var f;
	      if (this["function"]) {
	        f = this["function"].split(".");
	        this["function"] = f[f.length - 1];
	        if (this["function"] === "<anonymous>") {
	          this["function"] = void 0;
	        }
	        this["class"] = f[f.length - 2];
	        return this.classPath = f.slice(0, f.length - 2);
	      }
	    };

	    return CallStackLine;

	  })();

	  CallStack.rawCallStack = (new Error).stack ? function(ignoreTop) {
	    if (ignoreTop == null) {
	      ignoreTop = 0;
	    }
	    return (new Error).stack.split(/\n  */).slice(ignoreTop + 2);
	  } : function(ignoreTop) {
	    var e, error;
	    if (ignoreTop == null) {
	      ignoreTop = 0;
	    }
	    try {
	      throw new Error;
	    } catch (error) {
	      e = error;
	      return e.stack.split(/\n  */).slice(ignoreTop + 2);
	    }
	  };

	  CallStack.callStack = function(ignoreTop) {
	    var i, len, line, ref, results;
	    if (ignoreTop == null) {
	      ignoreTop = 0;
	    }
	    ref = CallStack.rawCallStack(ignoreTop + 1);
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      line = ref[i];
	      results.push(new CallStackLine(line));
	    }
	    return results;
	  };

	  return CallStack;

	})();


/***/ },
/* 32 */
/***/ function(module, exports) {

	var Parse;

	module.exports = Parse = (function() {
	  function Parse() {}

	  Parse.query = function(qs) {
	    var i, j, key, len, obj, pair, ref, val;
	    if (qs == null) {
	      qs = self.location.search;
	    }
	    obj = {};
	    ref = qs.replace('?', '').split('&');
	    for (j = 0, len = ref.length; j < len; j++) {
	      pair = ref[j];
	      i = pair.indexOf('=');
	      key = pair.slice(0, i);
	      val = pair.slice(i + 1);
	      if (key.length > 0) {
	        obj[key] = decodeURIComponent(val);
	      }
	    }
	    return obj;
	  };

	  Parse.url = function(url) {
	    var _, a, anchor, fileName, host, hostWithPort, m, password, path, pathName, port, protocol, query, username;
	    m = url.match(/(([A-Za-z]+):(\/\/)?)?(([\-;&=\+\$,\w]+)(:([\-;:&=\+\$,\w]+))?@)?([A-Za-z0-9\.\-]+)(:([0-9]+))?(\/[\+~%\/\.\w\-]*)?(\?([\-\+=&;%@\.\w,]*))?(\#([\.\!\/\\\w]*))?/);
	    if (!m) {
	      return void 0;
	    }
	    _ = m[0], _ = m[1], protocol = m[2], _ = m[3], _ = m[4], username = m[5], _ = m[6], password = m[7], host = m[8], _ = m[9], port = m[10], pathName = m[11], _ = m[12], query = m[13], _ = m[14], anchor = m[15];
	    if (pathName) {
	      a = pathName.split("/");
	      fileName = a[a.length - 1];
	      path = (a.slice(0, a.length - 1)).join("/");
	    }
	    host = host.toLowerCase();
	    hostWithPort = host;
	    if (port) {
	      hostWithPort += ":" + port;
	    }
	    return {
	      protocol: protocol,
	      username: username,
	      password: password,
	      hostWithPort: hostWithPort,
	      host: host,
	      port: port,
	      pathName: pathName,
	      path: path,
	      fileName: fileName,
	      query: query && Parse.query(query),
	      anchor: anchor
	    };
	  };

	  return Parse;

	})();


/***/ },
/* 33 */
/***/ function(module, exports) {

	var Unique, nextId;

	nextId = 1;

	module.exports = Unique = (function() {
	  var nextUniqueObjectId, objectId;

	  function Unique() {}

	  Unique.nextUniqueObjectId = nextUniqueObjectId = function() {
	    return "object_" + nextId++;
	  };

	  Unique.objectId = objectId = function(o) {
	    if (o.hasOwnProperty("__uniqueId")) {
	      return o.__uniqueId || (o.__uniqueId = nextUniqueObjectId());
	    } else {
	      Object.defineProperty(o, "__uniqueId", {
	        enumerable: false,
	        value: nextUniqueObjectId()
	      });
	      return o.__uniqueId;
	    }
	  };

	  Unique.id = function(key) {
	    if (typeof key === "object") {
	      if (key) {
	        if (typeof key.getUniqueId === "function") {
	          return key.getUniqueId();
	        } else {
	          return objectId(key);
	        }
	      } else {
	        return "null";
	      }
	    } else if (typeof key === "number") {
	      return "" + key;
	    } else if (typeof key === "string") {
	      return "string_" + key;
	    } else if (typeof key === "boolean") {
	      if (key) {
	        return "true";
	      } else {
	        return "false";
	      }
	    } else if (key === void 0) {
	      return "undefined";
	    } else {
	      return (typeof key) + "_" + key;
	    }
	  };

	  return Unique;

	})();


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var FoundationMath, String, Types, escapedNonQuoteRegex, escapedQuoteRegex, floor, intRand, isArray, isNumber, isPlainObject, isString, jString, wordsRegex;

	FoundationMath = __webpack_require__(17);

	Types = __webpack_require__(20);

	wordsRegex = __webpack_require__(18).wordsRegex;

	intRand = FoundationMath.intRand;

	isString = Types.isString, isNumber = Types.isNumber, isPlainObject = Types.isPlainObject, isArray = Types.isArray;

	jString = self.String;

	escapedQuoteRegex = /[\\]["]/;

	escapedNonQuoteRegex = /[\\][^"]/;

	floor = Math.floor;

	module.exports = String = (function() {
	  var consistentJsonStringify, escapeDoubleQuoteJavascriptString, escapeJavascriptString, pluralize, repeat;

	  function String() {}

	  String.wordsArray = function(str) {
	    return str.match(wordsRegex);
	  };

	  String.wordArray = String.wordsArray;

	  String.randomString = function(length, chars) {
	    var charsLength, i, result;
	    if (length == null) {
	      length = 32;
	    }
	    if (chars == null) {
	      chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	    }
	    result = '';
	    charsLength = chars.length;
	    return ((function() {
	      var j, ref, results;
	      results = [];
	      for (i = j = 0, ref = length; j < ref; i = j += 1) {
	        results.push(chars[intRand(charsLength)]);
	      }
	      return results;
	    })()).join('');
	  };

	  String.pluralize = pluralize = function(a, b, pluralForm) {
	    if (typeof a === "number") {
	      return a + " " + (a === 1 ? b : pluralForm || pluralize(b));
	    } else {
	      return a + "s";
	    }
	  };

	  String.replaceLast = function(str, find, replaceWith) {
	    var index;
	    index = str.lastIndexOf(find);
	    if (index >= 0) {
	      return str.substring(0, index) + replaceWith + str.substring(index + find.length);
	    } else {
	      return str.toString();
	    }
	  };

	  String.pad = function(str, length, padding) {
	    if (padding == null) {
	      padding = "0";
	    }
	    str = jString(str);
	    return Array(Math.max(length - str.length + 1, 0)).join(padding) + str;
	  };

	  String.capitalize = function(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	  };

	  String.decapitalize = function(str) {
	    return str.charAt(0).toLowerCase() + str.slice(1);
	  };

	  String.upperCamelCase = function(str) {
	    var capWords, word, words;
	    words = str.split('_');
	    capWords = (function() {
	      var j, len, results;
	      results = [];
	      for (j = 0, len = words.length; j < len; j++) {
	        word = words[j];
	        results.push(this.capitalize(word));
	      }
	      return results;
	    }).call(String);
	    return capWords.join("");
	  };

	  String.lowerCamelCase = function(str) {
	    var capWords, word, words;
	    words = str.split('_');
	    capWords = [String.decapitalize(words[0])].concat((function() {
	      var j, len, ref, results;
	      ref = words.slice(1, words.length);
	      results = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        word = ref[j];
	        results.push(this.capitalize(word));
	      }
	      return results;
	    }).call(String));
	    return capWords.join("");
	  };

	  String.snakeCase = function(str) {
	    var word;
	    return ((function() {
	      var j, len, ref, results;
	      ref = str.split(/(?=[A-Z])/);
	      results = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        word = ref[j];
	        results.push(word.toLowerCase());
	      }
	      return results;
	    })()).join("_");
	  };

	  String.escapeDoubleQuoteJavascriptString = escapeDoubleQuoteJavascriptString = function(str) {
	    var s;
	    s = jString(str).replace(/[\\"]/g, "\\$&").replace(/[\0\b\f\n\r\t\v\u2028\u2029]/g, function(x) {
	      switch (x) {
	        case '\0':
	          return "\\0";
	        case '\b':
	          return "\\b";
	        case '\f':
	          return "\\f";
	        case '\n':
	          return "\\n";
	        case '\r':
	          return "\\r";
	        case '\t':
	          return "\\t";
	        case '\v':
	          return "\\v";
	        case '\u2028':
	          return "\\u2028";
	        case '\u2029':
	          return "\\u2029";
	      }
	    });
	    return s = '"' + s + '"';
	  };

	  String.escapeJavascriptString = escapeJavascriptString = function(str) {
	    return JSON.stringify(str);
	  };

	  String.allIndexes = function(str, regex) {
	    var indexes, lastIndex, result;
	    indexes = [];
	    if (!((regex instanceof RegExp) && regex.global)) {
	      throw new Error("regex must be a global RegExp");
	    }
	    regex.lastIndex = 0;
	    while (result = regex.exec(str)) {
	      indexes.push(result.index);
	      lastIndex = result;
	    }
	    return indexes;
	  };

	  String.repeat = repeat = " ".repeat ? function(str, times) {
	    return str.repeat(times);
	  } : function(str, count) {
	    var result;
	    count === floor(count);
	    result = '';
	    if (count > 0 && str.length > 0) {
	      while (true) {
	        if ((count & 1) === 1) {
	          result += str;
	        }
	        count >>>= 1;
	        if (count === 0) {
	          break;
	        }
	        str += str;
	      }
	    }
	    return result;
	  };

	  String.rightAlign = function(str, width) {
	    if (str.length >= width) {
	      return str;
	    } else {
	      return repeat(" ", width - str.length) + str;
	    }
	  };

	  String.eachMatch = function(str, regex, f) {
	    var result;
	    regex.lastIndex = 0;
	    while (result = regex.exec(str)) {
	      f(result);
	    }
	    return null;
	  };

	  String.consistentJsonStringify = consistentJsonStringify = function(object) {
	    var error, k, v;
	    if (object === false || object === true || object === null || isNumber(object)) {
	      return "" + object;
	    } else if (isString(object)) {
	      return escapeJavascriptString(object);
	    } else if (isPlainObject(object)) {
	      return "{" + ((function() {
	        var j, len, ref, results;
	        ref = (Object.keys(object)).sort();
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          k = ref[j];
	          if (object[k] !== void 0) {
	            results.push(escapeJavascriptString(k) + ": " + consistentJsonStringify(object[k]));
	          }
	        }
	        return results;
	      })()).join(', ') + "}";
	    } else if (isArray(object)) {
	      return "[" + ((function() {
	        var j, len, results;
	        results = [];
	        for (j = 0, len = object.length; j < len; j++) {
	          v = object[j];
	          results.push(consistentJsonStringify(v));
	        }
	        return results;
	      })()).join(', ') + "]";
	    } else {
	      console.error(error = "invalid object type for Json. Expecting: null, false, true, number, string, plain-object or array", object);
	      throw new Error(error);
	    }
	  };

	  String.splitRuns = function(str) {
	    var ch, chCount, i, j, lastCh, ref, result;
	    if (str.length === 0) {
	      return [];
	    }
	    lastCh = str[0];
	    chCount = 1;
	    result = [];
	    for (i = j = 1, ref = str.length; j < ref; i = j += 1) {
	      ch = str[i];
	      if (ch === lastCh) {
	        chCount++;
	      } else {
	        result.push([lastCh, chCount]);
	        chCount = 1;
	      }
	      lastCh = ch;
	    }
	    result.push([lastCh, chCount]);
	    return result;
	  };

	  String.eachRunAsCharCodes = function(str, f) {
	    var ch, chCount, i, j, lastCh, ref;
	    lastCh = str.charCodeAt(0);
	    chCount = 1;
	    for (i = j = 1, ref = str.length; j < ref; i = j += 1) {
	      ch = str.charCodeAt(i);
	      if (ch === lastCh) {
	        chCount++;
	      } else {
	        f(lastCh, chCount);
	        chCount = 1;
	      }
	      lastCh = ch;
	    }
	    f(lastCh, chCount);
	    return null;
	  };


	  /*
	  TODO: I think this can be generalized to cover most all ellipsies and word-wrap scenarios:
	    a) have an options object with options:
	      maxLength: number         # similar to current maxLength
	      minLength: number         # currently implied to be maxLength / 2, in additional customizable, it would also be optional
	      brokenWordEllipsis: "…"   # used when only part of a word is included
	      moreWordsEllipsis: "…"    # used when there are more words, but the last word is whole
	      wordLengthFunction: (string) -> string.length
	         * can be replaced with, say, the font pixel-width for a string
	         * in this way, this function can be used by text-layout
	         * minLength and maxLength would then be in pixels
	      breakWords: false         # currently, this is effectively true - will break the last word on line in most situations
	      breakOnlyWord: true       # even if breakWords is false, if this is the only word on the line and it doesn't fit, should we break it?
	                                 * should this even be an option?
	       * future:
	      wordBreakFunction: (word, maxLength) -> shorterWord
	         * given a word and the maximum length of that word, returns
	         * a word <= maxLength according to wordLengthFunction
	  
	    b) Use cases
	      - TextLayout - uses pixels for length rather than characters
	      - Art.Engine.Element 'flow' layout
	        - if the input was an array of "words" and
	        - wordLengthFunction returns the Element's width...
	        I think this works. We'd need a way to handle margins though. I think this works:
	          spaceLength: (leftWord, rightWord) -> 1
	      - Shortend user display names:
	        Options:
	          wordBreakFunction: (word, maxLength) -> word[0]
	          brokenWordEllipsis: "." or ""
	        Example Output:
	          "Shane Delamore", 10 > "Shane D." or
	          "Shane Delamore", 10 > "Shane D"
	        Or, just leave breakwords: false and get:
	          "Shane Delamore", 10 > "Shane"
	  
	    c) returns both the output string and the "string remaining" - everything not included
	    d) alternate input: an array of strings already broken up by words - the "remainging" return value would then also be an array of "words"
	      (this would be for efficiency when doing multi-line layout)
	  
	  Right now, it works as follows:
	  The output string is guaranteed to be:
	    <= maxLength
	    >= maxLength / 2 in almost all secenarios as long as inputString is >= maxLength / 2
	   */

	  String.humanFriendlyShorten = function(inputString, maxLength) {
	    var j, len, minLength, part, string, stringParts;
	    if (!(maxLength > 0)) {
	      throw new error("maxLength must be > 0");
	    }
	    inputString = inputString.trim();
	    if (!(inputString.length > maxLength)) {
	      return inputString;
	    }
	    minLength = maxLength / 2;
	    stringParts = inputString.split(/\s+/);
	    string = "";
	    for (j = 0, len = stringParts.length; j < len; j++) {
	      part = stringParts[j];
	      if (string.length === 0) {
	        string = part;
	      } else if ((string.length < minLength) || string.length + part.length + 2 <= maxLength) {
	        string += " " + part;
	      } else {
	        break;
	      }
	    }
	    if (string.length > maxLength) {
	      string = string.slice(0, maxLength - 1).trim();
	    }
	    return string + "…";
	  };

	  return String;

	})();


/***/ },
/* 35 */
/***/ function(module, exports) {

	
	/*
	This current iteration of clone relies on some singleton variables shared across all invocations of clone.
	This is fine as long as javascript stays single-threaded.
	It also introduces a little bit of uglyness initializing clonedMap necessitating the "top" variable.

	FUTURE
	A potentially better solution would be to create a new closer each time clone is called at the top-most level,
	but when recursing, pass in a new function bound to that closure which is different from the global clone function.

	populateClone would need to take an additional argument - the clone function to use for recursive cloning.
	 */
	var ShallowClone;

	module.exports = ShallowClone = (function() {
	  function ShallowClone() {}

	  ShallowClone.extendClone = function(obj) {
	    if (obj.constructor === Array) {
	      return obj.slice();
	    } else {
	      return Object.create(obj);
	    }
	  };

	  ShallowClone.shallowClone = function(obj) {
	    var k, ret, v;
	    if (!obj) {
	      return obj;
	    }
	    if (obj.constructor === Array) {
	      return obj.slice();
	    } else {
	      ret = {};
	      for (k in obj) {
	        v = obj[k];
	        ret[k] = v;
	      }
	      return ret;
	    }
	  };

	  return ShallowClone;

	})();


/***/ },
/* 36 */
/***/ function(module, exports) {

	var WebpackHotLoader;

	module.exports = WebpackHotLoader = (function() {
	  function WebpackHotLoader() {}


	  /*
	  IN:
	    _module should be the CommonJS 'module'
	    modulePostLoadAction: (moduleState) -> ignored internally, returned from @runHot
	  
	  OUT: modulePostLoadAction moduleState
	  
	  EFFECT:
	    modulePostLoadAction is run every time the module is loaded.
	  
	    Initially, moduleState is {}.
	  
	    moduleState is the same object every load:
	      modulePostLoadAction can modify moduleState and it will persist through every reload.
	  
	    modulePostLoadAction is responsible for any and all
	    update actions required due to the module load.
	  
	  NOTE:
	    If _module is not hot, modulePostLoadAction will be invoked once with an empty {}.
	   */

	  WebpackHotLoader.runHot = function(_module, modulePostLoadAction) {
	    var base, moduleState;
	    if (!(_module != null ? _module.hot : void 0)) {
	      return modulePostLoadAction({});
	    }
	    moduleState = (((base = _module.hot).data || (base.data = {
	      moduleState: {}
	    }))).moduleState;
	    _module.hot.accept();
	    _module.hot.dispose(function(data) {
	      return data.moduleState = moduleState;
	    });
	    return modulePostLoadAction(moduleState);
	  };

	  return WebpackHotLoader;

	})();


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, ProgressAdapter, isArray, isFunction, isNumber, log, max, min, ref,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(20), isNumber = ref.isNumber, isFunction = ref.isFunction, isArray = ref.isArray;

	BaseObject = __webpack_require__(30);

	log = __webpack_require__(19).log;

	max = Math.max, min = Math.min;

	module.exports = ProgressAdapter = (function(superClass) {
	  extend(ProgressAdapter, superClass);


	  /*
	  IN:
	    stepWeights can be a positive integer or an aray of positive, real numbers.
	  
	      integer N: specifies progress will be made in N even steps from 0 to 1
	  
	      array of numbers A: specifies progress will be made in A.length steps which
	        may not be even. Each step has its own "weight."
	  
	        Example: stepWeights = [850, 50, 100]
	        Will become:
	          steps:
	            0: 0.00 to 0.85
	            1: 0.85 to 0.90
	            2: 0.90 to 1.00
	  
	        Example: stepWeights = [1, 2, 1]
	        Will become:
	          steps:
	            0: 0.00 to 0.25
	            1: 0.25 to 0.75
	            2: 0.75 to 1.00
	  
	    progressCallback: progressCallback is a function which is invoked with a number
	      between 0 and 1. It is invoked immediatly with 0, then it is invoked by makeProgress()
	      and makeProgressCallback()(). It always increments or stays the same. It will
	      never go backwards.
	   */

	  function ProgressAdapter(stepWeights, progressCallback1) {
	    this.stepWeights = stepWeights;
	    this.progressCallback = progressCallback1;
	    if (!(isFunction(this.progressCallback) && (isArray(this.stepWeights) || isNumber(this.stepWeights)))) {
	      throw new Error("invalid params");
	    }
	    this._currentStep = 0;
	    this._generateSteps();
	    this._currentProgress = 0;
	    this._warningCount = 0;
	    this.setCurrentProgress(0);
	  }

	  ProgressAdapter.getter("steps currentStep currentProgress warningCount", {
	    currentProgressPercent: function() {
	      return (this._currentProgress * 100 | 0) + "%";
	    },
	    currentProgressBase: function() {
	      if (this._currentStep <= 0) {
	        return 0;
	      } else if (this._currentStep >= this._steps.length) {
	        return 1;
	      } else {
	        return this._steps[this._currentStep];
	      }
	    }
	  });

	  ProgressAdapter.setter({
	    currentProgress: function(p) {
	      return typeof this.progressCallback === "function" ? this.progressCallback(min(1, this._currentProgress = max(p, this._currentProgress))) : void 0;
	    }
	  });

	  ProgressAdapter.prototype.makeProgress = function() {
	    this._currentStep++;
	    if (this._currentStep > this._steps.length) {
	      this._warningCount++;
	      console.warn("ProgressAdapter: makeProgress/Callback called too many times!", {
	        currentStep: this._currentStep,
	        steps: this._steps,
	        stepWeights: this.stepWeights
	      });
	    }
	    return this.setCurrentProgress(this.currentProgressBase);
	  };

	  ProgressAdapter.prototype.makeProgressCallback = function() {
	    var rangeEnd, rangeStart;
	    this._finishLastProgress();
	    rangeStart = this.currentProgressBase;
	    this._currentStep++;
	    rangeEnd = this.currentProgressBase;
	    return (function(_this) {
	      return function(progress) {
	        return _this.setCurrentProgress(rangeStart + (rangeEnd - rangeStart) * progress);
	      };
	    })(this);
	  };

	  ProgressAdapter.prototype._finishLastProgress = function() {
	    var progress;
	    if (this._currentProgress < (progress = this.currentProgressBase)) {
	      return this.setCurrentProgress(progress);
	    }
	  };

	  ProgressAdapter.prototype._executePromiseSequence = function(sequence, lastResult, index, resolve) {
	    if (index >= sequence.length) {
	      this._finishLastProgress();
	      return resolve(lastResult);
	    }
	    return Promise.resolve(sequence[index](lastResult, this.makeProgressCallback())).then((function(_this) {
	      return function(nextResult) {
	        return _this._executePromiseSequence(sequence, nextResult, index + 1, resolve);
	      };
	    })(this));
	  };

	  ProgressAdapter.prototype.executePromiseSequence = function(sequence) {
	    return new Promise((function(_this) {
	      return function(resolve) {
	        return _this._executePromiseSequence(sequence, null, 0, resolve);
	      };
	    })(this));
	  };


	  /*
	  IN: (progressCallback, promiseSequence) ->
	     * stepWeights implicitly == promiseSequence.length
	  IN: (progressCallback, stepWeights, promiseSequence) ->
	   */

	  ProgressAdapter.executePromiseSequence = function(progressCallback, a, b) {
	    var pa, sequence, weights;
	    if (b) {
	      weights = a;
	      sequence = b;
	    } else {
	      sequence = a;
	      weights = sequence.length;
	    }
	    pa = new ProgressAdapter(weights, progressCallback);
	    return pa.executePromiseSequence(sequence);
	  };

	  ProgressAdapter.prototype._generateSteps = function() {
	    var i, j, len, numSteps, ref1, s, step, total, w;
	    if (isNumber(numSteps = this.stepWeights)) {
	      return this._steps = (function() {
	        var j, ref1, results;
	        results = [];
	        for (i = j = 0, ref1 = numSteps; j < ref1; i = j += 1) {
	          results.push(i / numSteps);
	        }
	        return results;
	      })();
	    } else {
	      total = 0;
	      ref1 = this.stepWeights;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        w = ref1[j];
	        total += w;
	      }
	      step = 0;
	      return this._steps = (function() {
	        var k, len1, ref2, results;
	        ref2 = this.stepWeights;
	        results = [];
	        for (k = 0, len1 = ref2.length; k < len1; k++) {
	          w = ref2[k];
	          s = step;
	          step += w / total;
	          results.push(s);
	        }
	        return results;
	      }).call(this);
	    }
	  };

	  return ProgressAdapter;

	})(BaseObject);


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	This current iteration of clone relies on some singleton variables shared across all invocations of clone.
	This is fine as long as javascript stays single-threaded.
	It also introduces a little bit of uglyness initializing clonedMap necessitating the "top" variable.

	FUTURE
	A potentially better solution would be to create a new closer each time clone is called at the top-most level,
	but when recursing, pass in a new function bound to that closure which is different from the global clone function.

	populateClone would need to take an additional argument - the clone function to use for recursive cloning.
	 */
	var Clone, Foundation, Inspect, Map, Unique, byProperties, byStructure, clonedMap, inspect, topObject, uniquePropertyName;

	Foundation = __webpack_require__(13);

	Map = __webpack_require__(39);

	Unique = __webpack_require__(33);

	Inspect = __webpack_require__(40);

	uniquePropertyName = Unique.PropertyName;

	inspect = Inspect.inspect;

	clonedMap = null;

	byStructure = false;

	byProperties = false;

	topObject = null;

	module.exports = Clone = (function() {
	  var clone, cloneArray, cloneByProperties, cloneByStructure, cloneObject, emptyClone;

	  function Clone() {}

	  cloneArray = function(array) {
	    var clonedArray, i, index, len, value;
	    clonedArray = clonedMap.set(array, array.slice());
	    for (index = i = 0, len = clonedArray.length; i < len; index = ++i) {
	      value = clonedArray[index];
	      clonedArray[index] = clone(value);
	    }
	    return clonedArray;
	  };

	  cloneObject = function(obj) {
	    var clonedObject, k, v;
	    clonedObject = clonedMap.set(obj, emptyClone(obj));
	    if ((obj !== topObject || !byProperties) && obj.populateClone) {
	      obj.populateClone(clonedObject);
	    } else {
	      for (k in obj) {
	        v = obj[k];
	        clonedObject[k] = clone(v);
	      }
	    }
	    return clonedObject;
	  };

	  Clone.emptyClone = emptyClone = function(obj) {
	    if (obj.constructor === Array) {
	      return [];
	    } else {
	      return Object.create(Object.getPrototypeOf(obj));
	    }
	  };

	  Clone.clone = clone = function(obj, mode) {
	    var clonedObject, got;
	    switch (mode) {
	      case "byStructure":
	        byStructure = true;
	        break;
	      case "byProperties":
	        byProperties = true;
	    }
	    if (obj === null || obj === void 0 || typeof obj !== "object") {
	      return obj;
	    }
	    if (byStructure && (obj.constructor !== Array && obj.constructor !== Object)) {
	      return obj;
	    }
	    if (clonedMap) {
	      if (got = clonedMap.get(obj)) {
	        return got;
	      }
	    } else {
	      topObject = obj;
	      clonedMap = new Map;
	    }
	    clonedObject = obj.constructor === Array ? cloneArray(obj) : cloneObject(obj);
	    if (topObject === obj) {
	      byStructure = false;
	      byProperties = false;
	      topObject = null;
	      clonedMap = null;
	    }
	    return clonedObject;
	  };

	  Clone.cloneByProperties = cloneByProperties = function(obj) {
	    return clone(obj, "byProperties");
	  };

	  Clone.cloneByStructure = cloneByStructure = function(obj) {
	    return clone(obj, "byStructure");
	  };

	  return Clone;

	})();


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	Map is a Key-Value map which preserves order.

	Unlike Javascript objects, you can use any object or value as keys. This includes:

	  Strings
	  Numbers
	  null
	  undefined
	  Arrays
	  Objects

	Arrays and Objects are assigned a unique id using the Foundation.Unique library.
	"0", "", null, undefined and 0 are all different unique keys and can each have unique values.
	 */
	var BaseObject, Foundation, Map, Node, Unique,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(13);

	Unique = __webpack_require__(33);

	BaseObject = __webpack_require__(30);

	Node = (function() {
	  function Node(key, value, prev, next) {
	    this.key = key;
	    this.value = value;
	    this.prev = prev || null;
	    this.next = next || null;
	    if (prev) {
	      prev.next = this;
	    }
	    if (next) {
	      next.prev = this;
	    }
	  }

	  Node.prototype.remove = function() {
	    var n, p;
	    n = this.next;
	    p = this.prev;
	    if (p) {
	      p.next = n;
	      this.prev = null;
	    }
	    if (n) {
	      n.prev = p;
	      return this.next = null;
	    }
	  };

	  return Node;

	})();

	module.exports = Map = (function(superClass) {
	  extend(Map, superClass);

	  Map.inverseMap = function(array) {
	    var i, k, len, result, v;
	    result = new Map;
	    for (k = i = 0, len = array.length; i < len; k = ++i) {
	      v = array[k];
	      result.set(v, k);
	    }
	    return result;
	  };

	  function Map() {
	    this._length = 0;
	    this._map = {};
	    this._first = this._last = null;
	  }

	  Map.getter({
	    length: function() {
	      return this._length;
	    },
	    nodes: function() {
	      var n, result;
	      result = [];
	      n = this._first;
	      while (n) {
	        result.push(n);
	        n = n.next;
	      }
	      return result;
	    },
	    keys: function() {
	      var i, len, node, ref, results;
	      ref = this.nodes;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        node = ref[i];
	        results.push(node.key);
	      }
	      return results;
	    },
	    values: function() {
	      var i, len, node, ref, results;
	      ref = this.nodes;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        node = ref[i];
	        results.push(node.value);
	      }
	      return results;
	    }
	  });

	  Map.prototype.get = function(key) {
	    var node;
	    node = this._map[Unique.id(key)];
	    return node && node.value;
	  };

	  Map.prototype.set = function(key, value) {
	    var id;
	    id = Unique.id(key);
	    if (this._map[id]) {
	      this._map[id].value = value;
	    } else {
	      this._length++;
	      this._last = this._map[id] = new Node(key, value, this._last);
	      if (!this._first) {
	        this._first = this._last;
	      }
	    }
	    return value;
	  };

	  Map.prototype._remove = function(key) {
	    var id, n;
	    id = Unique.id(key);
	    if (n = this._map[id]) {
	      this._length--;
	      delete this._map[id];
	      if (this._first === n) {
	        this._first = n.next;
	      }
	      if (this._last === n) {
	        this._last = n.prev;
	      }
	      n.remove();
	      return n;
	    } else {
	      return void 0;
	    }
	  };

	  Map.prototype.remove = function(key) {
	    var n;
	    if (n = this._remove(key)) {
	      return n.value;
	    } else {
	      return void 0;
	    }
	  };

	  Map.prototype["delete"] = function(key) {
	    return !!this._remove(key);
	  };

	  Map.prototype.exists = function(key) {
	    return this._map[Unique.id(key)];
	  };

	  Map.prototype.forEach = function(f) {
	    var i, len, node, ref;
	    ref = this.nodes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      f(node.value);
	    }
	    return this;
	  };

	  Map.prototype.findFirst = function(testF) {
	    var i, len, node, ref;
	    ref = this.nodes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      if (testF(node.value)) {
	        return node.value;
	      }
	    }
	    return void 0;
	  };

	  Map.prototype.each = function(f) {
	    var i, len, node, ref;
	    ref = this.nodes;
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      f(node.key, node.value);
	    }
	    return this;
	  };

	  Map.prototype.map = function(f) {
	    var i, len, node, ref, results;
	    ref = this.nodes;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      node = ref[i];
	      results.push(f(node.key, node.value));
	    }
	    return results;
	  };

	  Map.prototype.inspect = function(inspector) {
	    var _inspect, first;
	    _inspect = function(o) {
	      if (typeof o === "string" && o.match(/^[a-zA-Z_][a-zA-Z_0-9]*$/)) {
	        return inspector.put(o);
	      } else {
	        return inspector.inspect(o);
	      }
	    };
	    inspector.put("{Map ");
	    first = true;
	    this.map(function(k, v) {
	      if (!first) {
	        inspector.put(", ");
	      }
	      _inspect(k);
	      inspector.put(": ");
	      inspector.inspect(v);
	      return first = false;
	    });
	    return inspector.put("}");
	  };

	  Map.prototype.verifyNodes = function() {
	    var inspect, length, node, prev;
	    inspect = Foundation.Inspect.inspect;
	    if ((this._first == null) && (this._last == null) && this._length === 0) {
	      return;
	    }
	    if (this._length === 0 && this._first) {
	      throw new Error("length == " + this.length + " but @_first is not null");
	    }
	    if (this._length === 0 && this._last) {
	      throw new Error("length == " + this.length + " but @_last is not null");
	    }
	    if (!this._first) {
	      throw new Error("length == " + this.length + " and @_first is null");
	    }
	    if (!this._last) {
	      throw new Error("length == " + this.length + " and @_last is null");
	    }
	    if (this._first.prev) {
	      throw new Error("@_first has prev");
	    }
	    if (this._last.next) {
	      throw new Error("@_last has next");
	    }
	    length = 0;
	    prev = null;
	    node = this._first;
	    while (node) {
	      length++;
	      if (node.prev !== prev) {
	        throw new Error("node.prev != prev. " + (inspect({
	          lenght: length,
	          nodePrev: node.prev,
	          prev: prev
	        }, 1)));
	      }
	      prev = node;
	      node = node.next;
	    }
	    if (this.length !== length) {
	      throw new Error("@length is " + this.length + ", but it should be " + length);
	    }
	  };

	  return Map;

	})(BaseObject);


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var Inspect;

	module.exports = Inspect = __webpack_require__(41);

	Inspect.Inspector = __webpack_require__(42);

	Inspect.Inspector2 = __webpack_require__(43);

	Inspect.Main = __webpack_require__(50);

	Inspect.Inspected = __webpack_require__(44);

	Inspect.finishLoad(["Inspector", "Inspector2", "Main"]);


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(13);

	module.exports = Foundation.Inspect || (Foundation.Inspect = (function(superClass) {
	  extend(Inspect, superClass);

	  function Inspect() {
	    return Inspect.__super__.constructor.apply(this, arguments);
	  }

	  Inspect.namespace = Foundation;

	  Inspect.namespacePath = "Neptune.Art.Foundation.Inspect";

	  return Inspect;

	})(Neptune.Base));

	Foundation.addNamespace(Foundation.Inspect);


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Inspect, Inspector, Map, StringExtensions, Types, escapeJavascriptString, isArray, isBrowserObject, isClass, isFunction, isObject, isString, objectName,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	Types = __webpack_require__(20);

	StringExtensions = __webpack_require__(34);

	Map = __webpack_require__(39);

	Inspect = __webpack_require__(41);

	escapeJavascriptString = StringExtensions.escapeJavascriptString;

	isString = Types.isString, isArray = Types.isArray, isFunction = Types.isFunction, isObject = Types.isObject, isClass = Types.isClass, objectName = Types.objectName, isBrowserObject = Types.isBrowserObject;

	module.exports = Inspector = (function(superClass) {
	  extend(Inspector, superClass);

	  Inspector.unquotablePropertyRegex = /^([0-9]+|[_a-zA-Z][_0-9a-zA-Z]*)$/;

	  Inspector.customInspectable = function(obj) {
	    return obj.inspect && !(typeof obj === "function");
	  };

	  Inspector.parentString = function(distance) {
	    switch (distance) {
	      case 0:
	        return "parent";
	      case 1:
	        return "grandparent";
	      case 2:
	        return "great grandparent";
	      default:
	        return "great^" + (distance - 1) + " grandparent";
	    }
	  };

	  function Inspector(options) {
	    if (options == null) {
	      options = {};
	    }
	    this.inspect = bind(this.inspect, this);
	    this.inspectInternal = bind(this.inspectInternal, this);
	    this.inspectObject = bind(this.inspectObject, this);
	    this.inspectArray = bind(this.inspectArray, this);
	    this.maxLength = options.maxLength || 1000;
	    this.allowCustomInspectors = !options.noCustomInspectors;
	    this.maxDepth = options.maxDepth != null ? options.maxDepth : 10;
	    this.outArray = [];
	    this.length = 0;
	    this.depth = 0;
	    this.inspectingMap = new Map;
	    this.done = false;
	  }

	  Inspector.prototype.put = function(s) {
	    if (this.done) {
	      return;
	    }
	    this.outArray.push(this.length + s.length > this.maxLength ? (this.done = true, "...") : (this.length += s.length, s));
	    return s;
	  };

	  Inspector.getter({
	    result: function() {
	      return this.outArray.join("");
	    }
	  });

	  Inspector.prototype.maxDepthOutput = function(obj) {
	    var keys, name;
	    switch (typeof obj) {
	      case "string":
	      case "number":
	      case "boolean":
	      case "undefined":
	        return this.inspectInternal(obj);
	      case "function":
	        return this.put(objectName(obj));
	      case "object":
	        return this.put(obj === null ? "null" : isArray(obj) ? "[" + obj.length + " elements]" : (keys = Object.keys(obj), name = objectName(obj), name === "Object" ? "{" + keys.length + " keys}" : keys.length > 0 ? "{" + name + " " + keys.length + " keys}" : name));
	    }
	  };

	  Inspector.prototype.inspectArray = function(array) {
	    var first, i, len, obj;
	    this.put("[");
	    first = true;
	    for (i = 0, len = array.length; i < len; i++) {
	      obj = array[i];
	      if (!first) {
	        this.put(", ");
	      }
	      this.inspect(obj);
	      first = false;
	    }
	    return this.put("]");
	  };

	  Inspector.prototype.inspectObject = function(obj) {
	    var attributes, first, i, k, keys, len, name, v;
	    attributes = [];
	    keys = Object.keys(obj);
	    name = objectName(obj);
	    if (isFunction(obj) && keys.length === 0) {
	      return this.put(name + "()");
	    } else if (isBrowserObject(obj)) {
	      return this.put("{" + name + "}");
	    } else {
	      this.put("{");
	      if (obj.constructor !== Object) {
	        this.put(name + " ");
	      }
	      first = true;
	      for (i = 0, len = keys.length; i < len; i++) {
	        k = keys[i];
	        if (!(k !== "__uniqueId")) {
	          continue;
	        }
	        if (!first) {
	          this.put(", ");
	        }
	        v = obj[k];
	        if (Inspector.unquotablePropertyRegex.test(k)) {
	          this.put(k);
	        } else {
	          this.inspect(k);
	        }
	        this.put(": ");
	        this.inspect(v);
	        first = false;
	      }
	      return this.put("}");
	    }
	  };

	  Inspector.prototype.inspectInternal = function(obj) {
	    if (obj == null) {
	      return this.put("" + obj);
	    } else if (isString(obj)) {
	      return this.put(escapeJavascriptString(obj));
	    } else if (isArray(obj)) {
	      return this.inspectArray(obj);
	    } else if (isClass(obj)) {
	      return this.put(objectName(obj));
	    } else if (this.allowCustomInspectors && Inspector.customInspectable(obj)) {
	      return obj.inspect(this);
	    } else if (isObject(obj) || isFunction(obj)) {
	      return this.inspectObject(obj);
	    } else {
	      return this.put("" + obj);
	    }
	  };

	  Inspector.prototype.inspect = function(obj) {
	    var objDepth;
	    if (this.done) {
	      return;
	    }
	    if (objDepth = this.inspectingMap.get(obj)) {
	      this.put("<" + (Inspector.parentString(this.depth - objDepth)) + ">");
	      return null;
	    }
	    if (this.depth >= this.maxDepth) {
	      this.maxDepthOutput(obj);
	    } else {
	      this.depth++;
	      this.inspectingMap.set(obj, this.depth);
	      this.inspectInternal(obj);
	      this.inspectingMap["delete"](obj);
	      this.depth--;
	    }
	    return null;
	  };

	  return Inspector;

	})(BaseObject);


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Inspected, Inspector2, Map, StringExtensions, Types, escapeJavascriptString, isArray, isBrowserObject, isClass, isDate, isFunction, isHTMLImageElement, isObject, isPlainObject, isRegExp, isString, objectName, parentString,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	Types = __webpack_require__(20);

	StringExtensions = __webpack_require__(34);

	Map = __webpack_require__(39);

	Inspected = __webpack_require__(44);

	escapeJavascriptString = StringExtensions.escapeJavascriptString;

	isString = Types.isString, isArray = Types.isArray, isFunction = Types.isFunction, isObject = Types.isObject, isPlainObject = Types.isPlainObject, isClass = Types.isClass, isDate = Types.isDate, isRegExp = Types.isRegExp, objectName = Types.objectName, isBrowserObject = Types.isBrowserObject;

	isHTMLImageElement = self.HTMLImageElement ? function(obj) {
	  return obj instanceof HTMLImageElement;
	} : function() {
	  return false;
	};

	parentString = (function(_this) {
	  return function(distance) {
	    switch (distance) {
	      case 0:
	        return "parent";
	      case 1:
	        return "grandparent";
	      case 2:
	        return "great grandparent";
	      default:
	        return "great^" + (distance - 1) + " grandparent";
	    }
	  };
	})(this);

	module.exports = Inspector2 = (function(superClass) {
	  extend(Inspector2, superClass);

	  function Inspector2(options) {
	    if (options == null) {
	      options = {};
	    }
	    this.inspectObject = bind(this.inspectObject, this);
	    this.inspectWithToImage = bind(this.inspectWithToImage, this);
	    this.inspectHTMLImageElement = bind(this.inspectHTMLImageElement, this);
	    this.inspectArray = bind(this.inspectArray, this);
	    this.withImages = options.withImages;
	    this.maxLength = options.maxLength || 1000;
	    this.allowCustomInspectors = !options.noCustomInspectors;
	    this.maxDepth = options.maxDepth != null ? options.maxDepth : 10;
	    this.outArray = [];
	    this.length = 0;
	    this.depth = 0;
	    this.inspectingMap = new Map;
	  }

	  Inspector2.prototype.inspectArray = function(array) {
	    var a;
	    return new Inspected.Array((function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = array.length; i < len; i++) {
	        a = array[i];
	        results.push(this.inspectInternal(a));
	      }
	      return results;
	    }).call(this));
	  };

	  Inspector2.prototype.inspectHTMLImageElement = function(obj) {
	    var res;
	    res = new Inspected.Object({}, "HTMLImageElement", obj);
	    if (!(res.image = obj).complete) {
	      this.addPendingTask();
	      obj.onload = (function(_this) {
	        return function() {
	          return _this.completePendingTask();
	        };
	      })(this);
	    }
	    return res;
	  };

	  Inspector2.prototype.inspectWithToImage = function(obj) {
	    var name, res;
	    name = objectName(obj);
	    if (typeof obj.classPathName === "string") {
	      name = obj.classPathName;
	    }
	    if (name === "Object") {
	      name = null;
	    }
	    res = new Inspected.Object({}, name, obj);
	    this.addPendingTask();
	    obj.toImage().then((function(_this) {
	      return function(image) {
	        res.image = image;
	        return _this.completePendingTask();
	      };
	    })(this));
	    return res;
	  };

	  Inspector2.prototype.inspectObject = function(obj, recurse) {
	    var attributes, i, k, keys, len, name, res, result;
	    if (recurse == null) {
	      recurse = true;
	    }
	    attributes = [];
	    keys = Object.keys(obj);
	    name = objectName(obj);
	    if (isFunction(obj) && keys.length === 0) {
	      return new Inspected.Core(name + "()");
	    } else {
	      if (typeof obj.classPathName === "string") {
	        name = obj.classPathName;
	      }
	      if (name === "Object") {
	        name = null;
	      }
	      result = {};
	      if (recurse) {
	        for (i = 0, len = keys.length; i < len; i++) {
	          k = keys[i];
	          result[k] = this.inspectInternal(obj[k]);
	        }
	      }
	      res = new Inspected.Object(result, name, obj);
	      if (typeof obj.getInspectedString === "function") {
	        res.inspected = obj.getInspectedString();
	      }
	      return res;
	    }
	  };

	  Inspector2.prototype.addPendingTask = function() {
	    return this.pendingTasks++;
	  };

	  Inspector2.prototype.completePendingTask = function() {
	    this.pendingTasks--;
	    if (this.pendingTasks === 0) {
	      return this.completionCallBack();
	    }
	  };

	  Inspector2.prototype.inspectByType = function(obj) {
	    if (isFunction(obj != null ? obj.inspectStructure : void 0)) {
	      obj = obj.inspectStructure();
	    }
	    if (obj === null || obj === void 0 || obj === true || obj === false || typeof obj === "number") {
	      return new Inspected.Core(obj);
	    } else if (obj === self) {
	      return new Inspected.Core("self");
	    } else if (isRegExp(obj)) {
	      return new Inspected.Core(obj.toString());
	    } else if (isString(obj)) {
	      return new Inspected.String(obj);
	    } else if (isArray(obj)) {
	      return this.inspectArray(obj);
	    } else if (isClass(obj)) {
	      return new Inspected.Core(objectName(obj));
	    } else if (isHTMLImageElement(obj)) {
	      return this.inspectHTMLImageElement(obj);
	    } else if (isDate(obj)) {
	      return new Inspected.Core(obj.toString());
	    } else if (isBrowserObject(obj)) {
	      return new Inspected.Core(objectName(obj));
	    } else if (this.withImages && typeof obj.toImage === "function" && !isFunction(obj)) {
	      return this.inspectWithToImage(obj);
	    } else if (isPlainObject(obj) || isFunction(obj)) {
	      return this.inspectObject(obj);
	    } else if (isObject(obj)) {
	      return this.inspectObject(obj, false);
	    } else {
	      return new Inspected.Core(objectName(obj));
	    }
	  };

	  Inspector2.prototype.inspectInternal = function(obj) {
	    var objDepth, res;
	    if (objDepth = this.inspectingMap.get(obj)) {
	      return new Inspected.Core("<" + (parentString(this.depth - objDepth)) + ">");
	    } else if (this.depth >= this.maxDepth) {
	      return new Inspected.Core("<maxDepth reached: " + this.maxDepth + ">");
	    } else {
	      this.depth++;
	      this.inspectingMap.set(obj, this.depth);
	      res = this.inspectByType(obj);
	      this.inspectingMap["delete"](obj);
	      this.depth--;
	      return res;
	    }
	  };

	  Inspector2.prototype.inspect = function(obj, callBack) {
	    var res;
	    this.pendingTasks = 0;
	    if (this.withImages && typeof callBack !== "function") {
	      throw new Error("callBack required if withImages requested");
	    }
	    this.completionCallBack = (function(_this) {
	      return function() {
	        return callBack && callBack(res);
	      };
	    })(this);
	    res = this.inspectInternal(obj);
	    if (this.pendingTasks === 0) {
	      this.completionCallBack();
	    }
	    return res;
	  };

	  return Inspector2;

	})(BaseObject);


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var Inspected;

	module.exports = Inspected = __webpack_require__(45);

	Inspected.Array = __webpack_require__(46);

	Inspected.Core = __webpack_require__(47);

	Inspected.Object = __webpack_require__(48);

	Inspected.String = __webpack_require__(49);

	Inspected.finishLoad(["Array", "Core", "Object", "String"]);


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var Inspect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Inspect = __webpack_require__(41);

	module.exports = Inspect.Inspected || (Inspect.Inspected = (function(superClass) {
	  extend(Inspected, superClass);

	  function Inspected() {
	    return Inspected.__super__.constructor.apply(this, arguments);
	  }

	  Inspected.namespace = Inspect;

	  Inspected.namespacePath = "Neptune.Art.Foundation.Inspect.Inspected";

	  return Inspected;

	})(Neptune.Base));

	Inspect.addNamespace(Inspect.Inspected);


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var Array, BaseObject,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	module.exports = Array = (function(superClass) {
	  extend(Array, superClass);

	  function Array(inspectedArray) {
	    Array.__super__.constructor.apply(this, arguments);
	    this.array = inspectedArray;
	  }

	  Array.getter({
	    arrayOfStrings: function() {
	      var i, len, ref, results, v;
	      ref = this.array;
	      results = [];
	      for (i = 0, len = ref.length; i < len; i++) {
	        v = ref[i];
	        results.push(v.toString());
	      }
	      return results;
	    },
	    children: function() {
	      return this.array.slice();
	    }
	  });

	  Array.prototype.delimitedString = function(delimiter) {
	    if (delimiter == null) {
	      delimiter = ", ";
	    }
	    return this.arrayOfStrings.join(", ");
	  };

	  Array.prototype.toString = function() {
	    return "[" + (this.delimitedString()) + "]";
	  };

	  return Array;

	})(BaseObject);


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Core,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	module.exports = Core = (function(superClass) {
	  extend(Core, superClass);

	  function Core(value) {
	    Core.__super__.constructor.apply(this, arguments);
	    this.value = value;
	    if (value && value.constructor.name === "HTMLImageElement") {
	      this.image = value;
	    }
	  }

	  Core.getter({
	    children: function() {
	      return null;
	    }
	  });

	  Core.prototype.toString = function() {
	    return "" + this.value;
	  };

	  return Core;

	})(BaseObject);


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Object,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	module.exports = Object = (function(superClass) {
	  extend(Object, superClass);

	  function Object(properties, instanceOf, originalObject) {
	    this.properties = properties;
	    this.instanceOf = instanceOf;
	    this.originalObject = originalObject;
	    Object.__super__.constructor.apply(this, arguments);
	    this.length = this.properties ? self.Object.keys(this.properties).length : 0;
	  }

	  Object.getter({
	    arrayOfStrings: function() {
	      var k, ref, results, v;
	      ref = this.properties;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        results.push(k + ": " + v);
	      }
	      return results;
	    },
	    children: function() {
	      var k, ref, ret, v;
	      ret = {};
	      ref = this.properties;
	      for (k in ref) {
	        v = ref[k];
	        ret[k] = v;
	      }
	      return ret;
	    }
	  });

	  Object.prototype.delimitedString = function(delimiter) {
	    if (delimiter == null) {
	      delimiter = ", ";
	    }
	    return this.arrayOfStrings.join(", ");
	  };

	  Object.prototype.toString = function() {
	    if (this.inspected) {
	      return this.inspected;
	    } else if (this.instanceOf) {
	      return "{" + this.instanceOf + " " + (this.delimitedString()) + "}";
	    } else {
	      return "{" + (this.delimitedString()) + "}";
	    }
	  };

	  return Object;

	})(BaseObject);


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Foundation, String,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	Foundation = __webpack_require__(13);

	module.exports = String = (function(superClass) {
	  extend(String, superClass);

	  function String(clonedString) {
	    String.__super__.constructor.apply(this, arguments);
	    this.string = clonedString;
	  }

	  String.prototype.toString = function() {
	    return Foundation.String.escapeJavascriptString(this.string);
	  };

	  return String;

	})(BaseObject);


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, Inspect, Inspector, Types, customInspectable, inspect, inspectLean, isArray, isFunction, isObject, isString;

	Foundation = __webpack_require__(13);

	Inspect = __webpack_require__(41);

	Types = __webpack_require__(20);

	Inspector = __webpack_require__(42);

	isString = Types.isString, isArray = Types.isArray, isFunction = Types.isFunction, isObject = Types.isObject;

	customInspectable = (function(_this) {
	  return function(obj) {
	    return obj && obj.getInspectedString && !(typeof obj === "function");
	  };
	})(this);

	Inspect.miniInspect = (function(_this) {
	  return function(obj) {
	    if (obj == null) {
	      return "" + obj;
	    } else if (customInspectable(obj)) {
	      return inspect(obj);
	    } else if (isString(obj)) {
	      return Foundation.String.escapeJavascriptString(obj);
	    } else if (isArray(obj)) {
	      return "<<Array length: " + obj.length + ">>";
	    } else if (isFunction(obj) && obj.name === "") {
	      return "<<function args: " + obj.length + ">>";
	    } else {
	      return ("<<" + (typeof obj) + ": ") + (obj.name ? obj.name : obj) + ">>";
	    }
	  };
	})(this);

	Inspect.inspectLean = inspectLean = (function(_this) {
	  return function(obj, options) {
	    var i, inspected, k, keys, last, v;
	    if (customInspectable(obj)) {
	      return obj.getInspectedString();
	    } else if (isObject(obj)) {
	      keys = Object.keys(obj);
	      last = keys.length - 1;
	      inspected = (function() {
	        var j, len, results;
	        results = [];
	        for (i = j = 0, len = keys.length; j < len; i = ++j) {
	          k = keys[i];
	          v = obj[k];
	          v = i === last ? inspectLean(v, options) : inspect(v, options);
	          if (!Inspector.unquotablePropertyRegex.test(k)) {
	            k = inspect(k);
	          }
	          results.push(k + ": " + v);
	        }
	        return results;
	      })();
	      return inspected.join(', ');
	    } else {
	      return inspect(obj, options);
	    }
	  };
	})(this);

	Inspect.inspect = inspect = (function(_this) {
	  return function(obj, options) {
	    var inspector;
	    if (options == null) {
	      options = {};
	    }
	    inspector = new Inspector(options);
	    inspector.inspect(obj);
	    return inspector.result;
	  };
	})(this);


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var Eq, inspect, isNumber, isString, min, objectKeyCount, ref, remove,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	inspect = __webpack_require__(40).inspect;

	remove = __webpack_require__(16).remove;

	objectKeyCount = __webpack_require__(52).objectKeyCount;

	ref = __webpack_require__(20), isString = ref.isString, isNumber = ref.isNumber;

	min = Math.min;

	module.exports = Eq = (function() {
	  var plainObjectsDeepDiff, plainObjectsDeepEq;

	  function Eq() {}


	  /*
	  IN: see @compare
	  OUT:
	    true: if a and b are structurally equal
	    false: otherwise
	   */

	  Eq.eq = function(a, b, recursionBlockEnabled) {
	    return 0 === Eq.compare(a, b, recursionBlockEnabled);
	  };

	  Eq._compareArray = function(a, b, recursionBlockArray) {
	    var aLength, av, bLength, bv, i, j, ref1, val;
	    aLength = a.length;
	    bLength = b.length;
	    for (i = j = 0, ref1 = Math.min(aLength, bLength); j < ref1; i = j += 1) {
	      av = a[i];
	      bv = b[i];
	      if (0 !== (val = Eq._compare(av, bv, recursionBlockArray))) {
	        return val;
	      }
	    }
	    return aLength - bLength;
	  };

	  Eq._compareObject = function(a, b, recursionBlockArray) {
	    var aLength, av, bv, compared, k, val;
	    aLength = 0;
	    compared = 0;
	    for (k in a) {
	      av = a[k];
	      aLength++;
	      av = a[k];
	      bv = b[k];
	      if (bv !== void 0 || b.hasOwnProperty(k)) {
	        compared++;
	        if (0 !== (val = Eq._compare(av, bv, recursionBlockArray))) {
	          return val;
	        }
	      }
	    }
	    if (aLength === compared && compared === objectKeyCount(b)) {
	      return 0;
	    } else {
	      return NaN;
	    }
	  };


	  /*
	  compare is recursive. However, it only recurses for 'plain' objects and arrays.
	  
	  If you want to compare custom objects deeply, you must add an .eq or .compare function to your custom objects.
	    signature: a.eq b, recursionBlockArray => truthy if a equals b
	    signature: a.compare b, recursionBlockArray => NaN / <0 / 0 / >0 for incomparable / a<b / a==b / a>b respectively
	    IN:
	      a: => this/@
	      b: compared with a
	      recursionBlockArray: an array of objects already on the stack being tested, pass this to
	    It is an array of every object recursively currently being tested - don't test an object in this array
	    recursionBlockArray can be altered, but should be returned in its original state. It may be null.
	  
	  IN:
	    a and b: compare a and b
	    recursionBlockEnabled:
	      truthy: recursive structures will be handled correctly
	      falsey: (default) faster, but recursive structures result in infinite recursion
	  OUT:
	    NaN:
	      a and b are different types
	      a and b are otherwise not comparable
	  
	    <0: a < b
	    0:  a == b
	    >0: a > b
	   */

	  Eq.compare = function(a, b, recursionBlockEnabled) {
	    var error, error1, info;
	    try {
	      return Eq._compare(a, b, recursionBlockEnabled && []);
	    } catch (error1) {
	      error = error1;
	      info = "compare(a, b, " + recursionBlockEnabled + ") threw error: ";
	      console.error(info, error);
	      throw new Error(info + error);
	    }
	  };

	  Eq._compare = function(a, b, recursionBlockArray) {
	    var _constructor;
	    if (a === b) {
	      return 0;
	    }
	    if (a && b && a.constructor === (_constructor = b.constructor)) {
	      if (isString(a)) {
	        return a.localeCompare(b);
	      }
	      if (isNumber(a)) {
	        return a - b;
	      }
	      if (recursionBlockArray) {
	        if (indexOf.call(recursionBlockArray, a) >= 0 || indexOf.call(recursionBlockArray, b) >= 0) {
	          return 0;
	        }
	        recursionBlockArray.push(a);
	        recursionBlockArray.push(b);
	      }
	      if (a.compare) {
	        return a.compare(b, recursionBlockArray);
	      }
	      if (_constructor === Array) {
	        return Eq._compareArray(a, b, recursionBlockArray);
	      }
	      if (_constructor === Object) {
	        return Eq._compareObject(a, b, recursionBlockArray);
	      }
	      if (a.eq && a.eq(b, recursionBlockArray)) {
	        return 0;
	      }
	      if (recursionBlockArray) {
	        remove(recursionBlockArray, recursionBlockArray.length - 2, 2);
	      }
	    }
	    return NaN;
	  };

	  Eq.plainObjectsDeepEqArray = function(a, b) {
	    var av, i, j, len1;
	    if (a.length !== b.length) {
	      return false;
	    }
	    for (i = j = 0, len1 = a.length; j < len1; i = ++j) {
	      av = a[i];
	      if (!Eq.plainObjectsDeepEq(av, b[i])) {
	        return false;
	      }
	    }
	    return true;
	  };

	  Eq.plainObjectsDeepEqObject = function(a, b) {
	    var aLength, av, bv, k;
	    aLength = 0;
	    for (k in a) {
	      av = a[k];
	      aLength++;
	      bv = b[k];
	      if (!((bv !== void 0 || b.hasOwnProperty(k)) && Eq.plainObjectsDeepEq(av, bv))) {
	        return false;
	      }
	    }
	    return aLength === objectKeyCount(b);
	  };

	  Eq.plainObjectsDeepEq = plainObjectsDeepEq = function(a, b) {
	    var _constructor;
	    if (a === b) {
	      return true;
	    } else if (a && b && a.constructor === (_constructor = b.constructor)) {
	      if (a.eq) {
	        return a.eq(b);
	      } else if (_constructor === Array) {
	        return Eq.plainObjectsDeepEqArray(a, b);
	      } else if (_constructor === Object) {
	        return Eq.plainObjectsDeepEqObject(a, b);
	      } else {
	        return false;
	      }
	    } else {
	      return false;
	    }
	  };

	  Eq.plainObjectsDeepDiffArray = function(before, after) {
	    var diff, i, j, l, len, m, ref1, ref2, ref3, ref4, ref5, res;
	    res = null;
	    len = min(before.length, after.length);
	    for (i = j = 0, ref1 = len; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
	      if (!(diff = plainObjectsDeepDiff(before[i], after[i]))) {
	        continue;
	      }
	      res || (res = {});
	      res[i] = diff;
	    }
	    if (len < before.length) {
	      for (i = l = ref2 = len, ref3 = before.length; ref2 <= ref3 ? l < ref3 : l > ref3; i = ref2 <= ref3 ? ++l : --l) {
	        res || (res = {});
	        res[i] = {
	          removed: before[i]
	        };
	      }
	    }
	    if (len < after.length) {
	      for (i = m = ref4 = len, ref5 = after.length; ref4 <= ref5 ? m < ref5 : m > ref5; i = ref4 <= ref5 ? ++m : --m) {
	        res || (res = {});
	        res[i] = {
	          added: after[i]
	        };
	      }
	    }
	    return res;
	  };

	  Eq.plainObjectsDeepDiffObject = function(before, after) {
	    var afterV, beforeV, diff, k, res;
	    res = null;
	    for (k in before) {
	      beforeV = before[k];
	      if (after.hasOwnProperty(k)) {
	        if (diff = plainObjectsDeepDiff(beforeV, after[k])) {
	          res || (res = {});
	          res[k] = diff;
	        }
	      } else {
	        res || (res = {});
	        res[k] = {
	          removed: beforeV
	        };
	      }
	    }
	    for (k in after) {
	      afterV = after[k];
	      if (!(!before.hasOwnProperty(k))) {
	        continue;
	      }
	      res || (res = {});
	      res[k] = {
	        added: afterV
	      };
	    }
	    return res;
	  };

	  Eq.plainObjectsDeepDiff = plainObjectsDeepDiff = function(before, after) {
	    var _constructor;
	    if (before === after) {
	      return null;
	    } else if (before && after && before.constructor === (_constructor = after.constructor)) {
	      if (before.eq) {
	        if (before.eq(after)) {
	          return null;
	        } else {
	          return {
	            before: before,
	            after: after
	          };
	        }
	      } else if (_constructor === Array) {
	        return Eq.plainObjectsDeepDiffArray(before, after);
	      } else if (_constructor === Object) {
	        return Eq.plainObjectsDeepDiffObject(before, after);
	      } else {
	        return {
	          before: before,
	          after: after
	        };
	      }
	    } else {
	      return {
	        before: before,
	        after: after
	      };
	    }
	  };

	  Eq.shallowEq = function(a, b) {
	    return a === b || (a && b && a.eq && a.eq(b));
	  };

	  return Eq;

	})();


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var Hash, compactFlatten,
	  slice = [].slice,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	compactFlatten = __webpack_require__(16).compactFlatten;

	module.exports = Hash = (function() {
	  var defaultEq, mergeInto;

	  function Hash() {}

	  Hash.countKeys = function(o) {
	    return Object.keys(o).length;
	  };

	  defaultEq = function(a, b) {
	    return a === b;
	  };

	  Hash.objectDiff = function(o1, o2, added, removed, changed, nochange, eq, o2KeyCount) {
	    var k, o1KeyCount, o2KeyCountIsAtLeast, v1, v2;
	    if (eq == null) {
	      eq = defaultEq;
	    }
	    o2KeyCountIsAtLeast = 0;
	    o1KeyCount = 0;
	    for (k in o1) {
	      v1 = o1[k];
	      o1KeyCount++;
	      if (typeof (v2 = o2[k]) !== "undefined" || o2.hasOwnProperty(k)) {
	        o2KeyCountIsAtLeast++;
	        if (!eq(v1, v2)) {
	          changed(k, v1, v2);
	        } else {
	          if (typeof nochange === "function") {
	            nochange(k, v1);
	          }
	        }
	      } else {
	        added(k, v1);
	      }
	    }
	    if (!(o2KeyCount != null) || o2KeyCountIsAtLeast !== o2KeyCount) {
	      for (k in o2) {
	        if (!(typeof o1[k] !== "undefined" || o1.hasOwnProperty(k))) {
	          removed(k, o2[k]);
	        }
	      }
	    }
	    return o1KeyCount;
	  };

	  Hash.objectWithout = function() {
	    var fields, k, o, result, v;
	    o = arguments[0], fields = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    result = {};
	    for (k in o) {
	      v = o[k];
	      if (indexOf.call(compactFlatten(fields), k) < 0) {
	        result[k] = v;
	      }
	    }
	    return result;
	  };

	  Hash.objectKeyCount = function(o) {
	    var count, k, v;
	    count = 0;
	    for (k in o) {
	      v = o[k];
	      count++;
	    }
	    return count;
	  };


	  /*
	  
	  merge "flattens" its arguments and then adds all keys from all objects in
	  the list into a new object which is returned.
	  
	  return: new object
	  
	  The first object's keys are added first. If two or more objects have the same
	  keys, the value set in the result is the last object's in the list with that key.
	   */

	  Hash.merge = function() {
	    return mergeInto({}, arguments);
	  };


	  /*
	  The same as 'merge' with one difference:
	  
	  Instead of a new object, all objects are merged into the first object in the list.
	  
	  return: first object in the flattened list
	  return: null if no source objects
	   */

	  Hash.mergeInto = mergeInto = function() {
	    var i, j, k, ref, result, source, sources, v;
	    sources = compactFlatten(arguments);
	    if (sources.length === 0) {
	      return null;
	    }
	    result = sources[0] || {};
	    for (i = j = 1, ref = sources.length; j < ref; i = j += 1) {
	      source = sources[i];
	      for (k in source) {
	        v = source[k];
	        result[k] = v;
	      }
	    }
	    return result;
	  };

	  Hash.hasAllProps = function(o1, o2) {
	    var k, v;
	    for (k in o1) {
	      v = o1[k];
	      if (!o2.hasOwnProperty(k)) {
	        return false;
	      }
	    }
	    return true;
	  };

	  Hash.pureMerge = function() {
	    var j, last, len, source, sources;
	    sources = compactFlatten(arguments);
	    if (sources.length === 0) {
	      return null;
	    }
	    if (sources.length === 1) {
	      return sources[0];
	    }
	    last = sources[sources.length - 1];
	    for (j = 0, len = sources.length; j < len; j++) {
	      source = sources[j];
	      if (source !== last) {
	        if (!Hash.hasAllProps(source, last)) {
	          return Hash.merge(sources);
	        }
	      }
	    }
	    return last;
	  };

	  Hash.select = function() {
	    var j, len, obj, prop, properties, ref, result, v;
	    obj = arguments[0], properties = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    if (!obj) {
	      return {};
	    }
	    result = {};
	    ref = compactFlatten(properties);
	    for (j = 0, len = ref.length; j < len; j++) {
	      prop = ref[j];
	      if (v = obj[prop] || obj.hasOwnProperty(prop)) {
	        result[prop] = v;
	      }
	    }
	    return result;
	  };

	  Hash.selectAll = function() {
	    var j, len, obj, prop, properties, ref, result;
	    obj = arguments[0], properties = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    if (!obj) {
	      return {};
	    }
	    result = {};
	    ref = compactFlatten(properties);
	    for (j = 0, len = ref.length; j < len; j++) {
	      prop = ref[j];
	      result[prop] = obj[prop];
	    }
	    return result;
	  };

	  Hash.objectWithout = function() {
	    var anythingToDo, j, len, obj, prop, properties, result, v;
	    obj = arguments[0], properties = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    if (properties.length === 1 && !(typeof properties[0] === "string")) {
	      properties = properties[0];
	    }
	    anythingToDo = false;
	    for (j = 0, len = properties.length; j < len; j++) {
	      prop = properties[j];
	      if (obj.hasOwnProperty(prop)) {
	        anythingToDo = true;
	        break;
	      }
	    }
	    if (anythingToDo) {
	      result = {};
	      for (prop in obj) {
	        v = obj[prop];
	        if (indexOf.call(properties, prop) < 0) {
	          result[prop] = v;
	        }
	      }
	      return result;
	    } else {
	      return obj;
	    }
	  };

	  return Hash;

	})();


/***/ },
/* 53 */
/***/ function(module, exports) {

	var Function;

	module.exports = Function = (function() {
	  function Function() {}

	  Function.fastBind = function(fn, _this) {
	    switch (fn.length) {
	      case 0:
	        return function() {
	          return fn.call(_this);
	        };
	      case 1:
	        return function(a) {
	          return fn.call(_this, a);
	        };
	      case 2:
	        return function(a, b) {
	          return fn.call(_this, a, b);
	        };
	      case 3:
	        return function(a, b, c) {
	          return fn.call(_this, a, b, c);
	        };
	      case 4:
	        return function(a, b, c, d) {
	          return fn.call(_this, a, b, c, d);
	        };
	      case 5:
	        return function(a, b, c, d, e) {
	          return fn.call(_this, a, b, c, d, e);
	        };
	      case 6:
	        return function(a, b, c, d, e, f) {
	          return fn.call(_this, a, b, c, d, e, f);
	        };
	      case 7:
	        return function(a, b, c, d, e, f, g) {
	          return fn.call(_this, a, b, c, d, e, f, g);
	        };
	      case 8:
	        return function(a, b, c, d, e, f, g, h) {
	          return fn.call(_this, a, b, c, d, e, f, g, h);
	        };
	      case 9:
	        return function(a, b, c, d, e, f, g, h, i) {
	          return fn.call(_this, a, b, c, d, e, f, g, h, i);
	        };
	      case 10:
	        return function(a, b, c, d, e, f, g, h, i, j) {
	          return fn.call(_this, a, b, c, d, e, f, g, h, i, j);
	        };
	      default:
	        return function() {
	          return fn.apply(_this, arguments);
	        };
	    }
	  };

	  return Function;

	})();


	/*
	TODO:

	The above options are not hot-reload compatible. However, this alternative would be:

	  name = fn.name
	  -> _this[name].apply _this, arguments

	I need to perf-test this. Or, I need to finally start using a global "debug" mode that could use this
	in debug mode and the faster(?), non hot-reload options in production mode.
	 */


/***/ },
/* 54 */
/***/ function(module, exports) {

	var Ruby,
	  hasProp = {}.hasOwnProperty;

	module.exports = Ruby = (function() {
	  function Ruby() {}

	  Ruby.rubyTrue = function(a) {
	    return a !== void 0 && a !== null && a !== false;
	  };

	  Ruby.rubyFalse = function(a) {
	    return a === void 0 || a === null || a === false;
	  };

	  Ruby.rubyOr = function(a, b) {
	    if (a != null) {
	      return a;
	    } else {
	      return b;
	    }
	  };

	  Ruby.rubyAnd = function(a, b) {
	    if (a != null) {
	      return b;
	    } else {
	      return a;
	    }
	  };

	  Ruby.reopenInstanceProps = function(klass, instanceProps) {
	    var k, results, v;
	    results = [];
	    for (k in instanceProps) {
	      if (!hasProp.call(instanceProps, k)) continue;
	      v = instanceProps[k];
	      results.push(klass.prototype[k] = v);
	    }
	    return results;
	  };

	  Ruby.reopenClassProps = function(klass, classProps) {
	    var k, results, v;
	    results = [];
	    for (k in classProps) {
	      if (!hasProp.call(classProps, k)) continue;
	      v = classProps[k];
	      results.push(klass[k] = v);
	    }
	    return results;
	  };

	  return Ruby;

	})();


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var Time, base, commaize, dateSecondMinusPerformanceSecond, initDateSecond, initPerformanceSecond, log;

	log = __webpack_require__(19).log;

	commaize = __webpack_require__(17).commaize;

	self.performance || (self.performance = {});

	(base = self.performance).now || (base.now = self.performance.mozNow || self.performance.msNow || self.performance.oNow || self.performance.webkitNow || function() {
	  return new Date().getTime();
	});

	initPerformanceSecond = self.performance.now() / 1000;

	initDateSecond = new Date().getTime() / 1000;

	dateSecondMinusPerformanceSecond = initDateSecond - initPerformanceSecond;

	module.exports = Time = (function() {
	  var currentSecond, multiples, timerStack;

	  function Time() {}

	  multiples = [["mo", 30 * 24 * 60 * 60], ["d", 24 * 60 * 60], ["h", 60 * 60], ["m", 60], ["s", 1], ["ms", .001], ["μs", .000001], ["ns", .000000001]];

	  Time.dateSecondToPerformanceSecond = function(dateSecond) {
	    return dateSecond - dateSecondMinusPerformanceSecond;
	  };

	  Time.performanceSecondToDateSecond = function(performanceSecond) {
	    return performanceSecond + dateSecondMinusPerformanceSecond;
	  };

	  Time.timeStampToPerformanceSecond = function(htmlEventTimeStamp) {
	    return htmlEventTimeStamp / 1000 - dateSecondMinusPerformanceSecond;
	  };

	  Time.durationString = function(seconds) {
	    var i, len, multiplier, name, ref;
	    for (i = 0, len = multiples.length; i < len; i++) {
	      ref = multiples[i], name = ref[0], multiplier = ref[1];
	      if (seconds >= multiplier) {
	        return "" + ((seconds / multiplier) | 0) + name;
	      }
	    }
	    return "0";
	  };

	  Time.dateAgeInSeconds = function(date) {
	    return ((new Date) - date) * .001;
	  };

	  Time.dateToSeconds = function(date) {
	    return post.getTime() * .001;
	  };

	  Time.perTimeString = function(secondsPerRun) {
	    var perTime;
	    perTime = 1 / secondsPerRun;
	    if (perTime > 100) {
	      return (commaize(perTime | 0)) + "/s";
	    } else if (perTime * 60 > 100) {
	      return (commaize(perTime * 60 | 0)) + "/m";
	    } else {
	      return (commaize(perTime * 3600 | 0)) + "/h";
	    }
	  };

	  Time.currentMillisecond = function() {
	    return self.performance.now();
	  };

	  Time.currentSecond = currentSecond = function() {
	    return self.performance.now() / 1000;
	  };

	  Time.currentDateSecond = function() {
	    return new Date().getTime() / 1000;
	  };

	  Time.time = function(a, b) {
	    var f, fResult, start, timeResult;
	    f = b || a;
	    start = currentSecond();
	    fResult = f();
	    timeResult = currentSecond() - start;
	    if (b) {
	      log("time: " + a + " took " + (Time.durationString(timeResult)));
	      return fResult;
	    } else {
	      return timeResult;
	    }
	  };

	  timerStack = [];

	  Time.stackTime = function(f) {
	    var start, subTimeTotal, timeResult, tsl;
	    start = currentSecond();
	    timerStack.push(0);
	    f();
	    subTimeTotal = timerStack.pop();
	    timeResult = currentSecond() - start;
	    if ((tsl = timerStack.length) > 0) {
	      timerStack[tsl - 1] += timeResult;
	    }
	    return {
	      count: 1,
	      total: timeResult,
	      subTimeTotal: subTimeTotal,
	      remainder: timeResult - subTimeTotal
	    };
	  };

	  Time.logTimeSinceLast = function(a) {
	    var time;
	    time = Time.currentSecond();
	    log(a + " (" + (Time.lastTime ? Time.durationString(time - Time.lastTime) : void 0) + ")");
	    return Time.lastTime = time;
	  };

	  return Time;

	})();


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var WebWorker, log;

	log = __webpack_require__(19).log;


	/*
	SRC:
	  http://jsfiddle.net/uqcFM/49/
	  http://stackoverflow.com/a/10372280/2121000
	 */

	module.exports = WebWorker = (function() {
	  var startWorkerFromJsString;

	  function WebWorker() {}

	  WebWorker.echoWebWorker = "self.onmessage=function(e){postMessage('Worker: '+e.data);}";

	  WebWorker.isBrowser = !!(self.window && self.navigator && self.document);

	  WebWorker.isWebWorker = !WebWorker.isBrowser && self.importScripts;

	  WebWorker.startWorkerFromJsString = startWorkerFromJsString = function(workerSource) {
	    return new Worker(URL.createObjectURL(new Blob([workerSource], {
	      type: 'application/javascript'
	    })));
	  };

	  WebWorker.startWorkerFromFunction = function(workerFunction) {
	    return startWorkerFromJsString("(" + workerFunction + ")();");
	  };

	  return WebWorker;

	})();


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var Promise, PromisedFileReader;

	Promise = __webpack_require__(25);

	module.exports = PromisedFileReader = (function() {
	  function PromisedFileReader() {}

	  PromisedFileReader.readFileAsDataUrl = function(file) {
	    return new Promise(function(resolve, reject) {
	      var reader;
	      reader = new FileReader;
	      reader.readAsDataURL(file);
	      reader.onload = (function(_this) {
	        return function(e) {
	          return resolve(e.target.result);
	        };
	      })(this);
	      return reader.onerror = (function(_this) {
	        return function(e) {
	          return reject(error);
	        };
	      })(this);
	    });
	  };

	  return PromisedFileReader;

	})();


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var Analytics, BaseObject, inspectLean,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	inspectLean = __webpack_require__(40).inspectLean;

	Analytics = (function(superClass) {
	  extend(Analytics, superClass);

	  function Analytics() {
	    return Analytics.__super__.constructor.apply(this, arguments);
	  }

	  Analytics.defaultCategory = "Foundation.Analytics";

	  Analytics.event = function(options) {
	    var action, category, label, noninteraction, value;
	    if (options == null) {
	      options = {};
	    }
	    category = options.category || this.defaultCategory;
	    action = options.action;
	    label = options.label;
	    value = options.value;
	    noninteraction = !!options.noninteraction;
	    if (self._gaq) {
	      self._gaq.push(['_trackEvent', category, action, label, value, noninteraction]);
	      return this.rawLog("ANALYTICS-EVENT: " + (inspectLean(options)));
	    } else {
	      return this.rawLog("(no)ANALYTICS-EVENT: " + (inspectLean(options)));
	    }
	  };

	  return Analytics;

	})(BaseObject);


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var BaseModule, log, mergeInto;

	log = __webpack_require__(19).log;

	mergeInto = __webpack_require__(52).mergeInto;


	/*
	TODO:
	  BaseModule should be with BaseObject
	  BaseObject should be renamed BaseClass

	  Some of BaseObject's code should be shared with BaseModule via a common extended parent class.
	    - getPrototypePropertyExtendedByInheritance

	  BaseObject should maintain a list of all included modules:
	    - should prevent including a module twice
	    - should call each module's constructor from BaseObject's constructor
	    -
	 */

	module.exports = BaseModule = (function() {
	  function BaseModule() {}


	  /*
	  TODO: @_getters should work with inheritance. Right now, an inheriting class's @getter
	  declarations will add to the top-mose inheriting from class with getters!
	   */

	  BaseModule.getter = function(getters) {
	    return this._getters = mergeInto(this._getters, getters);
	  };

	  BaseModule.setter = function(setters) {
	    return this._setters = mergeInto(this._setters, setters);
	  };


	  /*
	  this/@: the module
	  IN:
	    includedInto: the BaseObject-extending-class this module was included into
	   */

	  BaseModule.included = function(includedInto) {
	    if (this._getters) {
	      includedInto.getter(this._getters);
	    }
	    if (this._setters) {
	      return includedInto.setter(this._setters);
	    }
	  };

	  return BaseModule;

	})();


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, BatchLoader, inspect, log, nextTick, ref, timeout,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	log = __webpack_require__(19).log;

	inspect = __webpack_require__(40).inspect;

	ref = __webpack_require__(21), nextTick = ref.nextTick, timeout = ref.timeout;

	module.exports = BatchLoader = (function(superClass) {
	  extend(BatchLoader, superClass);

	  function BatchLoader(loadFunction) {
	    this.assets = {};
	    this.loadingAssets = {};
	    this.loadFunction = loadFunction;
	  }

	  BatchLoader.prototype.load = function(sources, onLoad) {
	    if (typeof sources === "string") {
	      sources = [sources];
	    }
	    return this.loadAssets(sources, onLoad);
	  };

	  BatchLoader.prototype.addAsset = function(source, asset) {
	    var base;
	    if (asset == null) {
	      throw new Error("not a valid asset: " + (inspect(asset)));
	    }
	    delete this.loadingAssets[source];
	    (base = this.assets)[source] || (base[source] = asset);
	    return this.notifyListeners();
	  };

	  BatchLoader.getter({
	    blankInfo: function() {
	      return {
	        loadedFromCache: 0,
	        loadedAsynchronously: 0,
	        alreadyLoadingAsynchronously: 0
	      };
	    }
	  });

	  BatchLoader.prototype.loadAssets = function(sources, onLoad) {
	    var info;
	    info = this.blankInfo;
	    sources.forEach((function(_this) {
	      return function(src) {
	        if (_this.assets[src] != null) {
	          return info.loadedFromCache++;
	        } else if (_this.loadingAssets[src]) {
	          info.loadedAsynchronously++;
	          return info.alreadyLoadingAsynchronously++;
	        } else {
	          info.loadedAsynchronously++;
	          _this.loadingAssets[src] = true;
	          return _this.loadFunction(src, function(src, asset) {
	            return _this.addAsset(src, asset);
	          });
	        }
	      };
	    })(this));
	    this.addLoaderListener(sources, onLoad, info);
	    return nextTick((function(_this) {
	      return function() {
	        return _this.notifyListeners();
	      };
	    })(this));
	  };

	  BatchLoader.prototype.addLoaderListener = function(sources, onLoad, info) {
	    this.loadingListeners || (this.loadingListeners = []);
	    return this.loadingListeners.push({
	      sources: sources,
	      onLoad: onLoad,
	      info: info
	    });
	  };

	  BatchLoader.prototype.notifyListeners = function() {
	    var allLoaded, i, j, len, len1, listener, oldloadingListeners, ref1, source;
	    if (!this.loadingListeners) {
	      return;
	    }
	    oldloadingListeners = this.loadingListeners;
	    this.loadingListeners = [];
	    for (i = 0, len = oldloadingListeners.length; i < len; i++) {
	      listener = oldloadingListeners[i];
	      allLoaded = true;
	      ref1 = listener.sources;
	      for (j = 0, len1 = ref1.length; j < len1; j++) {
	        source = ref1[j];
	        if (!this.assets[source]) {
	          allLoaded = false;
	        }
	      }
	      if (allLoaded) {
	        listener.onLoad(this.assets, listener.sources, listener.info);
	      } else {
	        this.loadingListeners.push(listener);
	      }
	    }
	    return this.loadingListeners;
	  };

	  return BatchLoader;

	})(BaseObject);


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var Async, BaseObject, Epoch, Foundation, Inspect, Promise, evalAndThrowErrorsOutOfStack, inspect, requestAnimationFrame,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Foundation = __webpack_require__(13);

	BaseObject = __webpack_require__(30);

	Async = __webpack_require__(21);

	Inspect = __webpack_require__(40);

	Promise = __webpack_require__(25);

	requestAnimationFrame = Async.requestAnimationFrame, evalAndThrowErrorsOutOfStack = Async.evalAndThrowErrorsOutOfStack;

	inspect = Inspect.inspect;

	module.exports = Epoch = (function(superClass) {
	  extend(Epoch, superClass);

	  function Epoch(options) {
	    if (options == null) {
	      options = {};
	    }
	    Epoch.__super__.constructor.apply(this, arguments);
	    this._emptyQueueAfterProcessing = !!options.emptyQueueAfterProcessing;
	    this._queuedItems = [];
	    this._nextReadyQueue = [];
	    this._epochQueued = false;
	    this._processingEpoch = false;
	    this._epochCount = 0;
	    this._frameSecond = 0;
	  }

	  Epoch.getter("processingEpoch epochQueued epochCount emptyQueueAfterProcessing frameSecond", {
	    epochLength: function() {
	      return this._queuedItems.length;
	    }
	  });

	  Epoch.prototype.updateGlobalCounts = function() {
	    Foundation.globalCount(this["class"].name + "_queuedItems", this._queuedItems.length);
	    return Foundation.globalCount(this["class"].name + "_nextReadyQueue", this._nextReadyQueue.length);
	  };


	  /*
	  This guarantess there will be a next "ready" event.
	  If there were no setStates this epoch, then there won't be a next "ready" - unless you use this method.
	  
	  IN:
	    f: an optional function to invoke on-next-ready
	      mostly this is provided as a shortcut:
	        @onNextReady =>
	      is directly equivelent to:
	        @onNextReady().then =>
	  
	  OUT: promise.then (result of calling f() or null if no f) ->
	   */

	  Epoch.prototype.onNextReady = function(f, forceNextEpoch) {
	    if (forceNextEpoch == null) {
	      forceNextEpoch = true;
	    }
	    if (forceNextEpoch && !this._processingEpoch) {
	      this.queueNextEpoch();
	    }
	    return new Promise((function(_this) {
	      return function(resolve) {
	        return _this._nextReadyQueue.push(function() {
	          return resolve(typeof f === "function" ? f() : void 0);
	        });
	      };
	    })(this));
	  };

	  Epoch.prototype._ready = function() {
	    var f, i, len, nrq, results;
	    if (!((nrq = this._nextReadyQueue).length > 0)) {
	      return;
	    }
	    this._nextReadyQueue = [];
	    results = [];
	    for (i = 0, len = nrq.length; i < len; i++) {
	      f = nrq[i];
	      results.push(evalAndThrowErrorsOutOfStack((function(_this) {
	        return function() {
	          return f();
	        };
	      })(this)));
	    }
	    return results;
	  };

	  Epoch.prototype.queueItem = function(item) {
	    if (item) {
	      this._queuedItems.push(item);
	      this.queueNextEpoch();
	    }
	    return item;
	  };

	  Epoch.prototype.isItemQueued = function(item) {
	    return indexOf.call(this._queuedItems, item) >= 0;
	  };

	  Epoch.prototype.queueNextEpoch = function() {
	    if (!this._epochQueued) {
	      this._epochQueued = true;
	      return requestAnimationFrame((function(_this) {
	        return function(frameTimeMs) {
	          _this._frameSecond = frameTimeMs / 1000;
	          _this._epochQueued = false;
	          return _this.processEpoch();
	        };
	      })(this));
	    }
	  };

	  Epoch.prototype.flushEpochNow = function() {
	    return this.processEpoch();
	  };

	  Epoch.prototype.processEpoch = function() {
	    var items;
	    this._processingEpoch = true;
	    items = this._queuedItems;
	    if (this._emptyQueueAfterProcessing) {
	      this.processEpochItemsWithErrorHandling(items);
	      this._queuedItems = [];
	    } else {
	      this._queuedItems = [];
	      this.processEpochItemsWithErrorHandling(items);
	    }
	    this._processingEpoch = false;
	    this._epochCount++;
	    return this._ready();
	  };

	  Epoch.prototype.processEpochItemsWithErrorHandling = function(items) {
	    return evalAndThrowErrorsOutOfStack((function(_this) {
	      return function() {
	        return _this.processEpochItems(items);
	      };
	    })(this));
	  };

	  Epoch.prototype.processEpochItems = function(items) {
	    var i, item, len, results;
	    results = [];
	    for (i = 0, len = items.length; i < len; i++) {
	      item = items[i];
	      results.push(item());
	    }
	    return results;
	  };

	  return Epoch;

	})(BaseObject);


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, JsonStore,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BaseObject = __webpack_require__(30);

	module.exports = JsonStore = (function(superClass) {
	  extend(JsonStore, superClass);

	  function JsonStore(store) {
	    if (store == null) {
	      store = localStorage;
	    }
	    this.store = store;
	  }

	  JsonStore.prototype.setItem = function(k, v) {
	    return this.store.setItem(k, JSON.stringify(v));
	  };

	  JsonStore.prototype.getItem = function(k) {
	    return JSON.parse(this.store.getItem(k));
	  };

	  JsonStore.prototype.removeItem = function(k) {
	    return this.store.removeItem(k);
	  };

	  JsonStore.prototype.clear = function() {
	    return this.store.clear();
	  };

	  JsonStore.prototype.key = function(k) {
	    return this.store.key(k);
	  };

	  JsonStore.getter({
	    length: function() {
	      return this.store.length;
	    }
	  });

	  return JsonStore;

	})(BaseObject);


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Promise, RestClient, log, merge, present,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	present = __webpack_require__(20).present;

	BaseObject = __webpack_require__(30);

	Promise = __webpack_require__(25);

	log = __webpack_require__(19).log;

	merge = __webpack_require__(52).merge;

	module.exports = RestClient = (function(superClass) {
	  extend(RestClient, superClass);

	  function RestClient() {
	    return RestClient.__super__.constructor.apply(this, arguments);
	  }

	  RestClient.multipartPost = function(url, parts, onSuccess, onError, onProgress) {
	    var formData, k, request, v;
	    formData = new FormData;
	    for (k in parts) {
	      v = parts[k];
	      this.log({
	        k: k,
	        v: v
	      });
	      formData.append(k, v);
	    }
	    request = new XMLHttpRequest;
	    request.open("POST", url, true);
	    request.onload = function(rawEvent) {
	      if (request.status === 200) {
	        return onSuccess(request.response, url, request);
	      } else if (onError) {
	        return onError(rawEvent, url, parts, request);
	      }
	    };
	    if (onProgress) {
	      request.upload.onprogress = function(rawEvent) {
	        return onProgress(rawEvent, url, parts, request);
	      };
	    }
	    if (onError) {
	      request.onerror = (function(_this) {
	        return function(rawEvent) {
	          return onError(rawEvent, url, parts, request);
	        };
	      })(this);
	    }
	    return request.send(formData);
	  };


	  /*
	  get/put/post
	  
	  IN:
	    url: valid url string
	    data: data to send
	    options:
	      headers: plain object of additional headers to set
	  
	      onProgress: (statusObject) -> return value ignored
	        IN: statusObject - see below
	        callback function used to report progress
	  
	      responseType: "arraybuffer", "blob", "document", "json", or "text"
	        default: "text"
	        https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType
	  
	  OUT: Promise:
	    resolved: (responseData) ->
	    rejected: (statusObject) ->
	  
	  responseData:
	    a String, or the type specified by the responseType option
	  
	  statusObject:
	    event:    # the HTML event object
	    request:  # the XMLHttpRequest
	    location: # the url location of the object just PUT or POSTEd
	    progress:
	      a value between 0 and 1
	      If the progress is indeterminant, this is 0
	      If this isn't an onProgress event, this is the amount of progress
	      that was made up to the point of the event.
	   */

	  RestClient.get = function(url, options) {
	    return RestClient._sendRequest(merge(options, {
	      verb: "GET",
	      url: url
	    }));
	  };

	  RestClient.getArrayBuffer = function(url, options) {
	    return this.get(url, merge(options, {
	      responseType: "arraybuffer"
	    }));
	  };

	  RestClient.getJson = function(url, options) {
	    return this.get(url, merge(options, {
	      responseType: "json"
	    }));
	  };

	  RestClient.put = function(url, data, options) {
	    return RestClient._sendRequest(merge(options, {
	      verb: "PUT",
	      url: url,
	      data: data
	    }));
	  };

	  RestClient.post = function(url, data, options) {
	    return RestClient._sendRequest(merge(options, {
	      verb: "POST",
	      url: url,
	      data: data
	    }));
	  };


	  /*
	  IN:
	    options:
	      verb: "GET", "PUT", "POST"
	  
	      data: data to _sendRequest - passed to xmlHttpRequest._sendRequest
	  
	      plus all the standard options for get/put/post
	  
	  OUT: see get/put/post above
	   */

	  RestClient._sendRequest = function(options) {
	    var data, headers, onProgress, responseType, url, verb;
	    verb = options.verb, url = options.url, data = options.data, headers = options.headers, onProgress = options.onProgress, responseType = options.responseType;
	    return new Promise(function(resolve, reject) {
	      var k, progressCallbackInternal, request, status, v;
	      request = new XMLHttpRequest;
	      request.open(verb, url, true);
	      if (present(responseType)) {
	        request.responseType = responseType;
	      }
	      if (headers) {
	        for (k in headers) {
	          v = headers[k];
	          request.setRequestHeader(k, v);
	        }
	      }
	      request.onerror = function(event) {
	        return reject(merge(status, {
	          event: event
	        }));
	      };
	      request.onload = function(event) {
	        if ((request.status / 100 | 0) === 2) {
	          if (request.response) {
	            return resolve(request.response);
	          } else {
	            return reject(merge(status, {
	              event: event
	            }));
	          }
	        } else {
	          return reject(merge(status, {
	            event: event
	          }));
	        }
	      };
	      status = {
	        progress: 0,
	        request: request,
	        location: url
	      };
	      if (onProgress) {
	        progressCallbackInternal = function(event) {
	          var loaded, total;
	          total = event.total, loaded = event.loaded;
	          return typeof onProgress === "function" ? onProgress(status = merge(status, {
	            event: event,
	            progress: (total > 0 ? loaded / total : 0)
	          })) : void 0;
	        };
	        if (verb === "GET") {
	          request.onprogress = progressCallbackInternal;
	        } else {
	          request.upload.onprogress = progressCallbackInternal;
	        }
	      }
	      return request.send(data ? data.toArrayBuffer ? data.toArrayBuffer() : data : null);
	    });
	  };

	  return RestClient;

	})(BaseObject);


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Map, SingleObjectTransaction, cloneByStructure, eq, inspect, removeFirstMatch, rubyTrue,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	BaseObject = __webpack_require__(30);

	Map = __webpack_require__(39);

	removeFirstMatch = __webpack_require__(16).removeFirstMatch;

	rubyTrue = __webpack_require__(54).rubyTrue;

	eq = __webpack_require__(51).eq;

	inspect = __webpack_require__(40).inspect;

	cloneByStructure = __webpack_require__(38).cloneByStructure;

	module.exports = SingleObjectTransaction = (function(superClass) {
	  var setValues;

	  extend(SingleObjectTransaction, superClass);

	  function SingleObjectTransaction(a) {
	    var options;
	    SingleObjectTransaction.__super__.constructor.apply(this, arguments);
	    this.object = (function() {
	      if (a.constructor === Array) {
	        if (a.length !== 2) {
	          throw new Error("new SingleObjectTransaction: expected length-2 array like: [obj, optionsMap]");
	        }
	        this.options = a[1];
	        return a[0];
	      } else {
	        this.options = {};
	        return a;
	      }
	    }).call(this);
	    if (this.object == null) {
	      throw new Error("object must not be null or undefined");
	    }
	    this.props = [];
	    this.from = {};
	    options = this.options;
	    if (options.properties) {
	      this.addProperties(options.properties);
	    }
	    if (options.property) {
	      this.addProp(options.property);
	    }
	    if (options.from) {
	      this.addFromValues(options.from);
	    }
	    if (options.to) {
	      this.addToValues(options.to);
	    }
	  }

	  SingleObjectTransaction.prototype.toString = function() {
	    return (inspect(this.object, 0)) + " from:" + (inspect(this.from, 1)) + " to:" + (inspect(this.to, 1));
	  };

	  SingleObjectTransaction.prototype.inspect = function(inspector) {
	    var i, k, len, ref, results;
	    inspector.put(this.object.classPathName + ":");
	    ref = this.props;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      k = ref[i];
	      inspector.put("\n    " + k + ": ");
	      if (rubyTrue(this.from && this.from[k])) {
	        inspector.inspect(this.from[k], 1);
	      }
	      inspector.put(" ... ");
	      if (rubyTrue(this.to && this.to[k])) {
	        results.push(inspector.inspect(this.to[k], 1));
	      } else {
	        results.push(void 0);
	      }
	    }
	    return results;
	  };

	  SingleObjectTransaction.getter({
	    properties: function() {
	      return this.props;
	    },
	    hasToValues: function() {
	      return !!this.to;
	    },
	    valuesChanged: function() {
	      var fromValue, k, ref, toValue;
	      ref = this.from;
	      for (k in ref) {
	        fromValue = ref[k];
	        toValue = this.to[k];
	        if (!eq(fromValue, toValue)) {
	          return true;
	        }
	      }
	      return false;
	    }
	  });

	  SingleObjectTransaction.prototype.addFromValues = function(from) {
	    var base, k, v;
	    for (k in from) {
	      v = from[k];
	      this.addProp(k);
	      this.from[k] = v;
	    }
	    return typeof (base = this.object).preprocessProperties === "function" ? base.preprocessProperties(this.from) : void 0;
	  };

	  SingleObjectTransaction.prototype.addToValues = function(to) {
	    var base, k, v;
	    this.to || (this.to = {});
	    for (k in to) {
	      v = to[k];
	      this.addProp(k);
	      this.to[k] = v;
	    }
	    return typeof (base = this.object).preprocessProperties === "function" ? base.preprocessProperties(this.to) : void 0;
	  };

	  SingleObjectTransaction.prototype.addProperties = function(props) {
	    var i, len, prop, results, results1, v;
	    if (props.constructor === Array) {
	      results = [];
	      for (i = 0, len = props.length; i < len; i++) {
	        prop = props[i];
	        results.push(this.addProp(prop));
	      }
	      return results;
	    } else {
	      results1 = [];
	      for (prop in props) {
	        v = props[prop];
	        results1.push(this.addProp(prop));
	      }
	      return results1;
	    }
	  };

	  SingleObjectTransaction.prototype.addProp = function(propName) {
	    if (indexOf.call(this.props, propName) < 0) {
	      return this.props.push(propName);
	    }
	  };

	  SingleObjectTransaction.prototype.deleteProp = function(propName) {
	    removeFirstMatch(this.props, propName);
	    delete this.from[propName];
	    return delete this.to[propName];
	  };

	  SingleObjectTransaction.prototype.saveValues = function(saveTo) {
	    var getterName, i, len, metaProperties, prop, ref, ref1, value;
	    this.clearOptimizations();
	    metaProperties = this.object.metaProperties;
	    ref = this.props;
	    for (i = 0, len = ref.length; i < len; i++) {
	      prop = ref[i];
	      if (!saveTo.hasOwnProperty(prop)) {
	        value = saveTo[prop] = cloneByStructure((getterName = metaProperties != null ? (ref1 = metaProperties[prop]) != null ? ref1.getterName : void 0 : void 0) ? this.object[getterName]() : this.object[prop]);
	      }
	    }
	    return null;
	  };

	  SingleObjectTransaction.prototype.saveFromValues = function() {
	    return this.saveValues(this.from || (this.from = {}));
	  };

	  SingleObjectTransaction.prototype.saveToValues = function() {
	    return this.saveValues(this.to || (this.to = {}));
	  };

	  SingleObjectTransaction._setValues = setValues = function(o, values, f) {
	    var metaProperties, prop, ref, setterName, v;
	    metaProperties = o.metaProperties;
	    for (prop in values) {
	      v = values[prop];
	      if (f) {
	        v = f(prop, v);
	      }
	      if (setterName = metaProperties != null ? (ref = metaProperties[prop]) != null ? ref.setterName : void 0 : void 0) {
	        o[setterName](v);
	      } else {
	        o[prop] = v;
	      }
	    }
	    return null;
	  };

	  SingleObjectTransaction.prototype.rollBack = function() {
	    return setValues(this.object, this.from);
	  };

	  SingleObjectTransaction.prototype.rollForward = function() {
	    return setValues(this.object, this.to);
	  };

	  SingleObjectTransaction.prototype.clearOptimizations = function() {
	    return this.numberDeltas = this.interpolateToObjects = null;
	  };

	  SingleObjectTransaction.prototype.optimizeInterpolation = function() {
	    var field, from, ref, results, to;
	    this.numberDeltas = {};
	    this.interpolateToObjects = {};
	    this.nonInterpolatingFields = {
	      to: {},
	      from: {}
	    };
	    ref = this.from;
	    results = [];
	    for (field in ref) {
	      from = ref[field];
	      to = this.to[field];
	      if (typeof from === "number") {
	        results.push(this.numberDeltas[field] = to - from);
	      } else if (typeof (from != null ? from.interpolate : void 0) === "function") {
	        results.push(this.interpolateToObjects[field] = to);
	      } else {
	        this.nonInterpolatingFields.from[field] = from;
	        results.push(this.nonInterpolatingFields.to[field] = to);
	      }
	    }
	    return results;
	  };

	  SingleObjectTransaction.prototype.interpolateNumberFields = function(p) {
	    return setValues(this.object, this.numberDeltas, (function(_this) {
	      return function(field, delta) {
	        return _this.from[field] + delta * p;
	      };
	    })(this));
	  };

	  SingleObjectTransaction.prototype.interpolateObjectFields = function(p) {
	    var e, error;
	    try {
	      return setValues(this.object, this.interpolateToObjects, (function(_this) {
	        return function(field, toObject) {
	          return _this.from[field].interpolate(toObject, p);
	        };
	      })(this));
	    } catch (error) {
	      e = error;
	      this.log("Art.Foundation.Transaction#interpolateObjectFields(p=" + p + "): error " + e + " deltas: " + (inspect(this.interpolateToObjects)) + " from:   " + (inspect(this.from)) + " to:     " + (inspect(this.to)));
	      throw e;
	    }
	  };

	  SingleObjectTransaction.prototype.setNonInterpolatingFields = function(p) {
	    return setValues(this.object, this.nonInterpolatingFields[p >= 1 ? "to" : "from"]);
	  };

	  SingleObjectTransaction.prototype.interpolate = function(p) {
	    if (!this.numberDeltas) {
	      this.optimizeInterpolation();
	    }
	    this.interpolateNumberFields(p);
	    this.interpolateObjectFields(p);
	    return this.setNonInterpolatingFields(p);
	  };

	  SingleObjectTransaction.getter({
	    noChanges: function() {
	      return this.props.length === 0;
	    }
	  });

	  SingleObjectTransaction.prototype.optimizeProperties = function() {
	    var i, len, prop, ref, results;
	    this.clearOptimizations();
	    ref = this.props;
	    results = [];
	    for (i = 0, len = ref.length; i < len; i++) {
	      prop = ref[i];
	      if (!this.from.hasOwnProperty(prop) || !this.to.hasOwnProperty(prop) || eq(this.from[prop], this.to[prop])) {
	        results.push(this.deleteProp(prop));
	      } else {
	        results.push(void 0);
	      }
	    }
	    return results;
	  };

	  return SingleObjectTransaction;

	})(BaseObject);


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Stat, inspect, max, min, ref, round,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(17), min = ref.min, max = ref.max, round = ref.round;

	BaseObject = __webpack_require__(30);

	inspect = __webpack_require__(40).inspect;

	module.exports = Stat = (function(superClass) {
	  extend(Stat, superClass);

	  function Stat() {
	    this.reset();
	  }

	  Stat.prototype.reset = function() {
	    this.values = [];
	    this.sum = 0;
	    return this.max = this.min = null;
	  };

	  Stat.getter({
	    length: function() {
	      return this.values.length;
	    },
	    average: function() {
	      return this.sum / this.values.length;
	    },
	    median: function() {
	      return this.values.slice().sort()[this.length / 2 | 0];
	    }
	  });

	  Stat.prototype.percential = function(zeroToOneHundred) {
	    var i, sorted;
	    i = ((this.length - 1) * zeroToOneHundred / 100) | 0;
	    sorted = this.values.slice().sort(function(v1, v2) {
	      return v2 - v1;
	    });
	    return sorted[i];
	  };

	  Stat.prototype.histogram = function(divisions, min, max) {
	    var bin, delta, hist, j, k, len, mul, ref1, ref2, v;
	    if (min == null) {
	      min = this.min;
	    }
	    if (max == null) {
	      max = this.max;
	    }
	    delta = max - min;
	    mul = divisions / delta;
	    hist = {};
	    for (v = j = 0, ref1 = divisions; j < ref1; v = j += 1) {
	      hist[min + v / mul] = 0;
	    }
	    ref2 = this.values;
	    for (k = 0, len = ref2.length; k < len; k++) {
	      v = ref2[k];
	      bin = (v - min) * mul | 0;
	      if (bin < 0) {
	        bin = 0;
	      }
	      if (bin >= divisions) {
	        bin = divisions - 1;
	      }
	      hist[min + bin / mul]++;
	    }
	    return hist;
	  };

	  Stat.prototype.toString = function() {
	    return inspect({
	      length: this.length,
	      average: this.average,
	      median: this.median,
	      min: this.min,
	      max: this.max
	    });
	  };

	  Stat.prototype.toInfoMap = function() {
	    return {
	      length: this.length,
	      average: this.average,
	      median: this.median,
	      min: this.min,
	      max: this.max,
	      p90: this.percential(90),
	      p95: this.percential(95),
	      p99: this.percential(99)
	    };
	  };

	  Stat.prototype.toIntInfoMap = function() {
	    return {
	      length: this.length,
	      average: round(this.average),
	      median: round(this.median),
	      min: round(this.min),
	      max: round(this.max),
	      p90: round(this.percential(90)),
	      p95: round(this.percential(95)),
	      p99: round(this.percential(99))
	    };
	  };

	  Stat.prototype.toIntString = function() {
	    return inspect(this.toIntInfoMap());
	  };

	  Stat.prototype.add = function(v) {
	    this.values.push(v);
	    this.sum += v;
	    if (this.values.length === 1) {
	      return this.max = this.min = v;
	    } else {
	      this.max = max(this.max, v);
	      return this.min = min(this.min, v);
	    }
	  };

	  return Stat;

	})(BaseObject);


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	Transaction provides a manual, yet easy way to log the before and after values
	of fields over many objects.

	It is "manual" in that you must:

	  Pre-specify all objects you wish to track.
	  Specify the properties you wish to track for all objects and/or uniquely for each object.
	  Pass in the "from" values or call saveFromValues
	  Pass in the "to" values or call saveToValues

	Once you have capture the "from" and "to" values of the transaction, you can:

	  rollBack and set all properties to their "from" values
	  rollForward and set all properties to their "to" values
	  interpolate(p) and set all properties to their linearly interpolated value
	    between their saved "from" (p=0) and "to" (p=1) values.
	    If you use interpolate:
	      to/from values should be pair-wise the same type
	      only to/from values of the following types will be interpolated:
	        numbers
	        objects implementing: a.add(b), a.sub(b) and a.mul(number)
	      Non-interpolatable types are handled as follows:
	        switch p
	          when 0 then set to "from" values
	          when 1 then set to "to" values
	          else left unchanged

	Example initializers:

	   * example-a: track obj's "foo" and "bar" properties
	  new Transaction obj, properties: ["foo", "bar"]

	   * same as example-a, but also initialize obj's from-values as obj.foo=1 and obj.bar=2
	  new Transaction obj, from: foo:1, bar:2

	   * same as example-a, but also initialize obj's to-values as obj.foo=1 and obj.bar=2
	  new Transaction obj, to: foo:1, bar:2

	   * track obj1 and obj2's "foo" and "bar" properties
	  new Transaction [obj1, obj2], properties: ["foo", "bar"]

	   * track:
	   *   obj1's foo, bar, noo and mar properties, with both from and to values initialized
	   *   obj2's goo, har, noo and mar properties, with both from and to values initialized
	  new Transaction [
	      [obj1,
	        from: foo:1, bar:2
	        to:   foo:2, bar:3
	      ],
	      [obj2,
	        from: goo:1, har:2
	        to:   goo:2, har:3
	      ]
	    ],
	    from: noo:4, mar:5
	    to:   noo:4, mar:5
	 */
	var BaseObject, Map, SingleObjectTransaction, Transaction, cloneByStructure, eq, inspect, rubyTrue,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	SingleObjectTransaction = __webpack_require__(64);

	Map = __webpack_require__(39);

	BaseObject = __webpack_require__(30);

	rubyTrue = __webpack_require__(54).rubyTrue;

	eq = __webpack_require__(51).eq;

	inspect = __webpack_require__(40).inspect;

	cloneByStructure = __webpack_require__(38).cloneByStructure;

	module.exports = Transaction = (function(superClass) {
	  extend(Transaction, superClass);

	  Transaction.SingleObjectTransaction = SingleObjectTransaction;

	  function Transaction(objects, options) {
	    if (options == null) {
	      options = {};
	    }
	    Transaction.__super__.constructor.apply(this, arguments);
	    this._objects = new Map;
	    if (objects.constructor === Array) {
	      this.addObjects(objects);
	    } else {
	      this.addObject(objects);
	    }
	    if (options.properties) {
	      this.addProperties(options.properties);
	    }
	    if (options.property) {
	      this.addProperties([options.property]);
	    }
	    if (options.from) {
	      this.addFromValues(options.from);
	    }
	    if (options.to) {
	      this.addToValues(options.to);
	    }
	    this.saveFromValues();
	  }

	  Transaction.prototype.inspect = function(inspector) {
	    inspector.put(this.classPathName + ":");
	    return this.inspectParts(inspector);
	  };

	  Transaction.prototype.inspectParts = function(inspector) {
	    return this._objects.each((function(_this) {
	      return function(k, v) {
	        inspector.put("\n  ");
	        return inspector.inspect(v);
	      };
	    })(this));
	  };

	  Transaction.getter({
	    objects: function() {
	      return this._objects.keys;
	    }
	  });

	  Transaction.prototype.properties = function(obj) {
	    return this._objects.get(obj).properties;
	  };

	  Transaction.prototype.from = function(obj) {
	    return this._objects.get(obj).from;
	  };

	  Transaction.prototype.to = function(obj) {
	    return this._objects.get(obj).to;
	  };

	  Transaction.prototype.rollBack = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.rollBack();
	      };
	    })(this));
	  };

	  Transaction.prototype.rollForward = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.rollForward();
	      };
	    })(this));
	  };

	  Transaction.prototype.interpolate = function(p) {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.interpolate(p);
	      };
	    })(this));
	  };

	  Transaction.prototype.optimize = function() {
	    this.optimizeProperties();
	    return this.optimizeObjects();
	  };

	  Transaction.getter({
	    hasToValues: function() {
	      var result;
	      result = false;
	      this._objects.forEach((function(_this) {
	        return function(oi) {
	          if (oi.hasToValues) {
	            return result = true;
	          }
	        };
	      })(this));
	      return result;
	    },
	    valuesChanged: function() {
	      var result;
	      result = false;
	      this._objects.forEach((function(_this) {
	        return function(object) {
	          if (object.valuesChanged) {
	            return result = true;
	          }
	        };
	      })(this));
	      return result;
	    }
	  });

	  Transaction.prototype.toString = function() {
	    return (this.className + "\n  ") + (this._objects.map(function(obj, single) {
	      return single.toString();
	    })).join("  \n");
	  };

	  Transaction.prototype.addFromValues = function(from) {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.addFromValues(from);
	      };
	    })(this));
	  };

	  Transaction.prototype.addToValues = function(to) {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.addToValues(to);
	      };
	    })(this));
	  };

	  Transaction.prototype.addProperties = function(properties) {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.addProperties(properties);
	      };
	    })(this));
	  };

	  Transaction.prototype.addObject = function(obj) {
	    var oi;
	    oi = new SingleObjectTransaction(obj);
	    return this._objects.set(oi.object, oi);
	  };

	  Transaction.prototype.addObjects = function(objects) {
	    var i, len, obj, results;
	    results = [];
	    for (i = 0, len = objects.length; i < len; i++) {
	      obj = objects[i];
	      results.push(this.addObject(obj));
	    }
	    return results;
	  };

	  Transaction.prototype.saveFromValues = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.saveFromValues();
	      };
	    })(this));
	  };

	  Transaction.prototype.saveToValues = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.saveToValues();
	      };
	    })(this));
	  };

	  Transaction.prototype.optimizeProperties = function() {
	    return this._objects.forEach((function(_this) {
	      return function(oi) {
	        return oi.optimizeProperties();
	      };
	    })(this));
	  };

	  Transaction.prototype.optimizeObjects = function() {
	    var objs;
	    objs = this._objects;
	    this._objects = new Map;
	    return objs.forEach((function(_this) {
	      return function(oi) {
	        if (!oi.noChanges) {
	          return _this._objects.set(oi.object, oi);
	        }
	      };
	    })(this));
	  };

	  return Transaction;

	})(BaseObject);


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Promise, WorkerRpc, debugPrefix, isFunction, isPlainArray, isString, isWebWorker, log, mergeInto, ref,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  slice = [].slice;

	BaseObject = __webpack_require__(30);

	Promise = __webpack_require__(25);

	log = __webpack_require__(19).log;

	ref = __webpack_require__(20), isPlainArray = ref.isPlainArray, isFunction = ref.isFunction, isString = ref.isString;

	mergeInto = __webpack_require__(52).mergeInto;

	isWebWorker = __webpack_require__(56).isWebWorker;


	/*
	WorkerRPC has two modes: singleton and instanced.

	SINGLETON:
	  Including WorkerRPC automatically creates the singleton instance.
	  In a worker, the singleton automatically binds to the worker's self.onmessage and starts listenting.
	  In workers or the browser, any handler registered with the singleton will be available to respond
	  to any message received by the singleton OR ANY OTHER INSTANCE of WorkerRPC in that thread.
	  You can think of the singleton as the global registry for handlers.

	In practice:
	  In browser:
	     * to register all your handlers, call this one or more times:
	    WorkerRpc.register ...

	     * call for each each worker you want to listen for RPC calls from,
	     * and bind any remote procedures you want to be able to invoke on that specific worker-thread
	    aBoundWorker = new WorkerRpc worker,
	      bind: ...
	      bindWithPromises: ...

	     * to make remote-procedure-calls to the worker:
	     * NOTE: if registered with bindWithPromises, will return a promise for the RPC's result.
	    aBoundWorker.MyWorkerNamespace.myWorkerFunction ...

	  In worker:
	     * to register all your handlers, call this one or more times:
	    WorkerRpc.register ...

	     * bind any remote procedures you want to be able to invoke on the browser-thread
	    WorkerRpc.bind ...
	    WorkerRpc.bindWithPromises ...

	NOTES:
	  registered functions are invoked with @/this set to the namespace. That way you can invoke
	  callback functions you previously bound back to the specific worker that invoked the
	  function with: @MyWorkerNamespace.myWorkerFunction()

	Real world example:

	  Suppose you want to access the localStorage object on the browser thread from your worker.
	  The 6 lines of code below create the 'self.asyncLocalStorage' object which works just like
	  'localStorage' except it returns Art.Foundation.Promises for the function results.

	  browser: (before starting the worker)
	    {WorkerRpc} = Art.Foundation
	    WorkerRpc.register localStorage: localStorage
	    new WorkerRpc workerSourcePath

	  worker:
	    {workerRpc} = Art.Foundation.WorkerRpc
	    workerRpc.bindWithPromises localStorage: ["getItem", "setItem", "removeItem", "clear"]
	    self.asyncLocalStorage = workerRpc.localStorage

	  SBD: Isn't that nice! So streamlined!

	General examples:

	Usage with no return value expected:
	  browser thread:

	    new WorkerRpc (new Worker workerUrl),
	      register:
	        MyMainNamespace:
	          doWork: (a) -> ...

	  worker thread:

	    {MyMainNamespace} = new WorkerRpc self,
	      bind:
	        MyMainNamespace: ["doWork"]

	    MyMainNamespace.doWork myStructuredData

	Usage with promises:

	  browser thread:

	    new WorkerRpc (new Worker workerUrl),
	      register:
	        MyMainNamespace:
	          concatStrings: (a, b) ->
	            a + b
	             * equivelent to: Promise.resolve a + b
	             * if the result is not a Promse, Promise.resolve(result) is automatically applied

	  worker thread:

	    {MyMainNamespace} = new WorkerRpc self,
	      bindWithPromises:
	        MyMainNamespace: ["concatStrings"]

	    MyMainNamespace.concatStrings "hi ", "Shane"
	    .then (result) ->
	       * result == "hi Shane"

	Usage with arbitrary response messages:

	  Sometimes you want a handle to the workerRpc instance for the thread that just send
	  you the message inside your registered response functions. You can access that
	  via the global: WorkerRpc.lastMessageReceivedFrom.

	  browser thread:

	    new WorkerRpc (new Worker workerUrl),
	      register:
	        MyMainNamespace:
	          doWorkAndRespond: (key) ->
	            count == 0
	            invokeThreeTimes =>
	              count++
	              WorkerRpc.lastMessageReceivedFrom.MyWorkerNamespace.respond key, count

	  worker thread:

	    {MyMainNamespace} = new WorkerRpc self,
	      register:
	        MyWorkerNamespace:
	          respond: (key, count) -> console.log "MyWorkerNamespace#respond: #{key} #{count}"
	      bind:
	        MyMainNamespace: ["doWorkAndRespond"]

	    MyMainNamespace.doWorkAndRespond "myKey"

	Usage - add to global registery:

	  WorkerRpc.register
	    MyGlobalClass:
	      doSomethingNoMatterWhoCalls: ->
	        ...
	 */

	debugPrefix = isWebWorker ? "WorkerRpc(worker)" : "WorkerRpc(browser)";

	module.exports = WorkerRpc = (function(superClass) {
	  extend(WorkerRpc, superClass);

	  WorkerRpc.singletonClass();

	  WorkerRpc.register = function(toRegister) {
	    return WorkerRpc.singleton.register(toRegister);
	  };

	  WorkerRpc.bind = function(toBind) {
	    return WorkerRpc.singleton._bind(toBind, false);
	  };

	  WorkerRpc.bindWithPromises = function(toBind) {
	    return WorkerRpc.singleton._bind(toBind, true);
	  };


	  /*
	  INPUT:
	    thread:
	      must implement onmessage= and postMessage or be null
	      In a webworker, this gets set to self if it is null.
	    options:
	      bind: map # invokes: @bind map
	      bindWithPromises: map # invokes: @bindWithPromises map
	   */

	  function WorkerRpc(thread, options) {
	    if (isString(thread)) {
	      log("WorkerRpc starting worker: " + thread);
	      thread = new Worker(thread);
	      log("WorkerRpc starting worker: " + thread + ", started?:", thread);
	    }
	    if (!(thread || self === self.window)) {
	      thread = self;
	    }
	    this._reset();
	    this._bindOnmessage(this._thread = thread);
	    if (options) {
	      this._applyOptions(options);
	    }
	  }

	  WorkerRpc.prototype.register = function(toRegister) {
	    var functionMap, namespaceName;
	    if (!toRegister) {
	      return;
	    }
	    for (namespaceName in toRegister) {
	      functionMap = toRegister[namespaceName];
	      if (this._registry.hasOwnProperty(namespaceName)) {
	        mergeInto(this._registry[namespaceName], functionMap);
	      } else {
	        this._registry[namespaceName] = functionMap;
	      }
	    }
	    return this._registry;
	  };


	  /*
	  Creates functions to make specific remote-procedure-calls.
	  
	  IN:
	    toBind: map to arrays of strings
	      Each key in the map specifies a namespace.
	      The array of strings specify the names of each RPC you want to be able to invoke.
	  
	  For a given namespaceName and functionName, this binds the function so you can
	  invoke it as follows:
	    @myNamespaceName.myFunctionName()
	  
	  The created functions are one-way. They return null as soon as the message has been sent
	  to the remote thread. If you want the results, see @bindWithPromises
	   */

	  WorkerRpc.prototype.bind = function(toBind) {
	    return this._bind(toBind, false);
	  };


	  /*
	  Same as @bind except each function created will return a promise which will return
	  the results return from the remote procedure call when they are ready.
	   */

	  WorkerRpc.prototype.bindWithPromises = function(toBind) {
	    return this._bind(toBind, true);
	  };

	  WorkerRpc.prototype._bind = function(toBind, withPromises) {
	    var functionName, functionNames, i, len, namespace, namespaceName, ref1;
	    if (!isFunction((ref1 = this._thread) != null ? ref1.postMessage : void 0)) {
	      throw new Error("@_thread.postMessage required for remote requests");
	    }
	    if (!toBind) {
	      return;
	    }
	    for (namespaceName in toBind) {
	      functionNames = toBind[namespaceName];
	      if (!this.hasOwnProperty(namespaceName)) {
	        this[namespaceName] = {};
	      }
	      namespace = this[namespaceName];
	      for (i = 0, len = functionNames.length; i < len; i++) {
	        functionName = functionNames[i];
	        namespace[functionName] = withPromises ? this._newRemoteRequestFunctionWithPromise(namespaceName, functionName) : this._newRemoteRequestFunction(namespaceName, functionName);
	      }
	    }
	    return null;
	  };

	  WorkerRpc.prototype._reset = function() {
	    return this._registry = {
	      promiseCallback: {
	        success: (function(_this) {
	          return function(promiseId, result) {
	            return WorkerRpc._resolvePromise(promiseId, result);
	          };
	        })(this),
	        error: (function(_this) {
	          return function(promiseId, error) {
	            return WorkerRpc._rejectPromise(promiseId, error);
	          };
	        })(this)
	      }
	    };
	  };

	  WorkerRpc.prototype._applyOptions = function(arg) {
	    var bind, bindWithPromises, register;
	    register = arg.register, bind = arg.bind, bindWithPromises = arg.bindWithPromises;
	    this.register(register);
	    this.bind(bind);
	    this.bindWithPromises(bindWithPromises);
	    return this;
	  };

	  WorkerRpc.prototype._send = function(namespaceName, functionName, promiseId, args) {
	    return this._thread.postMessage([namespaceName, functionName, promiseId, args]);
	  };

	  WorkerRpc.prototype._newRemoteRequestFunctionWithPromise = function(namespaceName, functionName) {
	    return (function(_this) {
	      return function() {
	        var args;
	        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	        return WorkerRpc._bindPromise(function(promiseId) {
	          return _this._send(namespaceName, functionName, promiseId, args);
	        });
	      };
	    })(this);
	  };

	  WorkerRpc.prototype._newRemoteRequestFunction = function(namespaceName, functionName) {
	    return (function(_this) {
	      return function() {
	        var args;
	        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	        return _this._send(namespaceName, functionName, null, args);
	      };
	    })(this);
	  };

	  WorkerRpc.prototype._bindOnmessage = function(thread) {
	    return thread != null ? thread.onmessage = (function(_this) {
	      return function(arg) {
	        var args, data, functionName, namespaceName, promiseId;
	        data = arg.data;
	        if (!isPlainArray(data)) {
	          return console.warn(debugPrefix + ": data was not an array", data);
	        }
	        namespaceName = data[0], functionName = data[1], promiseId = data[2], args = data[3];
	        return _this._invokeLocalFunction(namespaceName, functionName, promiseId, args);
	      };
	    })(this) : void 0;
	  };

	  WorkerRpc.prototype._invokeLocalFunction = function(namespaceName, functionName, promiseId, args) {
	    var localFunction, namespace, singleton;
	    if ((namespace = this._registry[namespaceName]) && (localFunction = namespace[functionName])) {
	      localFunction;
	    } else {
	      singleton = WorkerRpc.singleton;
	      if (this !== singleton && (namespace = singleton._registry[namespaceName]) && (localFunction = namespace[functionName])) {
	        localFunction;
	      }
	    }
	    if (!localFunction) {
	      console.warn(debugPrefix + "_onmessage: could not find: '" + namespaceName + "." + functionName + "'\n\nnamespaces: " + (Object.keys(this._registry).join(', ')) + "\nglobal namespaces: " + (singleton === this ? "(same)" : Object.keys(singleton._registry).join(', ')));
	    }
	    if (localFunction) {
	      WorkerRpc.lastMessageReceivedFrom = this;
	      return this._resolveOrRejectRemotePromise(promiseId, localFunction.apply(namespace, args));
	    }
	  };

	  WorkerRpc.prototype._resolveOrRejectRemotePromise = function(promiseId, result) {
	    if (promiseId == null) {
	      return;
	    }
	    return Promise.resolve(result).then((function(_this) {
	      return function(result) {
	        return _this._send("promiseCallback", "success", null, [promiseId, result], function(error) {
	          return _this._send("promiseCallback", "error", null, [promiseId, error]);
	        });
	      };
	    })(this));
	  };


	  /*
	  IN:   f: (promiseId) -> ignored
	  OUT:  promise
	  
	  Creates a new promise, addes it to @_promises with a unique id, and invokes f, passing in
	  the promise's id.
	   */

	  WorkerRpc._promises = {};

	  WorkerRpc._nextPromiseId = 0;

	  WorkerRpc._bindPromise = function(f) {
	    var promise, promiseId;
	    this._promises[promiseId = this._nextPromiseId++] = promise = new Promise;
	    f(promiseId);
	    return promise;
	  };

	  WorkerRpc._resolvePromise = function(promiseId, result) {
	    var ref1;
	    if ((ref1 = this._promises[promiseId]) != null) {
	      ref1.resolve(result);
	    }
	    return delete this._promises[promiseId];
	  };

	  WorkerRpc._rejectPromise = function(promiseId, error) {
	    var ref1;
	    if ((ref1 = this._promises[promiseId]) != null) {
	      ref1.reject(error);
	    }
	    return delete this._promises[promiseId];
	  };

	  return WorkerRpc;

	})(BaseObject);


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	var Binary;

	module.exports = Binary = __webpack_require__(69);

	Binary.BinaryString = __webpack_require__(70);

	Binary.EncodedImage = __webpack_require__(72);

	Binary.File = __webpack_require__(76);

	Binary.Stream = __webpack_require__(77);

	Binary.Utf8 = __webpack_require__(71);

	Binary.finishLoad(["BinaryString", "EncodedImage", "File", "Stream", "Utf8"]);


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(13);

	module.exports = Foundation.Binary || (Foundation.Binary = (function(superClass) {
	  extend(Binary, superClass);

	  function Binary() {
	    return Binary.__super__.constructor.apply(this, arguments);
	  }

	  Binary.namespace = Foundation;

	  Binary.namespacePath = "Neptune.Art.Foundation.Binary";

	  return Binary;

	})(Neptune.Base));

	Foundation.addNamespace(Foundation.Binary);


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, BinaryString, Types, Utf8, encodings, isFunction, isString, readFileAsDataUrl;

	Binary = __webpack_require__(69);

	Utf8 = __webpack_require__(71);

	Types = __webpack_require__(20);

	isString = Types.isString, isFunction = Types.isFunction;

	readFileAsDataUrl = __webpack_require__(57).readFileAsDataUrl;

	encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	Binary.binary = function(arg) {
	  if (arg instanceof BinaryString) {
	    return arg;
	  } else {
	    return new BinaryString(arg);
	  }
	};

	module.exports = BinaryString = (function() {
	  BinaryString.binary = Binary.binary;

	  BinaryString.cloneUint8Array = function(srcU8A) {
	    var dstU8A;
	    dstU8A = new Uint8Array(new ArrayBuffer(src.length));
	    dstU8A.set(srcU8A);
	    return dstU8A;
	  };

	  function BinaryString(arg) {
	    this.bytes = (function() {
	      if (arg instanceof BinaryString) {
	        return BinaryString.cloneUint8Array(arg.bytes);
	      } else if (isFunction(arg.uint8Array)) {
	        return arg.uint8Array();
	      } else if (arg instanceof ArrayBuffer) {
	        return new Uint8Array(arg);
	      } else if (arg instanceof Uint8Array) {
	        return arg;
	      } else if (isString(arg)) {
	        return Utf8.toBuffer(arg);
	      } else {
	        throw new Error("invalid argument: " + arg);
	      }
	    })();
	    this.length = this.bytes.length;
	  }

	  BinaryString.fromBase64 = function(base64encoding) {
	    var byteString, i, j, len, ref, uInt8Array;
	    byteString = atob(base64encoding);
	    len = byteString.length;
	    uInt8Array = new Uint8Array(new ArrayBuffer(len));
	    for (i = j = 0, ref = len; j < ref; i = j += 1) {
	      uInt8Array[i] = byteString.charCodeAt(i);
	    }
	    return new BinaryString(uInt8Array);
	  };

	  BinaryString.prototype.toDataUri = function(callback) {
	    if (callback) {
	      throw new Error("BinaryString.toImage: callback is no longer supported; use returned Promise");
	    }
	    return readFileAsDataUrl(new Blob([this.bytes]));
	  };

	  BinaryString.fromDataUri = function(dataURI) {
	    var base64encoding, splitDataURI;
	    splitDataURI = dataURI.split(',');
	    base64encoding = splitDataURI[1];
	    return this.fromBase64(base64encoding);
	  };

	  BinaryString.prototype.toString = function() {
	    return Utf8.toString(this.bytes);
	  };

	  BinaryString.prototype.toArrayBuffer = function() {
	    return this.bytes.buffer;
	  };

	  BinaryString.prototype.toBlob = function() {
	    return new Blob([this.bytes]);
	  };


	  /*
	  toBase64 performance
	  see: http://localhost:8080/webpack-dev-server/perf?grep=BinaryString
	  as-of 2016-02-14, the manual string manipulation version is surprisingly the best on average for FF, Chrome and Safari
	    For shorter lengths, toBase64Custom is by far the fastest, but
	    toBase64ToDataUri starts to be faster at longer lengths.
	   */

	  BinaryString.prototype.toBase64 = function() {
	    if (this.length > 16 * 1024) {
	      return this.toBase64ToDataUri();
	    } else {
	      return this.toBase64Custom();
	    }
	  };

	  BinaryString.prototype.toBase64ToDataUri = function() {
	    return this.toDataUri().then(function(dataUri) {
	      return dataUri.split(',')[1];
	    });
	  };

	  BinaryString.prototype.toBase64Custom = function() {
	    var a, b, base64, byteLength, byteRemainder, bytes, c, chunk, d, i, j, mainLength, ref;
	    bytes = this.bytes;
	    base64 = '';
	    byteLength = bytes.byteLength;
	    byteRemainder = byteLength % 3;
	    mainLength = byteLength - byteRemainder;
	    for (i = j = 0, ref = mainLength - 1; j <= ref; i = j += 3) {
	      chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];
	      a = (chunk & 16515072) >> 18;
	      b = (chunk & 258048) >> 12;
	      c = (chunk & 4032) >> 6;
	      d = chunk & 63;
	      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d];
	    }
	    return Promise.resolve((function() {
	      switch (byteRemainder) {
	        case 0:
	          return base64;
	        case 1:
	          chunk = bytes[mainLength];
	          a = (chunk & 252) >> 2;
	          b = (chunk & 3) << 4;
	          return base64 + encodings[a] + encodings[b] + '==';
	        case 2:
	          chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1];
	          a = (chunk & 64512) >> 10;
	          b = (chunk & 1008) >> 4;
	          c = (chunk & 15) << 2;
	          return base64 + encodings[a] + encodings[b] + encodings[c] + '=';
	      }
	    })());
	  };

	  return BinaryString;

	})();


/***/ },
/* 71 */
/***/ function(module, exports) {

	var Utf8;

	module.exports = Utf8 = (function() {
	  function Utf8() {}

	  Utf8.toBuffer = function(string) {
	    return new Uint8Array(this.toArray(string));
	  };

	  Utf8.toArray = function(string) {
	    var char, i, results, uriEncoded;
	    uriEncoded = encodeURIComponent(string);
	    i = 0;
	    results = [];
	    while (i < uriEncoded.length) {
	      char = uriEncoded.charCodeAt(i++);
	      if (char === 0x25) {
	        i += 2;
	        results.push(parseInt(uriEncoded.substr(i - 2, 2), 16));
	      } else {
	        results.push(char);
	      }
	    }
	    return results;
	  };

	  Utf8.toString = function(a) {
	    var error, error1, x, y;
	    if (a === void 0) {
	      return "<undefined>";
	    }
	    if (a === null) {
	      return "<null>";
	    }
	    try {
	      if (a instanceof ArrayBuffer) {
	        a = new Uint8Array(a);
	      }
	      return decodeURIComponent(((function() {
	        var j, len, results;
	        results = [];
	        for (j = 0, len = a.length; j < len; j++) {
	          x = a[j];
	          y = x.toString(16);
	          if (y.length < 2) {
	            y = "0" + y;
	          }
	          results.push("%" + y);
	        }
	        return results;
	      })()).join(''));
	    } catch (error1) {
	      error = error1;
	      return "<" + a.length + " binary bytes>";
	    }
	  };

	  return Utf8;

	})();


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var EncodedImage, File, Inspect, Log, Promise, binary, inspect, log;

	Inspect = __webpack_require__(40);

	Log = __webpack_require__(19);

	binary = __webpack_require__(70).binary;

	Promise = __webpack_require__(25);

	File = __webpack_require__(73);

	inspect = Inspect.inspect;

	log = Log.log;

	module.exports = EncodedImage = (function() {
	  function EncodedImage() {}

	  EncodedImage.get = function(url, callback) {
	    if (callback) {
	      throw new Error("EncodedImage.get: callback is no longer supported; use returned Promise");
	    }
	    return new Promise(function(resolve, reject) {
	      var image;
	      image = new Image;

	      /*
	      NOTE: This crossOrigin setting makes file:// urls not work with WkWebKit
	      image.crossOrigin = "Anonymous"
	      
	      Odly, everything currently seems to work without it. I thought it was required to request
	      remote images. I'm leaving it commented out here in case we have future problems. It is
	      possible we could included it only if the url is not a file:// url.
	       */
	      image.onload = function() {
	        if (typeof callBack === "function") {
	          callBack(image);
	        }
	        return resolve(image);
	      };
	      image.onerror = function(e) {
	        self.encodedImageErrorEvent = e;
	        console.log("EncodedImage.get error START");
	        console.log("self.encodedImageErrorEvent = e");
	        console.log(e);
	        console.log(e.currentTarget);
	        console.log(e.target);
	        console.log(image);
	        console.log("image status");
	        console.log(image.status);
	        console.log("EncodedImage.get error END");
	        return reject(e);
	      };
	      return image.src = url;
	    });
	  };


	  /*
	  data can be a data URI or
	  data can be any type Binary.String.binary accepts
	  
	  OUT:
	    promise.then (dataUri) ->
	    , (errorEventOrErrorObject) ->
	   */

	  EncodedImage.toDataUri = function(data, callback) {
	    var p;
	    if (callback) {
	      throw new Error("EncodedImage.toDataUri: callback is no longer supported; use returned Promise");
	    }
	    p = data instanceof self.File ? new Promise((function(_this) {
	      return function(resolve, reject) {
	        var reader;
	        reader = new FileReader;
	        reader.readAsDataURL(data);
	        reader.onerror = function(e) {
	          console.warn("EncodedImage.toDataUri: Image loading failed. Error was not handled.\n  data: " + (inspect(data)));
	          return reject(error);
	        };
	        return reader.onload = function(e) {
	          return _this.toDataUri(e.target.result).then(function(dataUri) {
	            return resolve(dataUri, function(error) {
	              return reject(error);
	            });
	          });
	        };
	      };
	    })(this)) : data ? Promise.resolve(data) : Promise.reject("data not set");
	    return p.then(function(dataString) {
	      var dataStringUri;
	      return dataStringUri = (typeof dataString) === "string" && dataString.slice(0, 5) === "data:" ? dataString : binary(dataString).toBase64().then(function(base64) {
	        return "data:image/png;base64," + base64;
	      });
	    });
	  };


	  /*
	  OUT:
	    promise.then (fullyLoadedHtmlImage) ->
	    , (htmlImageOnerrorEvent) ->
	   */

	  EncodedImage.loadImage = function(source) {
	    return new Promise(function(resolve, reject) {
	      var image;
	      image = new Image;
	      image.onload = function() {
	        return resolve(image);
	      };
	      image.onerror = function(e) {
	        return reject(e);
	      };
	      return image.src = self.source = source;
	    });
	  };

	  EncodedImage.toImage = function(data, callback) {
	    if (callback) {
	      throw new Error("EncodedImage.toImage: callback is no longer supported; use returned Promise");
	    }
	    return this.toDataUri(data).then((function(_this) {
	      return function(dataUri) {
	        return _this.loadImage(dataUri);
	      };
	    })(this));
	  };

	  return EncodedImage;

	})();


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var File, Promise, createElementFromHtml;

	createElementFromHtml = __webpack_require__(74).createElementFromHtml;

	Promise = __webpack_require__(25);

	module.exports = File = (function() {
	  function File() {}

	  File.request = function(options) {
	    if (options == null) {
	      options = {};
	    }
	    return new Promise(function(resolve, reject) {
	      var accept, body, fileInput, multiple, onChange, ref;
	      accept = options.accept, multiple = options.multiple, onChange = options.onChange;
	      if ((ref = this.hiddenDivForFileInput) != null) {
	        ref.parentNode.removeChild(this.hiddenDivForFileInput);
	      }
	      this.hiddenDivForFileInput = createElementFromHtml("<div style='height: 0px;width: 0px; overflow:hidden; position:absolute;'/>");
	      body = document.body;
	      fileInput = createElementFromHtml("<input type='file' " + (accept ? 'accept=' + accept : void 0) + " " + (multiple ? 'multiple=true' : void 0) + "/>");
	      this.hiddenDivForFileInput.appendChild(fileInput);
	      body.appendChild(this.hiddenDivForFileInput);
	      fileInput.onchange = function(e) {
	        var file, fileList, fileSizes, fileTypes;
	        fileList = (function() {
	          var i, len, ref1, results;
	          ref1 = fileInput.files;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            file = ref1[i];
	            results.push(file);
	          }
	          return results;
	        })();
	        fileTypes = (function() {
	          var i, len, results;
	          results = [];
	          for (i = 0, len = fileList.length; i < len; i++) {
	            file = fileList[i];
	            results.push(file.type);
	          }
	          return results;
	        })();
	        fileSizes = (function() {
	          var i, len, results;
	          results = [];
	          for (i = 0, len = fileList.length; i < len; i++) {
	            file = fileList[i];
	            results.push(file.size);
	          }
	          return results;
	        })();
	        if (fileList.length > 0 && fileList[0]) {
	          onChange && onChange(fileList);
	          return resolve(fileList);
	        } else {
	          return reject("no files returned");
	        }
	      };
	      return fileInput.click();
	    });
	  };

	  return File;

	})();


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var $$, Dom;

	if (self.window) {
	  $$ = __webpack_require__(75).$$;
	}

	module.exports = Dom = (function() {
	  function Dom() {}

	  Dom.createElementFromHtml = function(html) {
	    var div;
	    div = document.createElement('div');
	    div.innerHTML = html;
	    return div.firstChild;
	  };

	  Dom.getDevicePixelRatio = function() {
	    return ((self.devicePixelRatio != null) && self.devicePixelRatio) || 1;
	  };

	  Dom.zIndex = function(target, setZIndex) {
	    var elem, value;
	    target = $$(target);
	    if (setZIndex !== void 0) {
	      return target.style.zIndex = setZIndex;
	    }
	    elem = $$(target[0]);
	    while (elem.length && elem[0] !== document) {
	      switch (elem.style.position) {
	        case "absolute":
	        case "relative":
	        case "fixed":
	          value = parseInt(elem.style.zIndex);
	          if (!isNaN(value) && value !== 0) {
	            return value;
	          }
	      }
	      elem = elem.parentNode;
	    }
	    return 0;
	  };

	  Dom.domElementOffset = function(elem) {
	    var body, box, clientLeft, clientTop, docEl, left, scrollLeft, scrollTop, top;
	    box = elem.getBoundingClientRect();
	    body = document.body;
	    docEl = document.documentElement;
	    scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
	    scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
	    clientTop = docEl.clientTop || body.clientTop || 0;
	    clientLeft = docEl.clientLeft || body.clientLeft || 0;
	    top = box.top + scrollTop - clientTop;
	    left = box.left + scrollLeft - clientLeft;
	    return {
	      top: Math.round(top),
	      left: Math.round(left)
	    };
	  };

	  return Dom;

	})();


/***/ },
/* 75 */
/***/ function(module, exports) {

	// SOURCE: https://github.com/eorroe/NodeList.js
	( function() {
	  var ArrayProto = Array.prototype, nodeError = new Error( 'Passed arguments must be of Node' ), NL, div, prop;
	  function flatten( arr, owner ) {
	    var elms = [], i = 0, l = arr.length, i2, l2, el;
	    for( ; i < l; i++ ) {
	      el = arr[ i ];
	      if( el instanceof Node || el == null ) {
	        if( elms.indexOf( el ) < 0 ) elms.push( el );
	      } else if( el instanceof window.NodeList || el instanceof NodeList || el instanceof HTMLCollection || el instanceof Array ) {
	        for( i2 = 0, l2 = el.length; i2 < l2; i2++ ) elms.push( el[i2] );
	      } else {
	        arr.get = NL.get; arr.set = NL.set; arr.call = NL.call; arr.owner = owner;
	        return arr;
	      }
	    }
	    return new NodeList( [ elms, owner ] );
	  }
	  function NodeList( args ) {
	    var i = 0, l, nodes = args;
	    if( typeof args[0] === 'string' ) {
	      nodes = ( args[1] || document ).querySelectorAll( args[0] );
	    } else if( 0 in args && !( args[0] instanceof Node ) && 'length' in args[0] ) {
	      nodes = args[0];
	      if( args[1] ) this.owner = args[1];
	    }
	    for( l = this.length = nodes.length; i < l; i++ ) this[ i ] = nodes[ i ];
	  }
	  NL = NodeList.prototype = {
	    includes: ArrayProto.includes || function includes( element, index ) {
	      return this.indexOf( element, index ) > -1;
	    },
	    forEach: function forEach() {
	      ArrayProto.forEach.apply( this, arguments );
	      return this;
	    },
	    push: function push() {
	      var push = ArrayProto.push.bind( this ), i = 0, l = arguments.length, arg;
	      for( ; i < l; i++ ) {
	        arg = arguments[ i ];
	        if( !( arg instanceof Node ) ) throw nodeError;
	        if( this.indexOf( arg ) < 0 ) push( arg );
	      }
	      return this;
	    },
	    pop: function pop( amount ) {
	      if( typeof amount !== "number" ) amount = 1;
	      var nodes = [], pop = ArrayProto.pop.bind( this ), i;
	      for( i = 0; i < amount; i++ ) nodes.push( pop() );
	      return new NodeList( [nodes, this] );
	    },
	    unshift: function unshift() {
	      var unshift = ArrayProto.unshift.bind( this ), i = 0, l = arguments.length, arg;
	      for( ; i < l; i++ ) {
	        arg = arguments[ i ];
	        if( !( arg instanceof Node ) ) throw nodeError;
	        if( this.indexOf(arg) < 0 ) unshift( arg );
	      }
	      return this;
	    },
	    shift: function shift( amount ) {
	      if( typeof amount !== "number" ) amount = 1;
	      var nodes = [], shift = ArrayProto.shift.bind( this ), i;
	      for( i = 0; i < amount; i++ ) nodes.push( shift() );
	      return new NodeList( [ nodes, this ] );
	    },
	    splice: function splice() {
	      for( var i = 2, l = arguments.length; i < l; i++ ) {
	        if( !( arguments[ i ] instanceof Node ) ) throw nodeError;
	      }
	      return new NodeList( [ ArrayProto.splice.apply( this, arguments ), this ] );
	    },
	    slice: function slice() {
	      return new NodeList( [ ArrayProto.slice.apply( this, arguments ), this ] );
	    },
	    filter: function filter() {
	      return new NodeList( [ ArrayProto.filter.apply( this, arguments ), this ] );
	    },
	    map: function map() {
	      return flatten( ArrayProto.map.apply( this, arguments ), this );
	    },
	    concat: function concat() {
	      var nodes = ArrayProto.slice.call(this), i = 0, l = arguments.length, arg;
	      function flatten( arr ) {
	        for( var i = 0, l = arr.length; i < l; i++ ) {
	          if( arr[ i ] instanceof Node ) {
	            if( nodes.indexOf( arr[ i ] ) < 0 ) nodes.push( arr[ i ] );
	          } else if( arr[ i ] ) {
	            flatten( arr[ i ] );
	          }
	        }
	      }
	      for( ; i < l; i++ ) {
	        arg = arguments[i];
	        if( arg instanceof Node ) {
	          if( nodes.indexOf( arg ) < 0 ) nodes.push( arg );
	        } else if( arg instanceof window.NodeList || arg instanceof NodeList || arg instanceof HTMLCollection || arg instanceof Array ) {
	          flatten( arg );
	        } else {
	          throw Error( 'Concat arguments must be of a Node, NodeList, HTMLCollection, or Array of (Node, NodeList, HTMLCollection, Array)' );
	        }
	      }
	      return new NodeList( [ nodes, this ] );
	    },
	    get: function get( prop ) {
	      var arr = [], i = 0, l = this.length, el;
	      for( ; i < l; i++ ) {
	        el = this[ i ];
	        if( el != null ) el = el[prop];
	        arr.push( el );
	      }
	      return flatten( arr, this );
	    },
	    set: function set( prop, value ) {
	      var i = 0, l = this.length, el, key;
	      if( prop.constructor === Object ) {
	        for( ; i < l; i++ ) {
	          el = this[ i ];
	          if( el ) {
	            for( key in prop ) {
	              if( key in el ) el[ key ] = prop[ key ];
	            }
	          }
	        }
	      } else {
	        for( ; i < l; i++ ) {
	          el = this[ i ];
	          if( el && prop in el ) el[ prop ] = value;
	        }
	      }
	      return this;
	    },
	    call: function call() {
	      var arr = [], method = ArrayProto.shift.call( arguments ), returnThis = true, i = 0, l = this.length, el;
	      for( ; i < l; i++ ) {
	        el = this[ i ];
	        if( el && el[ method ] instanceof Function ) {
	          el = el[ method ].apply( el, arguments );
	          arr.push( el );
	          if( returnThis && el !== undefined ) returnThis = false;
	        } else {
	          arr.push( undefined );
	        }
	      }
	      return returnThis ? this : flatten( arr, this );
	    },
	    item: function( index ) {
	      return new NodeList( [ [ this[ index ] ], this ] );
	    },
	    get asArray() {
	      return ArrayProto.slice.call( this );
	    }
	  }
	  Object.getOwnPropertyNames( ArrayProto ).forEach( function( key ) {
	    if( key !== 'join' && key !== 'copyWithin' && key !== 'fill' && NL[ key ] === undefined ) {
	      NL[ key ] = ArrayProto[ key ];
	    }
	  });
	  if( window.Symbol && Symbol.iterator ) NL[ Symbol.iterator ] = NL.values = ArrayProto[ Symbol.iterator ];
	  function setterGetter( prop ) {
	    if( div[ prop ] instanceof Function ) {
	      NL[ prop ] = function() {
	        var arr = [], returnThis = true, i = 0, l = this.length, el;
	        for( ; i < l; i++ ) {
	          el = this[ i ];
	          if( el && el[ prop ] instanceof Function ) {
	            el = el[ prop ].apply( el, arguments );
	            arr.push( el );
	            if( returnThis && el !== undefined ) returnThis = false;
	          } else {
	            arr.push( undefined );
	          }
	        }
	        return returnThis ? this : flatten( arr, this );
	      }
	    } else {
	      Object.defineProperty( NL, prop, {
	        get: function() {
	          var arr = [], i = 0, l = this.length, el;
	          for( ; i < l; i++ ) {
	            el = this[ i ];
	            if( el != null ) el = el[prop];
	            arr.push( el );
	          }
	          return flatten( arr, this );
	        },
	        set: function( value ) {
	          for( var i = 0, l = this.length, el; i < l; i++ ) {
	            el = this[ i ];
	            if( el && prop in el ) el[ prop ] = value;
	          }
	        }
	      });
	    }
	  }
	  div = document.createElement( 'div' );
	  for( prop in div ) setterGetter( prop );
	  div = prop = null;
	  module.exports = {}
	  module.exports.$$ = function NodeListJS() {
	    return new NodeList( arguments );
	  }
	  module.exports.$$.NL = NL;
	})();


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var File, Promise;

	Promise = __webpack_require__(25);

	module.exports = File = (function() {
	  function File() {}

	  File.readAsArrayBuffer = function(file) {
	    return new Promise(function(resolve, reject) {
	      var fr;
	      fr = new FileReader;
	      fr.readAsArrayBuffer(file);
	      fr.onerror = (function(_this) {
	        return function(event) {
	          return reject(event);
	        };
	      })(this);
	      return fr.onload = (function(_this) {
	        return function(event) {
	          return resolve(event.target.result);
	        };
	      })(this);
	    });
	  };

	  return File;

	})();


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, Stream, binary;

	Binary = __webpack_require__(69);

	binary = __webpack_require__(70).binary;

	Binary.stream = function(arg) {
	  if (arg instanceof Binary.Stream) {
	    return arg;
	  } else if (arg instanceof ArrayBuffer) {
	    return Binary.Stream.from_array_buffer(arg);
	  } else if (arg instanceof Uint8Array) {
	    return new Binary.Stream(arg);
	  } else {
	    return new Binary.Stream(binary(arg).bytes);
	  }
	};

	module.exports = Stream = (function() {
	  Stream.from_array_buffer = function(array_buffer) {
	    return new Binary.Stream(new Uint8Array(array_buffer, 0, array_buffer.byteLength));
	  };

	  function Stream(byte_view) {
	    this.byte_view = byte_view;
	    this.pos = 0;
	  }

	  Stream.prototype.read_byte = function() {
	    return this.byte_view[this.pos++];
	  };

	  Stream.prototype.read_asi = function() {
	    var debug, ret, shift, val;
	    debug = this.inspect();
	    ret = 0;
	    shift = 0;
	    val = 128;
	    while (val >= 128) {
	      val = this.read_byte();
	      ret += (val % 128) << shift;
	      shift += 7;
	    }
	    return ret;
	  };

	  Stream.prototype.uint8Array = function() {
	    return this.byte_view;
	  };

	  Stream.prototype.read = function(length) {
	    var begin, end;
	    begin = this.pos;
	    this.pos += length;
	    end = this.pos;
	    return new Binary.Stream(this.byte_view.subarray(begin, end));
	  };

	  Stream.prototype.inspect = function() {
	    return "{Binary.Stream pos=" + this.pos + " byteOffset=" + this.byte_view.byteOffset + " length=" + this.byte_view.length + "}";
	  };

	  Stream.prototype.read_asi_string = function() {
	    return this.read(this.read_asi());
	  };

	  Stream.prototype.done = function() {
	    return this.pos >= this.byte_view.length;
	  };

	  Stream.prototype.toString = function() {
	    return binary(this.byte_view).toString();
	  };

	  return Stream;

	})();


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var Browser;

	module.exports = Browser = __webpack_require__(79);

	Browser.Cookie = __webpack_require__(80);

	Browser.Dom = __webpack_require__(74);

	Browser.File = __webpack_require__(73);

	Browser.Parse = __webpack_require__(32);

	Browser.finishLoad(["Cookie", "Dom", "File", "Parse"]);


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(13);

	module.exports = Foundation.Browser || (Foundation.Browser = (function(superClass) {
	  extend(Browser, superClass);

	  function Browser() {
	    return Browser.__super__.constructor.apply(this, arguments);
	  }

	  Browser.namespace = Foundation;

	  Browser.namespacePath = "Neptune.Art.Foundation.Browser";

	  return Browser;

	})(Neptune.Base));

	Foundation.addNamespace(Foundation.Browser);


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Browser, getCookie, isPlainArray, isPlainObject, isString, log, ref, setCookie,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Browser = __webpack_require__(79);

	log = __webpack_require__(19).log;

	BaseObject = __webpack_require__(30);

	ref = __webpack_require__(20), isString = ref.isString, isPlainArray = ref.isPlainArray, isPlainObject = ref.isPlainObject;

	setCookie = function(cookieName, cookieValue, arg) {
	  var cookieString, d, expires, path;
	  expires = arg.expires, path = arg.path;
	  if (!isString(cookieValue)) {
	    if (!(isPlainArray(cookieValue) || isPlainObject(cookieValue))) {
	      throw new Error("cookieValue must be a string, array or object");
	    }
	    cookieValue = JSON.stringify(cookieValue);
	  }
	  cookieString = cookieName + "=" + cookieValue;
	  if (expires) {
	    d = new Date();
	    d.setTime(d.getTime() + expires * 24 * 60 * 60 * 1000);
	    cookieString += "; expires=" + (d.toUTCString());
	  }
	  if (path) {
	    cookieString += "; path=" + path;
	  }
	  return document.cookie = cookieString;
	};

	getCookie = function(cookieName) {
	  var c, ca, i, len, name, value;
	  name = cookieName + "=";
	  ca = document.cookie.split(';');
	  for (i = 0, len = ca.length; i < len; i++) {
	    c = ca[i];
	    while (' ' === c.charAt(0)) {
	      c = c.substring(1);
	    }
	    if (0 === c.indexOf(name)) {
	      value = c.substring(name.length, c.length);
	      if (value.match(/^[{[]/)) {
	        value = JSON.parse(value);
	      }
	      return value;
	    }
	  }
	  return "";
	};

	Browser.Cookie = (function(superClass) {
	  extend(Cookie, superClass);

	  function Cookie() {
	    return Cookie.__super__.constructor.apply(this, arguments);
	  }

	  Cookie.set = function(name, value, options) {
	    return setCookie(name, value, options);
	  };

	  Cookie.get = function(name) {
	    return getCookie(name);
	  };

	  Cookie.remove = function(name, options) {
	    return setCookie(name, {
	      path: options.path,
	      expires: -1
	    });
	  };

	  return Cookie;

	})(BaseObject);


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(82);

	__webpack_require__(235);

	module.exports = __webpack_require__(250);


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(83);


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	var Engine;

	module.exports = Engine = __webpack_require__(84);

	Engine.All = __webpack_require__(86);

	Engine.FullScreenApp = __webpack_require__(209);

	Engine.Animation = __webpack_require__(203);

	Engine.Core = __webpack_require__(90);

	Engine.DevTools = __webpack_require__(221);

	Engine.Elements = __webpack_require__(87);

	Engine.Events = __webpack_require__(130);

	Engine.File = __webpack_require__(224);

	Engine.Forms = __webpack_require__(205);

	Engine.Layout = __webpack_require__(151);

	Engine.finishLoad(["All", "FullScreenApp"]);


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(85);

	module.exports = Art.Engine || (Art.Engine = (function(superClass) {
	  extend(Engine, superClass);

	  function Engine() {
	    return Engine.__super__.constructor.apply(this, arguments);
	  }

	  Engine.namespace = Art;

	  Engine.namespacePath = "Neptune.Art.Engine";

	  return Engine;

	})(Neptune.Base));

	Art.addNamespace(Art.Engine);


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var Animation, Elements, Engine, Forms, Foundation, createAllClass, select;

	Foundation = __webpack_require__(11);

	Engine = __webpack_require__(84);

	Elements = __webpack_require__(87);

	Animation = __webpack_require__(203);

	Forms = __webpack_require__(205);

	createAllClass = Foundation.createAllClass, select = Foundation.select;

	module.exports = createAllClass(Engine, Elements, Forms, Animation);


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	var Elements;

	module.exports = Elements = __webpack_require__(88);

	Elements.All = __webpack_require__(89);

	Elements.Base = __webpack_require__(180);

	Elements.FillableBase = __webpack_require__(179);

	Elements.Filters = __webpack_require__(191);

	Elements.ShapeChildren = __webpack_require__(199);

	Elements.Shapes = __webpack_require__(176);

	Elements.Widgets = __webpack_require__(196);

	Elements.finishLoad(["All", "Base", "FillableBase"]);


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Elements || (Engine.Elements = (function(superClass) {
	  extend(Elements, superClass);

	  function Elements() {
	    return Elements.__super__.constructor.apply(this, arguments);
	  }

	  Elements.namespace = Engine;

	  Elements.namespacePath = "Neptune.Art.Engine.Elements";

	  return Elements;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Elements);


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var Core, Elements, Filters, Foundation, ShapeChildren, Shapes, Widgets, createAllClass;

	Foundation = __webpack_require__(11);

	Core = __webpack_require__(90);

	Elements = __webpack_require__(88);

	createAllClass = Foundation.createAllClass;

	createAllClass(Elements, Shapes = __webpack_require__(176), Filters = __webpack_require__(191), Widgets = __webpack_require__(196), ShapeChildren = __webpack_require__(199), {
	  Blur: Filters.BlurElement,
	  Shadow: Filters.ShadowElement,
	  Rectangle: Shapes.RectangleElement,
	  Bitmap: Shapes.BitmapElement,
	  Fill: ShapeChildren.FillElement,
	  Outline: ShapeChildren.OutlineElement,
	  Element: Core.Element,
	  CanvasElement: Core.CanvasElement
	});


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var Core;

	module.exports = Core = __webpack_require__(91);

	Core.CanvasElement = __webpack_require__(92);

	Core.DrawCacheManager = __webpack_require__(170);

	Core.DrawEpoch = __webpack_require__(169);

	Core.Element = __webpack_require__(148);

	Core.ElementBase = __webpack_require__(159);

	Core.ElementFactory = __webpack_require__(160);

	Core.EngineStat = __webpack_require__(174);

	Core.EpochedObject = __webpack_require__(167);

	Core.EventedEpochedObject = __webpack_require__(161);

	Core.GlobalEpochCycle = __webpack_require__(168);

	Core.IdleEpoch = __webpack_require__(171);

	Core.StateEpoch = __webpack_require__(162);

	Core.Layout = __webpack_require__(175);

	Core.finishLoad(["CanvasElement", "DrawCacheManager", "DrawEpoch", "Element", "ElementBase", "ElementFactory", "EngineStat", "EpochedObject", "EventedEpochedObject", "GlobalEpochCycle", "IdleEpoch", "StateEpoch"]);


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Core || (Engine.Core = (function(superClass) {
	  extend(Core, superClass);

	  function Core() {
	    return Core.__super__.constructor.apply(this, arguments);
	  }

	  Core.namespace = Engine;

	  Core.namespacePath = "Neptune.Art.Engine.Core";

	  return Core;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Core);


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(104), __webpack_require__(129), __webpack_require__(130), __webpack_require__(148), __webpack_require__(168), __webpack_require__(169), __webpack_require__(174)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Webgl, Canvas, ArtEngineEvents, Element, GlobalEpochCycle, DrawEpoch, EngineStat) {
	  var Browser, CanvasElement, KeyEvent, Matrix, Point, PointerEvent, PointerEventManager, Rectangle, createWithPostCreate, currentSecond, domElementOffset, drawEpoch, durationString, first, getDevicePixelRatio, globalEpochCycle, inspect, log, matrix, nextTick, point, rect, ref, timeStampToPerformanceSecond, timeout;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  log = Foundation.log, inspect = Foundation.inspect, nextTick = Foundation.nextTick, currentSecond = Foundation.currentSecond, timeout = Foundation.timeout, durationString = Foundation.durationString, timeStampToPerformanceSecond = Foundation.timeStampToPerformanceSecond, first = Foundation.first, Browser = Foundation.Browser, createWithPostCreate = Foundation.createWithPostCreate;
	  ref = Browser.Dom, getDevicePixelRatio = ref.getDevicePixelRatio, domElementOffset = ref.domElementOffset;
	  PointerEventManager = ArtEngineEvents.PointerEventManager, PointerEvent = ArtEngineEvents.PointerEvent, KeyEvent = ArtEngineEvents.KeyEvent;
	  globalEpochCycle = GlobalEpochCycle.globalEpochCycle;
	  drawEpoch = DrawEpoch.drawEpoch;
	  return createWithPostCreate(CanvasElement = (function(superClass) {
	    extend(CanvasElement, superClass);

	    CanvasElement.classGetter({
	      devicePixelsPerPoint: function() {
	        return getDevicePixelRatio();
	      }
	    });

	    CanvasElement.prototype._updateRegistryFromPendingState = function() {
	      return null;
	    };

	    function CanvasElement(options) {
	      if (options == null) {
	        options = {};
	      }
	      this.canvasElement = this;
	      this._devicePixelsPerPoint = 1;
	      CanvasElement.__super__.constructor.apply(this, arguments);
	      if (!options.canvas && options.canvasId) {
	        options.canvas = document.getElementById(options.canvasId);
	      }
	      this._domEventListeners = [];
	      this.webgl = options.webgl;
	      if (!options.disableRetina) {
	        this.retinaSupport = true;
	      }
	      this._drawEpochPreprocessing = [];
	      this._drawEpochQueued = false;
	      this.noFPS = options.noFPS;
	      this._attach(options.canvas);
	      this.engineStat = new EngineStat;
	      this.pointerEventManager = new PointerEventManager({
	        canvasElement: this
	      });
	      self.canvasElement || (self.canvasElement = this);
	    }

	    CanvasElement.virtualProperty({
	      parentSizeForChildren: function(pending) {
	        return this.getParentSize(pending);
	      },
	      parentSize: function(pending) {
	        var h, w;
	        if (this._canvas) {

	          /*
	          When using HTML5 <!DOCTYPE html>, parentElement.clientWidth* doesn't work right
	          It appears that the canvas's size effects the parent's size. A feedback loop.
	          
	             * old:
	            point(
	              @_canvas.parentElement.clientWidth
	              @_canvas.parentElement.clientHeight
	            )
	          
	          For FullScreenApps, we just want to use the whole viewport anyway, so that's what I'm
	          doing right now. If we want to have apps in canvas elements which are not full-screen,
	          then we need to update this.
	           */
	          w = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
	          h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	          return point(w, h);
	        } else {
	          return point(100);
	        }
	      }
	    });

	    CanvasElement.prototype._domListener = function(target, type, listener) {
	      target.addEventListener(type, listener);
	      return this._domEventListeners.push({
	        target: target,
	        type: type,
	        listener: listener
	      });
	    };

	    CanvasElement.prototype.dettach = function() {
	      globalEpochCycle.dettachCanvasElement(this);
	      this._unregister();
	      return this._dettachDomEventListeners();
	    };

	    CanvasElement.prototype._dettachDomEventListeners = function() {
	      var i, len, listener, ref1;
	      ref1 = this._domEventListeners;
	      for (i = 0, len = ref1.length; i < len; i++) {
	        listener = ref1[i];
	        listener.target.removeEventListener(listener.type, listener.listener);
	      }
	      return this._domEventListeners = [];
	    };

	    CanvasElement.prototype.isFocused = function(el) {
	      return this.pointerEventManager.isFocused(el);
	    };

	    CanvasElement.prototype.focusElement = function(el) {
	      return this.pointerEventManager.focus(null, el);
	    };

	    CanvasElement.prototype.enableFileDrop = function() {
	      if (!window.FileReader) {
	        this.log(this.className + "#enableFileDrop failed - browser not supported");
	        return false;
	      }
	      this._domListener(window, 'dragover', (function(_this) {
	        return function(e) {
	          return _this.routeFileDropEvent(e, 'dragOver');
	        };
	      })(this));
	      this._domListener(window, 'dragenter', (function(_this) {
	        return function(e) {
	          return _this.routeFileDropEvent(e, 'dragEnter');
	        };
	      })(this));
	      this._domListener(window, 'dragleave', (function(_this) {
	        return function(e) {
	          return _this.routeFileDropEvent(e, 'dragLeave');
	        };
	      })(this));
	      this._domListener(window, 'drop', (function(_this) {
	        return function(e) {
	          return _this.routeFileDropEvent(e, 'drop');
	        };
	      })(this));
	      this.log(this.className + "#enableFileDrop enabled");
	      return true;
	    };

	    CanvasElement.prototype.routeFileDropEvent = function(e, type) {
	      if (e.dataTransfer.types[0] !== "Files") {
	        return true;
	      }
	      e.preventDefault();
	      this.pointerEventManager.fileDropEvent(type, {
	        locations: [this._domEventLocation(e)],
	        files: e.dataTransfer.files
	      });
	      return false;
	    };

	    CanvasElement.prototype._needsRedrawing = function(descendant) {
	      CanvasElement.__super__._needsRedrawing.apply(this, arguments);
	      return this.queueDrawEpoch();
	    };

	    CanvasElement.prototype._releaseAllCacheBitmaps = function() {};

	    CanvasElement.prototype.queueDrawEpoch = function() {
	      if (!this._drawEpochQueued) {
	        this._drawEpochQueued = true;
	        return drawEpoch.queueItem((function(_this) {
	          return function() {
	            return _this.processEpoch();
	          };
	        })(this));
	      }
	    };

	    CanvasElement.prototype.queueDrawEpochPreprocessor = function(f) {
	      this._drawEpochPreprocessing.push(f);
	      return this.queueDrawEpoch();
	    };

	    CanvasElement.prototype.processEpoch = function() {
	      var f, i, len, pp;
	      this._drawEpochQueued = false;
	      if (this._drawEpochPreprocessing.length > 0) {
	        pp = this._drawEpochPreprocessing;
	        this._drawEpochPreprocessing = [];
	        for (i = 0, len = pp.length; i < len; i++) {
	          f = pp[i];
	          f();
	        }
	      }
	      return this.draw();
	    };

	    CanvasElement.setter({
	      cssCursor: function(cursor) {
	        var ref1;
	        if (cursor !== this._cssCursor) {
	          if ((ref1 = this._canvas) != null) {
	            ref1.style.cursor = cursor;
	          }
	          return this._cssCursor = cursor;
	        }
	      }
	    });

	    CanvasElement.getter({
	      numActivePointers: function() {
	        return this.pointerEventManager.getNumActivePointers();
	      },
	      cacheable: function() {
	        return false;
	      },
	      canvasElement: function() {
	        return this;
	      },
	      cssCursor: function() {
	        return this._cssCursor;
	      },
	      windowScrollOffset: function() {
	        return point(window.scrollX, window.scrollY);
	      },
	      canvasInnerSize: function() {
	        return point(this._fullPageWidth ? window.innerWidth : this._canvas.clientWidth, this._fullPageHeight ? window.innerHeight : this._canvas.clientHeight);
	      }
	    });

	    CanvasElement.prototype._attach = function(canvas) {
	      globalEpochCycle.attachCanvasElement(this);
	      this.onNextReady((function(_this) {
	        return function() {
	          return _this._register();
	        };
	      })(this));
	      this._canvas = canvas;
	      this._retinaSetup();
	      if (canvas) {
	        this._updateCanvasGeometry();
	        return this._attachDomEventListeners();
	      }
	    };

	    CanvasElement.prototype._retinaSetup = function() {
	      return this._devicePixelsPerPoint = this.retinaSupport ? getDevicePixelRatio() : 1;
	    };

	    CanvasElement.prototype._sizeChanged = function(newSize, oldSize) {
	      CanvasElement.__super__._sizeChanged.apply(this, arguments);
	      this._pointSize = newSize;
	      this._canvas.style.width = newSize.x + "px";
	      this._canvas.style.height = newSize.y + "px";
	      this._pixelSize = this._pointSize.mul(this._devicePixelsPerPoint);
	      this._canvas.setAttribute("width", this._pixelSize.x);
	      this._canvas.setAttribute("height", this._pixelSize.y);
	      this._updateCanvasToDocumentMatricies();
	      this._bitmapFactory = this.canvasBitmap = this.webgl ? new Webgl.Bitmap(this._canvas) : new Canvas.Bitmap(this._canvas);
	      return this.queueDrawEpoch();
	    };

	    CanvasElement.prototype._updateCanvasGeometry = function() {
	      this._updateCanvasToDocumentMatricies();
	      this._layoutPropertyChanged();
	      return this._elementChanged();
	    };

	    CanvasElement.prototype._updateCanvasToDocumentMatricies = function() {
	      var left, ref1, top;
	      ref1 = domElementOffset(this._canvas), left = ref1.left, top = ref1.top;
	      this._canvasDocumentOffset = point(left, top);
	      this._elementToDocumentMatrix = Matrix.scale(1 / this._devicePixelsPerPoint).translateXY(left, top);
	      this._documentToElementMatrix = Matrix.translateXY(-left, -top).scale(this._devicePixelsPerPoint);
	      this._parentToElementMatrix = null;
	      this.setElementToParentMatrix(this._elementToAbsMatrix = Matrix.scale(this._devicePixelsPerPoint));
	      return this.queueEvent("documentMatriciesChanged");
	    };

	    CanvasElement.prototype._domEventLocation = function(domEvent) {
	      var windowScrollOffset, x, y;
	      windowScrollOffset = this.getWindowScrollOffset();
	      x = (domEvent.clientX + windowScrollOffset.x - this._canvasDocumentOffset.x) * this._devicePixelsPerPoint;
	      y = (domEvent.clientY + windowScrollOffset.y - this._canvasDocumentOffset.y) * this._devicePixelsPerPoint;
	      return new Point(x, y);
	    };

	    CanvasElement.prototype._attachResizeListener = function() {
	      return this._domListener(window, "resize", (function(_this) {
	        return function(domEvent) {
	          _this._updateCanvasGeometry();
	          return globalEpochCycle.processEpoch();
	        };
	      })(this));
	    };

	    CanvasElement.prototype._attachPointerMoveListeners = function() {
	      this._domListener(this._canvas, "mousemove", (function(_this) {
	        return function(domEvent) {
	          if (_this.numActivePointers === 0) {
	            return _this.mouseMove(_this._domEventLocation(domEvent, timeStampToPerformanceSecond(domEvent.timeStamp)));
	          }
	        };
	      })(this));
	      return this._domListener(window, "mousemove", (function(_this) {
	        return function(domEvent) {
	          if (_this.numActivePointers > 0) {
	            return _this.mouseMove(_this._domEventLocation(domEvent), timeStampToPerformanceSecond(domEvent.timeStamp));
	          }
	        };
	      })(this));
	    };

	    CanvasElement.getter({
	      numActivePointers: function() {
	        return this.pointerEventManager.numActivePointers;
	      },
	      activePointers: function() {
	        return this.pointerEventManager.activePointers;
	      }
	    });

	    CanvasElement.prototype.mouseDown = function(location, timeStampInPerformanceSeconds) {
	      this.pointerEventManager.mouseMove(location, timeStampInPerformanceSeconds);
	      return this.pointerEventManager.mouseDown(location, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.mouseMove = function(location, timeStampInPerformanceSeconds) {
	      return this.pointerEventManager.mouseMove(location, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.mouseUp = function(location, timeStampInPerformanceSeconds) {
	      this.pointerEventManager.mouseMove(location, timeStampInPerformanceSeconds);
	      return this.pointerEventManager.mouseUp(timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.touchDown = function(id, location, timeStampInPerformanceSeconds) {
	      console.log("touchDown " + location);
	      return this.pointerEventManager.pointerDown(id, location, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.touchMove = function(id, location, timeStampInPerformanceSeconds) {
	      return this.pointerEventManager.pointerMove(id, location, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.touchUp = function(id, location, timeStampInPerformanceSeconds) {
	      this.pointerEventManager.pointerMove(id, location, timeStampInPerformanceSeconds);
	      return this.pointerEventManager.pointerUp(id, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.touchCancel = function(id, timeStampInPerformanceSeconds) {
	      return this.pointerEventManager.pointerCancel(id, timeStampInPerformanceSeconds);
	    };

	    CanvasElement.prototype.capturePointerEvents = function(element) {
	      return this.pointerEventManager.capturePointerEvents(element);
	    };

	    CanvasElement.prototype.pointerEventsCapturedBy = function(element) {
	      return this.pointerEventManager.pointerEventsCapturedBy(element);
	    };

	    CanvasElement.prototype._attachPointerButtonListeners = function() {
	      this._domListener(this._canvas, "mousedown", (function(_this) {
	        return function(domEvent) {
	          if (domEvent.button === 0) {
	            domEvent.preventDefault();
	            return _this.mouseDown(_this._domEventLocation(domEvent), timeStampToPerformanceSecond(domEvent.timeStamp));
	          }
	        };
	      })(this));
	      return this._domListener(window, "mouseup", (function(_this) {
	        return function(domEvent) {
	          if (domEvent.button === 0 && _this.activePointers["mousePointer"]) {
	            domEvent.preventDefault();
	            return _this.mouseUp(_this._domEventLocation(domEvent), timeStampToPerformanceSecond(domEvent.timeStamp));
	          }
	        };
	      })(this));
	    };

	    CanvasElement.prototype._attachPointerTouchListeners = function() {
	      this._domListener(this._canvas, "touchstart", (function(_this) {
	        return function(e) {
	          var changedTouch, i, len, ref1, results;
	          e.preventDefault();
	          ref1 = e.changedTouches;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            changedTouch = ref1[i];
	            results.push(_this.touchDown(changedTouch.identifier, _this._domEventLocation(changedTouch), timeStampToPerformanceSecond(e.timeStamp)));
	          }
	          return results;
	        };
	      })(this));
	      this._domListener(this._canvas, "touchmove", (function(_this) {
	        return function(e) {
	          var changedTouch, i, len, ref1, results;
	          e.preventDefault();
	          ref1 = e.changedTouches;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            changedTouch = ref1[i];
	            results.push(_this.pointerEventManager.pointerMove(changedTouch.identifier, _this._domEventLocation(changedTouch), timeStampToPerformanceSecond(e.timeStamp)));
	          }
	          return results;
	        };
	      })(this));
	      this._domListener(this._canvas, "touchend", (function(_this) {
	        return function(e) {
	          var changedTouch, i, len, ref1, results;
	          e.preventDefault();
	          ref1 = e.changedTouches;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            changedTouch = ref1[i];
	            results.push(_this.touchUp(changedTouch.identifier, _this._domEventLocation(changedTouch), timeStampToPerformanceSecond(e.timeStamp)));
	          }
	          return results;
	        };
	      })(this));
	      return this._domListener(this._canvas, "touchcancel", (function(_this) {
	        return function(e) {
	          var changedTouch, i, len, ref1, results;
	          e.preventDefault();
	          ref1 = e.changedTouches;
	          results = [];
	          for (i = 0, len = ref1.length; i < len; i++) {
	            changedTouch = ref1[i];
	            results.push(_this.touchCancel(changedTouch.identifier, timeStampToPerformanceSecond(e.timeStamp)));
	          }
	          return results;
	        };
	      })(this));
	    };

	    CanvasElement.prototype._attachKeypressListeners = function() {
	      this.keysDown = {};
	      this._domListener(window, "keypress", (function(_this) {
	        return function(domEvent) {
	          return _this.pointerEventManager.queueKeyEvents("keyPress", function() {
	            return new KeyEvent("keyPress", {
	              typed: String.fromCharCode(domEvent.charCode)
	            });
	          });
	        };
	      })(this));
	      this._domListener(window, "keydown", (function(_this) {
	        return function(domEvent) {
	          return _this.pointerEventManager.queueKeyEvents("keyDown", function() {
	            return new KeyEvent("keyDown", {
	              keyCode: domEvent.keyCode
	            });
	          });
	        };
	      })(this));
	      return this._domListener(window, "keyup", (function(_this) {
	        return function(domEvent) {
	          return _this.pointerEventManager.queueKeyEvents("keyUp", function() {
	            return new KeyEvent("keyUp", {
	              keyCode: domEvent.keyCode
	            });
	          });
	        };
	      })(this));
	    };

	    CanvasElement.prototype._attachDomEventListeners = function() {
	      this._dettachDomEventListeners();
	      this._attachPointerMoveListeners();
	      this._attachPointerTouchListeners();
	      this._attachPointerButtonListeners();
	      this._attachResizeListener();
	      return this._attachKeypressListeners();
	    };

	    CanvasElement.prototype.draw = function() {
	      var frameEndTime, frameStartTime;
	      Element.resetStats();
	      frameStartTime = currentSecond();
	      this.firstFrameTime || (this.firstFrameTime = frameStartTime);
	      if (this.lastFrameTime) {
	        this.engineStat.add("fps", 1 / (frameStartTime - this.lastFrameTime));
	        this.engineStat.add("frameTimeMS", (frameStartTime - this.lastFrameTime) * 1000);
	      }
	      this.lastFrameTime = frameStartTime;
	      if (this.canvasBitmap) {
	        CanvasElement.__super__.draw.call(this, this.canvasBitmap, this.elementToParentMatrix);
	      }
	      frameEndTime = currentSecond();
	      return this.engineStat.add("drawTimeMS", (frameEndTime - frameStartTime) * 1000 | 0);
	    };

	    CanvasElement.prototype._showDrawStats = function() {
	      var numSamples;
	      numSamples = this.engineStat.length("drawTimeMS");
	      return timeout(1000, (function(_this) {
	        return function() {
	          var totalDrawDuration;
	          if (numSamples === _this.engineStat.length("drawTimeMS")) {
	            totalDrawDuration = frameEndTime - _this.firstFrameTime;
	            _this.engineStat.log();
	            _this.engineStat.reset();
	            _this.log({
	              cache: {
	                count: Element._activeCacheCount,
	                size: (Element._activeCacheByteSize / (1024 * 1024)).toFixed(1) + "mb"
	              }
	            });
	            _this.firstFrameTime = null;
	            _this.frameCount = 0;
	            return _this.lastFrameTime = null;
	          }
	        };
	      })(this));
	    };

	    return CanvasElement;

	  })(Element));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(94);


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic;

	module.exports = Atomic = __webpack_require__(95);

	Atomic.All = __webpack_require__(97);

	Atomic.Base = __webpack_require__(99);

	Atomic.Color = __webpack_require__(98);

	Atomic.Matrix = __webpack_require__(100);

	Atomic.Perimeter = __webpack_require__(103);

	Atomic.Point = __webpack_require__(101);

	Atomic.Rectangle = __webpack_require__(102);

	Atomic.finishLoad(["All", "Base", "Color", "Matrix", "Perimeter", "Point", "Rectangle"]);


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(96);

	module.exports = Art.Atomic || (Art.Atomic = (function(superClass) {
	  extend(Atomic, superClass);

	  function Atomic() {
	    return Atomic.__super__.constructor.apply(this, arguments);
	  }

	  Atomic.namespace = Art;

	  Atomic.namespacePath = "Neptune.Art.Atomic";

	  return Atomic;

	})(Neptune.Base));

	Art.addNamespace(Art.Atomic);


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Color, Foundation, Matrix, Perimeter, Point, Rectangle, createAllClass, select;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(95);

	Color = __webpack_require__(98);

	Matrix = __webpack_require__(100);

	Point = __webpack_require__(101);

	Rectangle = __webpack_require__(102);

	Perimeter = __webpack_require__(103);

	createAllClass = Foundation.createAllClass, select = Foundation.select;

	createAllClass(Atomic, select(Perimeter, "perimeter", "perimeter0"), select(Point, "point", "point0", "point1", "isPoint"), select(Color, "newColor", "color", "hslColor", "rgbColor", "colorNames", "colorNamesMap"), select(Matrix, "matrix", "identityMatrix"), select(Rectangle, "rect", "nothing", "everything"));


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	var AtomicBase, Color, Foundation, abs, bound, colorFloatEq, float32Eq, hex16ColorRegex, hex256ColorRegex, inspect, isString, log, max, min, modulo, pad, parseRGBColorComponent, rgbColorRegex, rgbaColorRegex,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	AtomicBase = __webpack_require__(99);

	inspect = Foundation.inspect, bound = Foundation.bound, modulo = Foundation.modulo, pad = Foundation.pad, min = Foundation.min, max = Foundation.max, abs = Foundation.abs, float32Eq = Foundation.float32Eq, isString = Foundation.isString, log = Foundation.log, hex16ColorRegex = Foundation.hex16ColorRegex, hex256ColorRegex = Foundation.hex256ColorRegex, rgbColorRegex = Foundation.rgbColorRegex, rgbaColorRegex = Foundation.rgbaColorRegex;

	colorFloatEq = float32Eq;

	parseRGBColorComponent = function(str) {
	  var percentIndex;
	  if ((percentIndex = str.indexOf('%')) !== -1) {
	    return (str.slice(0, percentIndex) | 0) * .01;
	  } else {
	    return (str | 0) * 1 / 255;
	  }
	};

	module.exports = Color = (function(superClass) {
	  var color, colorNames, colorNamesMap, hslColor, k, parseCache, toArray, v, withSat;

	  extend(Color, superClass);

	  function Color() {
	    return Color.__super__.constructor.apply(this, arguments);
	  }

	  Color.colorNames = colorNames = ['AliceBlue', 'AntiqueWhite', 'Aqua', 'Aquamarine', 'Azure', 'Beige', 'Bisque', 'Black', 'BlanchedAlmond', 'Blue', 'BlueViolet', 'Brown', 'BurlyWood', 'CadetBlue', 'Chartreuse', 'Chocolate', 'Coral', 'CornflowerBlue', 'Cornsilk', 'Crimson', 'Cyan', 'DarkBlue', 'DarkCyan', 'DarkGoldenRod', 'DarkGray', 'DarkGreen', 'DarkKhaki', 'DarkMagenta', 'DarkOliveGreen', 'DarkOrange', 'DarkOrchid', 'DarkRed', 'DarkSalmon', 'DarkSeaGreen', 'DarkSlateBlue', 'DarkSlateGray', 'DarkTurquoise', 'DarkViolet', 'DeepPink', 'DeepSkyBlue', 'DimGray', 'DodgerBlue', 'FireBrick', 'FloralWhite', 'ForestGreen', 'Fuchsia', 'Gainsboro', 'GhostWhite', 'Gold', 'GoldenRod', 'Gray', 'Green', 'GreenYellow', 'HoneyDew', 'HotPink', 'IndianRed', 'Indigo', 'Ivory', 'Khaki', 'Lavender', 'LavenderBlush', 'LawnGreen', 'LemonChiffon', 'LightBlue', 'LightCoral', 'LightCyan', 'LightGoldenRodYellow', 'LightGray', 'LightGreen', 'LightPink', 'LightSalmon', 'LightSeaGreen', 'LightSkyBlue', 'LightSlateGray', 'LightSteelBlue', 'LightYellow', 'Lime', 'LimeGreen', 'Linen', 'Magenta', 'Maroon', 'MediumAquaMarine', 'MediumBlue', 'MediumOrchid', 'MediumPurple', 'MediumSeaGreen', 'MediumSlateBlue', 'MediumSpringGreen', 'MediumTurquoise', 'MediumVioletRed', 'MidnightBlue', 'MintCream', 'MistyRose', 'Moccasin', 'NavajoWhite', 'Navy', 'OldLace', 'Olive', 'OliveDrab', 'Orange', 'OrangeRed', 'Orchid', 'PaleGoldenRod', 'PaleGreen', 'PaleTurquoise', 'PaleVioletRed', 'PapayaWhip', 'PeachPuff', 'Peru', 'Pink', 'Plum', 'PowderBlue', 'Purple', 'Red', 'RosyBrown', 'RoyalBlue', 'SaddleBrown', 'Salmon', 'SandyBrown', 'SeaGreen', 'SeaShell', 'Sienna', 'Silver', 'SkyBlue', 'SlateBlue', 'SlateGray', 'Snow', 'SpringGreen', 'SteelBlue', 'Tan', 'Teal', 'Thistle', 'Tomato', 'Turquoise', 'Violet', 'Wheat', 'White', 'WhiteSmoke', 'Yellow', 'YellowGreen'];

	  Color.colorNamesMap = colorNamesMap = {
	    transparent: "rgba(0,0,0,0)",
	    aliceblue: "#f0f8ff",
	    antiquewhite: "#faebd7",
	    aqua: "#00ffff",
	    aquamarine: "#7fffd4",
	    azure: "#f0ffff",
	    beige: "#f5f5dc",
	    bisque: "#ffe4c4",
	    black: "#000000",
	    blanchedalmond: "#ffebcd",
	    blue: "#0000ff",
	    blueviolet: "#8a2be2",
	    brown: "#a52a2a",
	    burlywood: "#deb887",
	    cadetblue: "#5f9ea0",
	    chartreuse: "#7fff00",
	    chocolate: "#d2691e",
	    coral: "#ff7f50",
	    cornflowerblue: "#6495ed",
	    cornsilk: "#fff8dc",
	    crimson: "#dc143c",
	    cyan: "#00ffff",
	    darkblue: "#00008b",
	    darkcyan: "#008b8b",
	    darkgoldenrod: "#b8860b",
	    darkgrey: "#a9a9a9",
	    darkgray: "#a9a9a9",
	    darkgreen: "#006400",
	    darkkhaki: "#bdb76b",
	    darkmagenta: "#8b008b",
	    darkolivegreen: "#556b2f",
	    darkorange: "#ff8c00",
	    darkorchid: "#9932cc",
	    darkred: "#8b0000",
	    darksalmon: "#e9967a",
	    darkseagreen: "#8fbc8f",
	    darkslateblue: "#483d8b",
	    darkslategrey: "#2f4f4f",
	    darkslategray: "#2f4f4f",
	    darkturquoise: "#00ced1",
	    darkviolet: "#9400d3",
	    deeppink: "#ff1493",
	    deepskyblue: "#00bfff",
	    dimgrey: "#696969",
	    dimgray: "#696969",
	    dodgerblue: "#1e90ff",
	    firebrick: "#b22222",
	    floralwhite: "#fffaf0",
	    forestgreen: "#228b22",
	    fuchsia: "#ff00ff",
	    gainsboro: "#dcdcdc",
	    ghostwhite: "#f8f8ff",
	    gold: "#ffd700",
	    goldenrod: "#daa520",
	    grey: "#808080",
	    gray: "#808080",
	    green: "#008000",
	    greenyellow: "#adff2f",
	    honeydew: "#f0fff0",
	    hotpink: "#ff69b4",
	    indianred: "#cd5c5c",
	    indigo: "#4b0082",
	    ivory: "#fffff0",
	    khaki: "#f0e68c",
	    lavender: "#e6e6fa",
	    lavenderblush: "#fff0f5",
	    lawngreen: "#7cfc00",
	    lemonchiffon: "#fffacd",
	    lightblue: "#add8e6",
	    lightcoral: "#f08080",
	    lightcyan: "#e0ffff",
	    lightgoldenrodyellow: "#fafad2",
	    lightgrey: "#d3d3d3",
	    lightgray: "#d3d3d3",
	    lightgreen: "#90ee90",
	    lightpink: "#ffb6c1",
	    lightsalmon: "#ffa07a",
	    lightseagreen: "#20b2aa",
	    lightskyblue: "#87cefa",
	    lightslategrey: "#778899",
	    lightslategray: "#778899",
	    lightsteelblue: "#b0c4de",
	    lightyellow: "#ffffe0",
	    lime: "#00ff00",
	    limegreen: "#32cd32",
	    linen: "#faf0e6",
	    magenta: "#ff00ff",
	    maroon: "#800000",
	    mediumaquamarine: "#66cdaa",
	    mediumblue: "#0000cd",
	    mediumorchid: "#ba55d3",
	    mediumpurple: "#9370db",
	    mediumseagreen: "#3cb371",
	    mediumslateblue: "#7b68ee",
	    mediumspringgreen: "#00fa9a",
	    mediumturquoise: "#48d1cc",
	    mediumvioletred: "#c71585",
	    midnightblue: "#191970",
	    mintcream: "#f5fffa",
	    mistyrose: "#ffe4e1",
	    moccasin: "#ffe4b5",
	    navajowhite: "#ffdead",
	    navy: "#000080",
	    oldlace: "#fdf5e6",
	    olive: "#808000",
	    olivedrab: "#6b8e23",
	    orange: "#ffa500",
	    orangered: "#ff4500",
	    orchid: "#da70d6",
	    palegoldenrod: "#eee8aa",
	    palegreen: "#98fb98",
	    paleturquoise: "#afeeee",
	    palevioletred: "#db7093",
	    papayawhip: "#ffefd5",
	    peachpuff: "#ffdab9",
	    peru: "#cd853f",
	    pink: "#ffc0cb",
	    plum: "#dda0dd",
	    powderblue: "#b0e0e6",
	    purple: "#800080",
	    red: "#ff0000",
	    rosybrown: "#bc8f8f",
	    royalblue: "#4169e1",
	    saddlebrown: "#8b4513",
	    salmon: "#fa8072",
	    sandybrown: "#f4a460",
	    seagreen: "#2e8b57",
	    seashell: "#fff5ee",
	    sienna: "#a0522d",
	    silver: "#c0c0c0",
	    skyblue: "#87ceeb",
	    slateblue: "#6a5acd",
	    slategrey: "#708090",
	    slategray: "#708090",
	    snow: "#fffafa",
	    springgreen: "#00ff7f",
	    steelblue: "#4682b4",
	    tan: "#d2b48c",
	    teal: "#008080",
	    thistle: "#d8bfd8",
	    tomato: "#ff6347",
	    turquoise: "#40e0d0",
	    violet: "#ee82ee",
	    wheat: "#f5deb3",
	    white: "#ffffff",
	    whitesmoke: "#f5f5f5",
	    yellow: "#ffff00",
	    yellowgreen: "#9acd32"
	  };

	  Color.parseCache = parseCache = {};

	  Color.color = color = function(a, b, c, d) {
	    var clr;
	    if ((b == null) && (a instanceof Color)) {
	      return a;
	    }
	    if (isString(a) && (clr = colorNamesMap[a] || parseCache[a])) {
	      return clr;
	    }
	    return new Color(a, b, c, d);
	  };

	  Color.newColor = color;

	  Color.rgbColor = color;

	  Color.hslColor = hslColor = function(h, s, l, a) {
	    var f, p, phase, q, t;
	    if (a == null) {
	      a = 1;
	    }
	    if (h instanceof Color) {
	      return h;
	    }
	    h = modulo(h, 1);
	    phase = h * 6 | 0;
	    f = h * 6 - phase;
	    p = l * (1 - s);
	    q = l * (1 - f * s);
	    t = l * (1 - (1 - f) * s);
	    h = colorFloatEq(h, 1) ? 1 : h % 1;
	    switch (phase % 6) {
	      case 0:
	        return new Color(l, t, p, a, h, s, l);
	      case 1:
	        return new Color(q, l, p, a, h, s, l);
	      case 2:
	        return new Color(p, l, t, a, h, s, l);
	      case 3:
	        return new Color(p, q, l, a, h, s, l);
	      case 4:
	        return new Color(t, p, l, a, h, s, l);
	      case 5:
	        return new Color(l, p, q, a, h, s, l);
	    }
	  };

	  Color.parse = function(string, existing) {
	    if (existing == null) {
	      existing = null;
	    }
	    if (existing) {
	      throw new Error("existing feature is no longer supported");
	    }
	    return new Artomic.Color(string);
	  };

	  Color.prototype._initFromObject = function(obj) {
	    return this.r = obj.r, this.g = obj.g, this.b = obj.b, this.a = obj.a, obj;
	  };

	  Color.prototype._initFromString = function(string) {
	    var a, b, clr, elements, g, lcString, match, r, x;
	    this.initProperties();
	    parseCache[string] = this;
	    if (match = string.match(hex16ColorRegex)) {
	      x = match[0], r = match[1], g = match[2], b = match[3], a = match[4];
	      if (!a) {
	        this._htmlColorString = string;
	      }
	      a || (a = "f");
	      this.r = parseInt(r, 16) / 15;
	      this.g = parseInt(g, 16) / 15;
	      this.b = parseInt(b, 16) / 15;
	      return this.a = parseInt(a, 16) / 15;
	    } else if (match = string.match(hex256ColorRegex)) {
	      x = match[0], r = match[1], g = match[2], b = match[3], a = match[4];
	      if (!a) {
	        this._htmlColorString = string;
	      }
	      a || (a = "ff");
	      this.r = parseInt(r, 16) / 255;
	      this.g = parseInt(g, 16) / 255;
	      this.b = parseInt(b, 16) / 255;
	      return this.a = parseInt(a, 16) / 255;
	    } else if (elements = string.match(rgbColorRegex)) {
	      this._htmlColorString = string;
	      this.a = 1;
	      this.r = parseRGBColorComponent(elements[1]);
	      this.g = parseRGBColorComponent(elements[2]);
	      return this.b = parseRGBColorComponent(elements[3]);
	    } else if (elements = string.match(rgbaColorRegex)) {
	      this._htmlColorString = string;
	      this.r = parseRGBColorComponent(elements[1]);
	      this.g = parseRGBColorComponent(elements[2]);
	      this.b = parseRGBColorComponent(elements[3]);
	      return this.a = elements[4] - 0;
	    } else if (/^[a-z]+$/i.test(lcString = string.toLowerCase())) {
	      if (!(clr = colorNamesMap[lcString])) {
	        return this.log({
	          parseError: this.parseError = "WARNING: Color.parse failure. Unknown color name: " + (inspect(string))
	        });
	      }
	      this._htmlColorString = clr._htmlColorString;
	      this.r = clr.r;
	      this.g = clr.g;
	      this.b = clr.b;
	      return this.a = clr.a;
	    } else {
	      return this.log({
	        parseError: this.parseError = "WARNING: Color.parse failure for " + (inspect(string))
	      });
	    }
	  };

	  Color.prototype.initProperties = function() {
	    this.r = this.g = this.b = 0;
	    this.a = 1;
	    this._hue = this._saturation = this._lightness = null;
	    this.parseError = null;
	    return this._htmlColorString = null;
	  };

	  Color.prototype._init = function(a, b, c, d, h, s, l) {
	    this.initProperties();
	    if (h != null) {
	      this._hue = h - 0;
	    }
	    if (s != null) {
	      this._saturation = s - 0;
	    }
	    if (l != null) {
	      this._lightness = l - 0;
	    }
	    if (a == null) {
	      this.r = this.g = this.b = 0;
	      return this.a = 1;
	    } else if (b == null) {
	      if (a > 1) {
	        a /= 255;
	      }
	      this.r = this.g = this.b = a - 0;
	      return this.a = 1 - 0;
	    } else if (c != null) {
	      this.r = a - 0;
	      this.g = b - 0;
	      this.b = c - 0;
	      return this.a = d != null ? d - 0 : 1;
	    }
	  };

	  Color.prototype.add = function(r, g, b, a) {
	    if (r instanceof Color) {
	      return color(this.r + r.r, this.g + r.g, this.b + r.b, this.a + r.a);
	    } else if (g != null) {
	      return color(this.r + r, this.g + g, this.b + b, this.a + a);
	    } else {
	      return color(this.r + r, this.g + r, this.b + r, this.a + r);
	    }
	  };

	  Color.prototype.sub = function(r, g, b, a) {
	    if (r instanceof Color) {
	      return color(this.r - r.r, this.g - r.g, this.b - r.b, this.a - r.a);
	    } else if (g != null) {
	      return color(this.r - r, this.g - g, this.b - b, this.a - a);
	    } else {
	      return color(this.r - r, this.g - r, this.b - r, this.a - r);
	    }
	  };

	  Color.prototype.mul = function(r, g, b, a) {
	    if (r instanceof Color) {
	      return color(this.r * r.r, this.g * r.g, this.b * r.b, this.a * r.a);
	    } else if (g != null) {
	      return color(this.r * r, this.g * g, this.b * b, this.a * a);
	    } else {
	      return color(this.r * r, this.g * r, this.b * r, this.a * r);
	    }
	  };

	  Color.prototype.div = function(r, g, b, a) {
	    if (r instanceof Color) {
	      return color(this.r / r.r, this.g / r.g, this.b / r.b, this.a / r.a);
	    } else if (g != null) {
	      return color(this.r / r, this.g / g, this.b / b, this.a / a);
	    } else {
	      return color(this.r / r, this.g / r, this.b / r, this.a / r);
	    }
	  };

	  Color.prototype.interpolate = function(toColor, p) {
	    var oneMinusP;
	    toColor = color(toColor);
	    oneMinusP = 1 - p;
	    return new Color(toColor.r * p + this.r * oneMinusP, toColor.g * p + this.g * oneMinusP, toColor.b * p + this.b * oneMinusP, toColor.a * p + this.a * oneMinusP);
	  };

	  Color.prototype.blend = function(r, amount) {
	    return r.sub(this).mul(amount).add(this);
	  };

	  Color.prototype.withAlpha = function(a) {
	    return new Color(this.r, this.g, this.b, a);
	  };

	  Color.prototype.withLightness = function(v) {
	    return hslColor(this.h, this.s, v, this.a);
	  };

	  Color.prototype.withHue = function(v) {
	    return hslColor(v, this.s, this.l, this.a);
	  };

	  Color.prototype.withSat = withSat = function(v) {
	    return hslColor(this.h, v, this.l, this.a);
	  };

	  Color.prototype.withSaturation = withSat;

	  Color.prototype.withChannel = function(c, v) {
	    switch (c) {
	      case "r":
	      case "red":
	        return new Color(v, this.g, this.b, this.a);
	      case "g":
	      case "green":
	        return new Color(this.r, v, this.b, this.a);
	      case "b":
	      case "blue":
	        return new Color(this.r, this.g, v, this.a);
	      case "h":
	      case "hue":
	        return hslColor(v, this.s, this.l, this.a);
	      case "s":
	      case "sat":
	      case "saturation":
	        return hslColor(this.h, v, this.l, this.a);
	      case "l":
	      case "lightness":
	        return this.withLightness(v);
	      case "a":
	      case "alpha":
	        return this.withAlpha(v);
	      default:
	        throw new Error("invalid channel: " + (inspect(c)));
	    }
	  };

	  Color.prototype.withChannels = function(c) {
	    var a, b, g, h, l, r, s;
	    if (c.h || c.s || c.l) {
	      h = c.h != null ? c.h : this.h;
	      s = c.s != null ? c.s : this.s;
	      l = c.l != null ? c.l : this.l;
	      a = c.a != null ? c.a : this.a;
	      return hslColor(h, s, l, a);
	    } else {
	      r = c.r != null ? c.r : this.r;
	      g = c.g != null ? c.g : this.g;
	      b = c.b != null ? c.b : this.b;
	      a = c.a != null ? c.a : this.a;
	      return new Color(r, g, b, a);
	    }
	  };

	  Color.getter({
	    array: function() {
	      return [this.r, this.g, this.b, this.a];
	    },
	    arrayRGB: function() {
	      return [this.r, this.g, this.b];
	    },
	    rgbSum: function() {
	      return this.r + this.g + this.b;
	    },
	    rgbSquaredSum: function() {
	      return this.r * this.r + this.g * this.g + this.b * this.b;
	    },
	    clamped: function() {
	      return new Color(bound(0, this.r, 1), bound(0, this.g, 1), bound(0, this.b, 1), bound(0, this.a, 1));
	    },
	    r256: function() {
	      return bound(0, Math.round(this.r * 255), 255);
	    },
	    g256: function() {
	      return bound(0, Math.round(this.g * 255), 255);
	    },
	    b256: function() {
	      return bound(0, Math.round(this.b * 255), 255);
	    },
	    a256: function() {
	      return bound(0, Math.round(this.a * 255), 255);
	    },
	    r16: function() {
	      return bound(0, Math.round(this.r * 15), 15);
	    },
	    g16: function() {
	      return bound(0, Math.round(this.g * 15), 15);
	    },
	    b16: function() {
	      return bound(0, Math.round(this.b * 15), 15);
	    },
	    a16: function() {
	      return bound(0, Math.round(this.a * 15), 15);
	    },
	    h256: function() {
	      return bound(0, Math.round(this.h * 255), 255);
	    },
	    s256: function() {
	      return bound(0, Math.round(this.s * 255), 255);
	    },
	    b256: function() {
	      return bound(0, Math.round(this.b * 255), 255);
	    },
	    rClamped: function() {
	      return bound(0, this.r, 1);
	    },
	    gClamped: function() {
	      return bound(0, this.g, 1);
	    },
	    bClamped: function() {
	      return bound(0, this.b, 1);
	    },
	    aClamped: function() {
	      return bound(0, this.a, 1);
	    },
	    premultiplied: function() {
	      return new Color(this.r * this.a, this.g * this.a, this.b * this.a, this.a);
	    },
	    demultiplied: function() {
	      return new Color(this.r / this.a, this.g / this.a, this.b / this.a, this.a);
	    },
	    cssString: function() {
	      return "rgba(" + [this.r256, this.g256, this.b256, this.aClamped].join(', ') + ")";
	    },
	    rgbaString: function() {
	      return "color(" + [this.r256, this.g256, this.b256, this.a256].join('/255, ') + "/255)";
	    },
	    hexString: function() {
	      return "#" + pad(this.r256.toString(16), 2) + pad(this.g256.toString(16), 2) + pad(this.b256.toString(16), 2);
	    },
	    hex16String: function() {
	      return "#" + pad(this.r16.toString(16), 1) + pad(this.g16.toString(16), 1) + pad(this.b16.toString(16), 1);
	    },
	    hslHexString: function() {
	      return "#" + pad(this.h256.toString(16), 2) + pad(this.s256.toString(16), 2) + pad(this.b256.toString(16), 2);
	    },
	    rgbaHexString: function() {
	      return "#" + pad(this.r256.toString(16), 2) + pad(this.g256.toString(16), 2) + pad(this.b256.toString(16), 2) + pad(this.a256.toString(16), 2);
	    }
	  });

	  Color.prototype.eq = function(r) {
	    if (this === r) {
	      return true;
	    }
	    return r && colorFloatEq(this.r, r.r) && colorFloatEq(this.g, r.g) && colorFloatEq(this.b, r.b) && colorFloatEq(this.a, r.a);
	  };

	  Color.prototype.lt = function(r) {
	    return this.r < r.r && this.b < r.b && this.c < r.c && this.a < r.a;
	  };

	  Color.prototype.gt = function(r) {
	    return this.r > r.r && this.b > r.b && this.c > r.c && this.a > r.a;
	  };

	  Color.prototype.lte = function(r) {
	    return this.r <= r.r && this.b <= r.b && this.c <= r.c && this.a <= r.a;
	  };

	  Color.prototype.gte = function(r) {
	    return this.r >= r.r && this.b >= r.b && this.c >= r.c && this.a >= r.a;
	  };

	  Color.getter({
	    inspectedString: function() {
	      var a;
	      a = colorFloatEq(1, this.a) ? this.hexString : this.rgbaHexString;
	      return "color('" + a + "')";
	    }
	  });

	  Color.prototype.toString = function() {
	    return this._htmlColorString || (this._htmlColorString = colorFloatEq(1, this.a) ? this.getHexString() : this.getCssString());
	  };

	  Color.prototype.toArray = toArray = function() {
	    return [this.r, this.g, this.b, this.a];
	  };

	  Color.prototype.toPlainStructure = function() {
	    return {
	      r: this.r,
	      g: this.g,
	      b: this.b,
	      a: this.a
	    };
	  };

	  Color.prototype.toPlainEvalString = function() {
	    return "{r:" + this.r + ", g:" + this.g + ", b:" + this.b + ", a:" + this.a + "}";
	  };

	  Color.getter({
	    h: function() {
	      return this._hue != null ? this._hue : this._hue = this.rgbToHsl() && this._hue;
	    },
	    s: function() {
	      return this._saturation != null ? this._saturation : this._saturation = this.rgbToHsl() && this._saturation;
	    },
	    l: function() {
	      return this._lightness != null ? this._lightness : this._lightness = this.rgbToHsl() && this._lightness;
	    },
	    inverseL: function() {
	      return 1 - this.l;
	    },
	    inverseS: function() {
	      return 1 - this.s;
	    },
	    inverseH: function() {
	      return 1 - this.h;
	    },
	    hue: function() {
	      return this._hue != null ? this._hue : this._hue = this.rgbToHsl() && this._hue;
	    },
	    sat: function() {
	      return this._saturation != null ? this._saturation : this._saturation = this.rgbToHsl() && this._saturation;
	    },
	    lit: function() {
	      return this._lightness != null ? this._lightness : this._lightness = this.rgbToHsl() && this._lightness;
	    },
	    saturation: function() {
	      return this._saturation != null ? this._saturation : this._saturation = this.rgbToHsl() && this._saturation;
	    },
	    lightness: function() {
	      return this._lightness != null ? this._lightness : this._lightness = this.rgbToHsl() && this._lightness;
	    },
	    perceptualLightness: function() {
	      return 0.2126 * this.r + 0.7152 * this.g + 0.0722 * this.b;
	    },
	    satLightness: function() {
	      return (2 - this._saturation) * this._lightness * .5;
	    }
	  });

	  Color.perceptualWeights = {
	    r: 0.2126,
	    g: 0.7152,
	    b: 0.0722
	  };

	  Color.prototype.rgbToHsl = function() {
	    var b, delta, g, maxRGB, minRGB, r, sixth;
	    r = this.r;
	    g = this.g;
	    b = this.b;
	    maxRGB = max(r, g, b);
	    minRGB = min(r, g, b);
	    delta = maxRGB - minRGB;
	    sixth = 1.0 / 6.0;
	    this._lightness = maxRGB;
	    if (maxRGB === minRGB) {
	      this._hue = 0;
	      this._saturation = 0;
	      return true;
	    }
	    if (maxRGB === r) {
	      if (g >= b) {
	        this._hue = sixth * ((g - b) / delta);
	      } else {
	        this._hue = sixth * ((g - b) / delta) + 1;
	      }
	    } else if (maxRGB === g) {
	      this._hue = sixth * ((b - r) / delta) + 1 / 3;
	    } else {
	      this._hue = sixth * ((r - g) / delta) + 2 / 3;
	    }
	    this._saturation = 1 - (minRGB / maxRGB);
	    return true;
	  };

	  for (k in colorNamesMap) {
	    v = colorNamesMap[k];
	    colorNamesMap[k] = color(v);
	  }

	  return Color;

	})(AtomicBase);


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	var Base, BaseObject, inspect, isFunction, isNumber, isPlainArray, isPlainObject, isString, log, ref, stringToNumberArray,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(11), inspect = ref.inspect, log = ref.log, isNumber = ref.isNumber, isPlainObject = ref.isPlainObject, isPlainArray = ref.isPlainArray, isString = ref.isString, isFunction = ref.isFunction, stringToNumberArray = ref.stringToNumberArray, BaseObject = ref.BaseObject;

	module.exports = Base = (function(superClass) {
	  extend(Base, superClass);

	  Base.prototype._initFromString = function(string) {
	    return this._init.apply(this, stringToNumberArray(string));
	  };

	  Base.prototype.inspect = function(inspector) {
	    if (inspector != null ? inspector.put : void 0) {
	      return inspector.put(this.getInspectedString());
	    } else {
	      return this.getInspectedString();
	    }
	  };

	  function Base(a, b, c, d, e, f, g) {
	    Base.__super__.constructor.apply(this, arguments);
	    if (isPlainArray(a)) {
	      this._init.apply(this, a);
	    } else if (isString(a)) {
	      this._initFromString(a);
	    } else if (isPlainObject(a)) {
	      this._initFromObject(a);
	    } else if ((a != null) && !isNumber(a) && !(a instanceof Base) && isFunction(a.toString)) {
	      this._initFromString(a.toString());
	    } else {
	      this._init(a, b, c, d, e, f, g);
	    }
	  }

	  Base.prototype.compare = function(b) {
	    if (this.eq(b)) {
	      return 0;
	    }
	    if (this.lte(b)) {
	      return -1;
	    }
	    if (this.gte(b)) {
	      return 1;
	    }
	    return NaN;
	  };

	  return Base;

	})(BaseObject);


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	
	/*

	With the exception of the setter methods, this is a pure-functional class.
	 */

	/*
	Experiment: Instead of storing the matrix as 6 members, use a Float32Array:

	  Bonus: if we order the 6 elements correctly, we can just pass the Float32Array directly to Webgl uniformMatrix3fv
	  Result:
	    FF is about 2x as fast with this implementation, but Chrome is about 10x slower (see below)
	    Sticking with Members implementation for now.

	On my Macbook pro Retina (2.6 GHz Intel Core i7)

	Chrome 29.0.1547.57 (members)
	  Matrix.translate 14,716,649/s
	  matrix().translate 8,052,404/s
	  transform point 3,922,725/s
	  invert 12,733,472/s
	  mul 16,146,097/s

	Chrome 29.0.1547.57 (float32Array)
	  Matrix.translate 926,402/s
	  matrix().translate 463,791/s
	  transform point 3,684,177/s
	  invert 978,248/s
	  mul 992,078/s

	FF 23.0.1 (members)
	  Matrix.translate 1,281,078/s
	  matrix().translate 534,542/s
	  transform point 768,224/s
	  invert 1,374,788/s
	  mul 1,413,206/s

	FF 23.0.1 (float32Array)
	  Matrix.translate 2,126,281/s
	  matrix().translate 1,013,548/s
	  transform point 832,604/s
	  invert 2,524,903/s
	  mul 2,669,331/s

	NOTE! the order of the fields in the float32array for Webgl uniformMatrix3fv should be:
	  @values[0] = @sx
	  @values[1] = @shy
	  @values[2] = @tx
	  @values[3] = @shx
	  @values[4] = @sy
	  @values[5] = @ty
	 */
	var AtomicBase, Foundation, Matrix, Point, Rectangle, compact, float32Eq, inspect, isNumber, log, point, rect, simplifyNum,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	AtomicBase = __webpack_require__(99);

	Point = __webpack_require__(101);

	Rectangle = __webpack_require__(102);

	point = Point.point;

	rect = Rectangle.rect;

	inspect = Foundation.inspect, simplifyNum = Foundation.simplifyNum, float32Eq = Foundation.float32Eq, compact = Foundation.compact, log = Foundation.log, isNumber = Foundation.isNumber;

	module.exports = Matrix = (function(superClass) {
	  var cleanInspect, identityMatrix, intermediatResultMatrix, matrix, toArray, transform1D;

	  extend(Matrix, superClass);

	  function Matrix() {
	    return Matrix.__super__.constructor.apply(this, arguments);
	  }

	  Matrix.matrix = matrix = function(a, b, c, d, e, f) {
	    if (a instanceof Matrix) {
	      return a;
	    } else if (a === null || a === void 0) {
	      return identityMatrix;
	    } else {
	      return new Matrix(a, b, c, d, e, f);
	    }
	  };

	  Matrix._cleanInspect = cleanInspect = function(pointName, s) {
	    var out, r;
	    out = pointName ? (r = new RegExp("([0-9])" + pointName, "g"), s.replace(r, "$1 * " + pointName).replace(/-1 \* /g, "-").replace(/\ \+ -/g, " - ").replace(/0\./g, ".")) : s.replace(/-1([A-Za-z]+)/g, "-$1").replace(/\ \+ -/g, " - ").replace(/0\./g, ".");
	    return out;
	  };

	  Matrix.translate = function(a, b) {
	    var x, y;
	    if (isNumber(b)) {
	      throw new Error("Matrix.translate no longer accepts two numbers. Use translateXY");
	    }
	    if (isNumber(a)) {
	      x = y = a;
	    } else {
	      x = a.x, y = a.y;
	    }
	    return Matrix.translateXY(x, y);
	  };

	  Matrix.translateXY = function(x, y) {
	    if (x === 0 && y === 0) {
	      return identityMatrix;
	    } else {
	      return new Matrix(1, 1, 0, 0, x, y);
	    }
	  };

	  Matrix.scale = function(a) {
	    var x, y;
	    if (isNumber(a)) {
	      x = y = a;
	    } else {
	      x = a.x, y = a.y;
	    }
	    return Matrix.scaleXY(x, y);
	  };

	  Matrix.scaleXY = function(sx, sy) {
	    if (sx === 1 && sy === 1) {
	      return identityMatrix;
	    } else {
	      return new Matrix(sx, sy, 0, 0, 0, 0);
	    }
	  };

	  Matrix.rotate = function(radians) {
	    var cr, sr;
	    cr = Math.cos(radians);
	    sr = Math.sin(radians);
	    if (cr === 1 && sr === 0) {
	      return identityMatrix;
	    } else {
	      return new Matrix(cr, cr, -sr, sr, 0, 0);
	    }
	  };

	  Matrix.prototype.initDefaults = function() {
	    this.sx = this.sy = 1;
	    this.shy = this.shx = 0;
	    this.tx = this.ty = 0;
	    this._exactScale = this._exactScaler = null;
	    return this;
	  };

	  Matrix.prototype._init = function(a, b, c, d, e, f) {
	    this.initDefaults();
	    if (a == null) {
	      return;
	    }
	    if (a instanceof Point) {
	      return this._initFromPoint(a);
	    } else if (a instanceof Matrix) {
	      return this._initFromMatrix(a);
	    } else {
	      this.sx = a - 0;
	      if (b != null) {
	        this.sy = b - 0;
	      }
	      if (c != null) {
	        this.shx = c - 0;
	      }
	      if (d != null) {
	        this.shy = d - 0;
	      }
	      if (e != null) {
	        this.tx = e - 0;
	      }
	      if (f != null) {
	        return this.ty = f - 0;
	      }
	    }
	  };

	  Matrix.prototype._into = function(into, sx, sy, shx, shy, tx, ty) {
	    into = into === true ? this : into || new Matrix;
	    return into._setAll(sx, sy, shx, shy, tx, ty);
	  };

	  Matrix.prototype._setAll = function(sx, sy, shx, shy, tx, ty) {
	    this.sx = sx;
	    this.sy = sy;
	    this.shx = shx;
	    this.shy = shy;
	    this.tx = tx;
	    this.ty = ty;
	    return this;
	  };

	  Matrix.prototype.getScale = function() {
	    return getS();
	  };

	  Matrix.getter({
	    t: function() {
	      return point(this.tx, this.ty);
	    },
	    s: function() {
	      return point(this.sx, this.sy);
	    },
	    sh: function() {
	      return point(this.shx, this.shy);
	    },
	    xsv: function() {
	      return point(this.sx, this.shx);
	    },
	    ysv: function() {
	      return point(this.sy, this.shy);
	    },
	    exactScale: function() {
	      return this._exactScale || (this._exactScale = point(this.xsv.magnitude, this.ysv.magnitude));
	    },
	    exactScaler: function() {
	      return this._exactScaler || (this._exactScaler = this.exactScale.average());
	    },
	    inv: function() {
	      return this.invert();
	    },
	    locationX: function() {
	      return this.tx;
	    },
	    locationY: function() {
	      return this.ty;
	    },
	    scaleX: function() {
	      return this.sx;
	    },
	    scaleY: function() {
	      return this.sy;
	    },
	    location: function() {
	      return point(this.tx, this.ty);
	    },
	    withRoundedTranslation: function() {
	      if (this.translationIsIntegral) {
	        return this;
	      } else {
	        return new Matrix(this.sx, this.sy, this.shx, this.shy, Math.round(this.tx), Math.round(this.ty));
	      }
	    },
	    angle: function() {
	      var p1, p2;
	      p1 = this.transform(Point.point0);
	      p2 = this.transform(new Point(0, 1));
	      return (p2.sub(p1)).angle - Math.PI * .5;
	    },
	    float32Array: function() {
	      return this.fillFloat32Array(new Float32Array(9));
	    },
	    isIdentity: function() {
	      return float32Eq(this.sx, 1) && float32Eq(this.sy, 1) && float32Eq(this.shx, 0) && float32Eq(this.shy, 0) && float32Eq(this.tx, 0) && float32Eq(this.ty, 0);
	    },
	    isTranslateOnly: function() {
	      return float32Eq(this.sx, 1) && float32Eq(this.sy, 1) && float32Eq(this.shx, 0) && float32Eq(this.shy, 0);
	    },
	    translationIsIntegral: function() {
	      return float32Eq(this.tx, Math.round(this.tx)) && float32Eq(this.ty, Math.round(this.ty));
	    },
	    isIntegerTranslateOnly: function() {
	      return this.isTranslateOnly && float32Eq(this.tx, this.tx | 0) && float32Eq(this.ty, this.ty | 0);
	    },
	    isTranslateAndScaleOnly: function() {
	      return float32Eq(this.shx, 0) && float32Eq(this.shy, 0);
	    },
	    isTranslateAndPositiveScaleOnly: function() {
	      return this.sx > 0 && this.sy > 0 && float32Eq(this.shx, 0) && float32Eq(this.shy, 0);
	    }
	  });

	  Matrix.prototype.fillFloat32Array = function(a) {
	    a[0] = this.sx;
	    a[1] = this.shx;
	    a[2] = this.tx;
	    a[3] = this.shy;
	    a[4] = this.sy;
	    a[5] = this.ty;
	    return a;
	  };

	  Matrix.prototype.simplify = function() {
	    return new Matrix(simplifyNum(this.sx), simplifyNum(this.sy), simplifyNum(this.shx), simplifyNum(this.shy), simplifyNum(this.tx), simplifyNum(this.ty));
	  };

	  Matrix.prototype.withAngle = function(a) {
	    return this.rotate(a - this.angle);
	  };

	  Matrix.prototype.withScale = function(a, b) {
	    var x, y;
	    if (isNumber(a)) {
	      x = a;
	      y = b != null ? b : x;
	    } else {
	      x = a.x, y = a.y;
	    }
	    return this.scale(x / this.sx, y / this.sy);
	  };

	  Matrix.prototype.withLocation = function(a, b) {
	    var x, y;
	    if (isNumber(a)) {
	      x = a;
	      y = b != null ? b : x;
	    } else {
	      x = a.x, y = a.y;
	    }
	    if (x === this.tx && y === this.ty) {
	      return this;
	    } else {
	      return new Matrix(this.sx, this.sy, this.shx, this.shy, x, y);
	    }
	  };

	  Matrix.prototype.withLocationXY = function(x, y) {
	    if (x === this.tx && y === this.ty) {
	      return this;
	    } else {
	      return new Matrix(this.sx, this.sy, this.shx, this.shy, x, y);
	    }
	  };


	  /*
	  IN:
	    amount: point or number
	    into: t/f
	   */

	  Matrix.prototype.translate = function(amount, into) {
	    var x, y;
	    if (isNumber(amount)) {
	      x = y = amount;
	    } else {
	      x = amount.x, y = amount.y;
	    }
	    if (isNumber(into)) {
	      throw new Error("Illegal second input: number (" + into + "). Use translateXY.");
	    }
	    return this.translateXY(x, y, into);
	  };

	  Matrix.prototype.translateXY = function(x, y, into) {
	    return this._into(into, this.sx, this.sy, this.shx, this.shy, this.tx + x, this.ty + y);
	  };

	  Matrix.prototype.rotate = function(radians, into) {
	    var cr, sr;
	    cr = Math.cos(radians);
	    sr = Math.sin(radians);
	    return this._into(into, this.sx * cr - this.shy * sr, this.shx * sr + this.sy * cr, this.shx * cr - this.sy * sr, this.sx * sr + this.shy * cr, this.tx * cr - this.ty * sr, this.tx * sr + this.ty * cr);
	  };

	  Matrix.prototype.scale = function(a, into) {
	    var x, y;
	    if (isNumber(a)) {
	      x = y = a;
	    } else {
	      x = a.x, y = a.y;
	    }
	    return this.scaleXY(x, y, into);
	  };

	  Matrix.prototype.scaleXY = function(x, y, into) {
	    return this._into(into, this.sx * x, this.sy * y, this.shx * x, this.shy * y, this.tx * x, this.ty * y);
	  };

	  Matrix.getter({
	    determinantReciprocal: function() {
	      return 1.0 / (this.sx * this.sy - this.shy * this.shx);
	    }
	  });

	  Matrix.prototype.invert = function(into) {
	    var d;
	    d = this.getDeterminantReciprocal();
	    return this._into(into, d * this.sy, d * this.sx, d * -this.shx, d * -this.shy, d * (-this.tx * this.sy + this.ty * this.shx), d * (this.tx * this.shy - this.ty * this.sx));
	  };

	  Matrix.prototype.eq = function(m) {
	    if (this === m) {
	      return true;
	    }
	    return m && float32Eq(this.sx, m.sx) && float32Eq(this.sy, m.sy) && float32Eq(this.shx, m.shx) && float32Eq(this.shy, m.shy) && float32Eq(this.tx, m.tx) && float32Eq(this.ty, m.ty);
	  };

	  Matrix.prototype.lt = function(m) {
	    return this.sx < m.sx && this.sy < m.sy && this.shx < m.shx && this.shy < m.shy && this.tx < m.tx && this.ty < m.ty;
	  };

	  Matrix.prototype.gt = function(m) {
	    return this.sx > m.sx && this.sy > m.sy && this.shx > m.shx && this.shy > m.shy && this.tx > m.tx && this.ty > m.ty;
	  };

	  Matrix.prototype.lte = function(m) {
	    return this.sx <= m.sx && this.sy <= m.sy && this.shx <= m.shx && this.shy <= m.shy && this.tx <= m.tx && this.ty <= m.ty;
	  };

	  Matrix.prototype.gte = function(m) {
	    return this.sx >= m.sx && this.sy >= m.sy && this.shx >= m.shx && this.shy >= m.shy && this.tx >= m.tx && this.ty >= m.ty;
	  };

	  Matrix.prototype.add = function(m, into) {
	    into = into === true ? this : into || new Matrix;
	    return this._into(into, this.sx + m.sx, this.sy + m.sy, this.shx + m.shx, this.shy + m.shy, this.tx + m.tx, this.ty + m.ty);
	  };

	  Matrix.prototype.sub = function(m, into) {
	    return this._into(into, this.sx - m.sx, this.sy - m.sy, this.shx - m.shx, this.shy - m.shy, this.tx - m.tx, this.ty - m.ty);
	  };

	  Matrix.prototype.mul = function(m, into) {
	    if (isNumber(m)) {
	      return this._into(into, this.sx * m, this.sy * m, this.shx * m, this.shy * m, this.tx * m, this.ty * m);
	    } else {
	      return this._into(into, this.sx * m.sx + this.shy * m.shx, this.shx * m.shy + this.sy * m.sy, this.shx * m.sx + this.sy * m.shx, this.sx * m.shy + this.shy * m.sy, this.tx * m.sx + this.ty * m.shx + m.tx, this.tx * m.shy + this.ty * m.sy + m.ty);
	    }
	  };

	  Matrix.prototype.div = function(m, into) {
	    var multipler;
	    multipler = isNumber(m) ? 1 / m : m.invert(intermediatResultMatrix);
	    return this.mul(multipler, into);
	  };

	  Matrix.prototype.interpolate = function(toMatrix, p, into) {
	    var oneMinusP;
	    oneMinusP = 1 - p;
	    return this._into(into, toMatrix.sx * p + this.sx * oneMinusP, toMatrix.sy * p + this.sy * oneMinusP, toMatrix.shx * p + this.shx * oneMinusP, toMatrix.shy * p + this.shy * oneMinusP, toMatrix.tx * p + this.tx * oneMinusP, toMatrix.ty * p + this.ty * oneMinusP);
	  };

	  Matrix.prototype.toArray = toArray = function() {
	    return [this.sx, this.sy, this.shx, this.shy, this.tx, this.ty];
	  };

	  Matrix.prototype.toPlainStructure = {
	    sx: Matrix.sx,
	    sy: Matrix.sy,
	    shx: Matrix.shx,
	    shy: Matrix.shy,
	    tx: Matrix.tx,
	    ty: Matrix.ty
	  };

	  Matrix.prototype.toPlainEvalString = function() {
	    return "{sx:" + this.sx + ", sy:" + this.sy + ", shx:" + this.shx + ", shy:" + this.shy + ", tx:" + this.tx + ", ty:" + this.ty + "}";
	  };

	  Matrix.prototype.toString = function() {
	    return this.toArray().join(", ");
	  };

	  Matrix.getter({
	    inspectedString: function() {
	      return "matrix(" + (this.toString()) + ")";
	    }
	  });

	  Matrix.prototype.inspectX = function(pointName, nullForZeroString) {
	    var pn;
	    pn = pointName;
	    pointName = pointName ? pointName + "." : "";
	    if (!(this.sx || this.shx || this.tx)) {
	      return (!nullForZeroString ? "0" : void 0);
	    }
	    return cleanInspect(pn, compact([this.sx === 1 ? pointName + "x" : this.sx ? "" + this.sx + pointName + "x" : void 0, this.shx === 1 ? pointName + "y" : this.shx ? "" + this.shx + pointName + "y" : void 0, this.tx ? "" + this.tx : void 0]).join(" + "));
	  };

	  Matrix.prototype.inspectY = function(pointName, nullForZeroString) {
	    var pn;
	    pn = pointName;
	    pointName = pointName ? pointName + "." : "";
	    if (!(this.sy || this.shy || this.ty)) {
	      return (!nullForZeroString ? "0" : void 0);
	    }
	    return cleanInspect(pn, compact([this.sy === 1 ? pointName + "y" : this.sy ? "" + this.sy + pointName + "y" : void 0, this.shy === 1 ? pointName + "x" : this.shy ? "" + this.shy + pointName + "x" : void 0, this.ty ? "" + this.ty : void 0]).join(" + "));
	  };

	  Matrix.prototype.inspectBoth = function(pointName) {
	    return "(" + (this.inspectX(pointName)) + ", " + (this.inspectY(pointName)) + ")";
	  };

	  transform1D = function(x, y, sx, shx, tx) {
	    return x * sx + y * shx + tx;
	  };


	  /*
	  IN: a: Point or any object where .x and .y are numbers
	  IN: a: x (number; required), b: y (number, default: x)
	   */

	  Matrix.prototype.transform = function(a, b) {
	    var x, y;
	    if (isNumber(a)) {
	      x = a;
	      y = b != null ? b : x;
	    } else {
	      x = a.x, y = a.y;
	    }
	    return new Point(transform1D(x, y, this.sx, this.shx, this.tx), transform1D(y, x, this.sy, this.shy, this.ty));
	  };

	  Matrix.prototype.transformX = function(x, y) {
	    return transform1D(x, y, this.sx, this.shx, this.tx);
	  };

	  Matrix.prototype.transformY = function(x, y) {
	    return transform1D(y, x, this.sy, this.shy, this.ty);
	  };

	  Matrix.prototype.inverseTransform = function(a, b) {
	    var d, shx, shy, sx, sy, tx, ty, x, y;
	    if (isNumber(a)) {
	      x = a;
	      y = b != null ? b : x;
	    } else {
	      x = a.x, y = a.y;
	    }
	    d = this.getDeterminantReciprocal();
	    sx = d * this.sy;
	    sy = d * this.sx;
	    shx = d * -this.shx;
	    shy = d * -this.shy;
	    tx = d * (-this.tx * this.sy + this.ty * this.shx);
	    ty = d * (this.tx * this.shy - this.ty * this.sx);
	    return new Point(transform1D(x, y, sx, shx, tx), transform1D(y, x, sy, shy, ty));
	  };

	  Matrix.prototype.transformVector = function(a, b) {
	    var dx, dy;
	    switch ((a != null) && a.constructor) {
	      case false:
	        dx = dy = 0;
	        break;
	      case Point:
	        dx = a.x;
	        dy = a.y;
	        break;
	      default:
	        dx = a;
	        dy = b;
	    }
	    return new Point(dx * this.sx + dy * this.shx, dy * this.sy + dx * this.shy);
	  };

	  Matrix.prototype.transformDifference = function(v1, v2) {
	    var dx, dy;
	    dx = v1.x - v2.x;
	    dy = v1.y - v2.y;
	    return new Point(dx * this.sx + dy * this.shx, dy * this.sy + dx * this.shy);
	  };

	  Matrix.prototype.transformBoundingRect = function(r) {
	    var bottom, h, left, right, top, w, x, x1, x2, x3, x4, y, y1, y2, y3, y4;
	    r = rect(r);
	    if (r.infinite) {
	      return r;
	    }
	    if (this.shx === 0 && this.shy === 0) {
	      x = r.x * this.sx + this.tx;
	      y = r.y * this.sy + this.ty;
	      w = r.w * this.sx;
	      h = r.h * this.sy;
	      if (w < 0) {
	        x += w;
	        w = -w;
	      }
	      if (h < 0) {
	        y += h;
	        h = -h;
	      }
	    } else {
	      top = r.x;
	      left = r.y;
	      right = r.x + r.w;
	      bottom = r.y + r.h;
	      x1 = left * this.sx + top * this.shx + this.tx;
	      y1 = top * this.sy + left * this.shy + this.ty;
	      x2 = right * this.sx + top * this.shx + this.tx;
	      y2 = top * this.sy + right * this.shy + this.ty;
	      x3 = right * this.sx + bottom * this.shx + this.tx;
	      y3 = bottom * this.sy + right * this.shy + this.ty;
	      x4 = left * this.sx + bottom * this.shx + this.tx;
	      y4 = bottom * this.sy + left * this.shy + this.ty;
	      x = Math.min(x1, x2, x3, x4);
	      w = Math.max(x1, x2, x3, x4) - x;
	      y = Math.min(y1, y2, y3, y4);
	      h = Math.max(y1, y2, y3, y4) - y;
	    }
	    return new Rectangle(x, y, w, h);
	  };

	  Matrix.identityMatrix = identityMatrix = new Matrix;

	  Matrix.matrix0 = new Matrix(0, 0, 0, 0, 0, 0);

	  intermediatResultMatrix = new Matrix;

	  Matrix.prototype._initFromMatrix = function(m) {
	    this.sx = m.sx;
	    this.sy = m.sy;
	    this.shx = m.shx;
	    this.shy = m.shy;
	    this.tx = m.tx;
	    this.ty = m.ty;
	    return this;
	  };

	  Matrix.prototype._initFromPoint = function(p) {
	    this.tx = p.x;
	    this.ty = p.y;
	    return this;
	  };

	  return Matrix;

	})(AtomicBase);


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	var AtomicBase, Foundation, PI, Point, abs, atan, bound, ceil, floatEq, floor, inspect, isArray, isFunction, isNumber, isString, log, max, min, nearInfinity, round, sqrt, stringToNumberArray,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	AtomicBase = __webpack_require__(99);

	inspect = Foundation.inspect, bound = Foundation.bound, floatEq = Foundation.floatEq, log = Foundation.log, isNumber = Foundation.isNumber, isArray = Foundation.isArray, isString = Foundation.isString, isFunction = Foundation.isFunction, stringToNumberArray = Foundation.stringToNumberArray, nearInfinity = Foundation.nearInfinity;

	abs = Math.abs, sqrt = Math.sqrt, atan = Math.atan, PI = Math.PI, floor = Math.floor, ceil = Math.ceil, round = Math.round, min = Math.min, max = Math.max;

	module.exports = Point = (function(superClass) {
	  var bottomLeft, centerCenter, centerLeft, k, namedPoints, point, point0, point1, ref, toArray, toString, topCenter, topRight, v;

	  extend(Point, superClass);

	  function Point() {
	    return Point.__super__.constructor.apply(this, arguments);
	  }

	  Point.isPoint = function(v) {
	    return v instanceof Point;
	  };

	  Point.point = point = function(a, b) {
	    var p, x, y;
	    if (a instanceof Point) {
	      return a;
	    }
	    if (isString(a) && (p = namedPoints[a])) {
	      return p;
	    }
	    x = a || 0;
	    y = b != null ? b : a;
	    if (x === 0 && y === 0) {
	      return point0;
	    }
	    if (x === 1 && y === 1) {
	      return point1;
	    }
	    return new Point(a, b);
	  };

	  Point.parse = function(string, existing) {
	    if (existing) {
	      throw new Error("existing feature is no longer supported");
	    }
	    return new Point(string);
	  };

	  Point.prototype._init = function(x, y) {
	    x || (x = 0);
	    if (y == null) {
	      y = x;
	    }
	    this.x = x - 0;
	    return this.y = y - 0;
	  };

	  Point.prototype._initFromObject = function(o) {
	    this.x = o.x || 0;
	    return this.y = o.y || 0;
	  };

	  Point.getter({
	    top: function() {
	      return 0;
	    },
	    left: function() {
	      return 0;
	    },
	    right: function() {
	      return this.x;
	    },
	    bottom: function() {
	      return this.y;
	    },
	    centerX: function() {
	      return this.x * .5;
	    },
	    centerY: function() {
	      return this.y * .5;
	    },
	    tl: function() {
	      return point0;
	    },
	    tc: function() {
	      return this.mul(0.5, 0);
	    },
	    tr: function() {
	      return this.mul(1, 0);
	    },
	    lc: function() {
	      return this.mul(0, 0.5);
	    },
	    cc: function() {
	      return this.mul(0.5, 0.5);
	    },
	    rc: function() {
	      return this.mul(1, 0.5);
	    },
	    bl: function() {
	      return this.mul(0, 1);
	    },
	    bc: function() {
	      return this.mul(0.5, 1);
	    },
	    br: function() {
	      return this;
	    },
	    ccNeg: function() {
	      return this.mul(-0.5);
	    },
	    topLeft: function() {
	      return point0;
	    },
	    topCenter: function() {
	      return this.mul(0.5, 0);
	    },
	    topRight: function() {
	      return this.mul(1, 0);
	    },
	    centerLeft: function() {
	      return this.mul(0, 0.5);
	    },
	    centerCenter: function() {
	      return this.mul(0.5, 0.5);
	    },
	    centerRight: function() {
	      return this.mul(1, 0.5);
	    },
	    bottomLeft: function() {
	      return this.mul(0, 1);
	    },
	    bottomCenter: function() {
	      return this.mul(0.5, 1);
	    },
	    bottomRight: function() {
	      return this;
	    },
	    w: function() {
	      return this.x;
	    },
	    width: function() {
	      return this.x;
	    },
	    h: function() {
	      return this.y;
	    },
	    height: function() {
	      return this.y;
	    },
	    neg: function() {
	      return new Point(-this.x, -this.y);
	    },
	    inv: function() {
	      return new Point(1.0 / this.x, 1.0 / this.y);
	    },
	    vector: function() {
	      return [this.x, this.y];
	    },
	    magnitudeSquared: function() {
	      return this.x * this.x + this.y * this.y;
	    },
	    magnitude: function() {
	      return sqrt(this.x * this.x + this.y * this.y);
	    },
	    aspectRatio: function() {
	      return this.x / this.y;
	    },
	    absoluteAspectRatio: function() {
	      return abs(this.x / this.y);
	    },
	    swapped: function() {
	      return point(this.y, this.x);
	    },
	    rounded: function() {
	      return this.round();
	    },
	    floored: function() {
	      return this.floor();
	    },
	    ceiled: function() {
	      return this.ceil();
	    },
	    area: function() {
	      return this.x * this.y;
	    },
	    sum: function() {
	      return this.x + this.y;
	    },
	    size: function() {
	      return this;
	    },
	    location: function() {
	      return point0;
	    },
	    abs: function() {
	      return this["with"](abs(this.x), abs(this.y));
	    },
	    unitVector: function() {
	      var m;
	      m = 1 / this.magnitude;
	      return new Point(this.x * m, this.y * m);
	    },
	    perpendicularVector: function() {
	      return new Point(this.y, -this.x);
	    },
	    unitPerpendicularVector: function() {
	      var m;
	      m = 1 / this.magnitude;
	      return new Point(this.y * m, -this.x * m);
	    },
	    angle: function() {
	      if (this.x === 0) {
	        return PI * (this.y > 0 ? .5 : 1.5);
	      } else {
	        if (this.x > 0) {
	          return atan(this.y / this.x);
	        } else {
	          return atan(this.y / this.x) + PI;
	        }
	      }
	    },
	    isInteger: function() {
	      return floatEq(this.x, this.x | 0) && floatEq(this.y, this.y | 0);
	    }
	  });

	  Point.prototype.distance = function(p2) {
	    return sqrt(this.distanceSquared(p2));
	  };

	  Point.prototype.distanceSquared = function(p2) {
	    var x, y;
	    x = this.x - p2.x;
	    y = this.y - p2.y;
	    return x * x + y * y;
	  };

	  Point.prototype.withX = function(x) {
	    if (floatEq(this.x, x)) {
	      return this;
	    } else {
	      return point(x, this.y);
	    }
	  };

	  Point.prototype.withY = function(y) {
	    if (floatEq(this.y, y)) {
	      return this;
	    } else {
	      return point(this.x, y);
	    }
	  };

	  Point.prototype["with"] = function(x, y) {
	    if (this._eqParts(x, y)) {
	      return this;
	    } else {
	      return new Point(x, y);
	    }
	  };

	  Point.prototype.vectorLength = 2;

	  Point.prototype.toIndex = function(lineStride) {
	    return ~~this.y * lineStride + ~~this.x;
	  };

	  Point.prototype.contains = function(p) {
	    return p.x >= 0 && p.y >= 0 && p.x < this.x & p.y < this.y;
	  };

	  Point.prototype.nearestInsidePoint = function(p) {
	    return this["with"](bound(0, p.x, this.x), bound(0, p.y, this.y));
	  };

	  Point.prototype.appendToVector = function(vector) {
	    var l;
	    l = vector.length;
	    vector[l + 1] = this.y;
	    return vector[l] = this.x;
	  };

	  Point.prototype._eqParts = function(x, y) {
	    return floatEq(x, this.x) && floatEq(y, this.y);
	  };

	  Point.prototype.eq = function(b) {
	    return this === b || (b && this._eqParts(b.x, b.y));
	  };

	  Point.prototype.lt = function(b) {
	    return this.x < b.x && this.y < b.y;
	  };

	  Point.prototype.gt = function(b) {
	    return this.x > b.x && this.y > b.y;
	  };

	  Point.prototype.lte = function(b) {
	    return this.x <= b.x && this.y <= b.y;
	  };

	  Point.prototype.gte = function(b) {
	    return this.x >= b.x && this.y >= b.y;
	  };

	  Point.prototype.between = function(a, b) {
	    var x, y;
	    x = this.x, y = this.y;
	    return a.x <= x && a.y <= y && x <= b.x && y <= b.y;
	  };

	  Point.prototype.add = function(b, c) {
	    if (b instanceof Point) {
	      return this["with"](this.x + b.x, this.y + b.y);
	    } else if (c == null) {
	      return this["with"](this.x + b, this.y + b);
	    } else {
	      return this["with"](this.x + b, this.y + c);
	    }
	  };

	  Point.prototype.sub = function(b, c) {
	    if (b instanceof Point) {
	      return this["with"](this.x - b.x, this.y - b.y);
	    } else if (c == null) {
	      return this["with"](this.x - b, this.y - b);
	    } else {
	      return this["with"](this.x - b, this.y - c);
	    }
	  };

	  Point.prototype.mul = function(b, c) {
	    if (b instanceof Point) {
	      return this["with"](this.x * b.x, this.y * b.y);
	    } else if (c == null) {
	      return this["with"](this.x * b, this.y * b);
	    } else {
	      return this["with"](this.x * b, this.y * c);
	    }
	  };

	  Point.prototype.div = function(b, c) {
	    if (b instanceof Point) {
	      return this["with"](this.x / b.x, this.y / b.y);
	    } else if (c == null) {
	      return this["with"](this.x / b, this.y / b);
	    } else {
	      return this["with"](this.x / b, this.y / c);
	    }
	  };

	  Point.prototype.interpolate = function(toPoint, p) {
	    var oneMinusP;
	    oneMinusP = 1 - p;
	    return new Point(toPoint.x * p + this.x * oneMinusP, toPoint.y * p + this.y * oneMinusP);
	  };

	  Point.prototype.dot = function(p) {
	    return this.x * p.x + this.y * p.y;
	  };

	  Point.prototype.cross = function(p) {
	    return this.x * p.y - this.y * p.x;
	  };

	  Point.prototype.toString = toString = function(precision) {
	    if (precision) {
	      return "[" + (this.x.toPrecision(precision)) + ", " + (this.y.toPrecision(precision)) + ")]";
	    } else {
	      return "[" + this.x + ", " + this.y + "]";
	    }
	  };

	  Point.prototype.toJson = toString;

	  Point.prototype.toArray = toArray = function() {
	    return [this.x, this.y];
	  };

	  Point.prototype.toPlainStructure = function() {
	    return {
	      x: this.x,
	      y: this.y
	    };
	  };

	  Point.prototype.toPlainEvalString = function() {
	    return "{x:" + this.x + ", y:" + this.y + "}";
	  };

	  Point.getter({
	    inspectedString: function() {
	      return "point(" + this.x + ", " + this.y + ")";
	    }
	  });

	  Point.prototype.floor = function() {
	    return this["with"](floor(this.x), floor(this.y));
	  };

	  Point.prototype.ceil = function() {
	    return this["with"](ceil(this.x), ceil(this.y));
	  };

	  Point.prototype.union = function(b) {
	    if (b instanceof Point) {
	      return this.max(b);
	    } else {
	      return b.union(this);
	    }
	  };

	  Point.prototype.intersection = function(b) {
	    if (b instanceof Point) {
	      return this.min(b);
	    } else {
	      return b.intersection(this);
	    }
	  };

	  Point.prototype.min = function(b) {
	    if (b == null) {
	      b = null;
	    }
	    if (b) {
	      return this["with"](min(this.x, b.x), min(this.y, b.y));
	    } else {
	      return min(this.x, this.y);
	    }
	  };

	  Point.prototype.max = function(b) {
	    if (b == null) {
	      b = null;
	    }
	    if (b) {
	      return this["with"](max(this.x, b.x), max(this.y, b.y));
	    } else {
	      return max(this.x, this.y);
	    }
	  };

	  Point.prototype.average = function(b) {
	    if (b == null) {
	      b = null;
	    }
	    if (b) {
	      return this["with"]((this.x + b.x) / 2, (this.y + b.y) / 2);
	    } else {
	      return (this.x + this.y) / 2;
	    }
	  };

	  Point.prototype.bound = function(a, b) {
	    return this["with"](bound(a.x, this.x, b.x), bound(a.y, this.y, b.y));
	  };

	  Point.prototype.round = function(m) {
	    if (m == null) {
	      m = 1;
	    }
	    return this["with"](round(this.x / m) * m, round(this.y / m) * m);
	  };

	  Point.prototype.roundOut = function() {
	    return this.ceil();
	  };


	  /*
	  OUT:
	    out.aspectRatio == @aspectRatio
	    out <= into
	    out.x == into.x or out.y == into.y
	  proposed rename: scaledJustLte
	   */

	  Point.prototype.fitInto = function(into) {
	    var xr, yr;
	    xr = into.x / this.x;
	    yr = into.y / this.y;
	    return this.mul(min(xr, yr));
	  };


	  /*
	  OUT:
	    out.aspectRatio == @aspectRatio
	    out >= into
	    out.x == into.x or out.y == into.y
	  
	  KEYWORD: I used to call this 'zoom'
	  proposed rename: scaledJustGte
	   */

	  Point.prototype.fill = function(into) {
	    var xr, yr;
	    xr = into.x / this.x;
	    yr = into.y / this.y;
	    return this.mul(max(xr, yr));
	  };


	  /*
	  OUT:
	    out.aspectRatio == @aspectRatio
	    out.area == p.area
	   */

	  Point.prototype.withSameAreaAs = function(p) {
	    return this.mul(Math.sqrt(p.area / this.area));
	  };

	  point0 = Object.freeze(new Point(0));

	  point1 = Object.freeze(new Point(1));

	  topRight = Object.freeze(new Point(1, 0));

	  topCenter = Object.freeze(new Point(0.5, 0));

	  centerLeft = Object.freeze(new Point(0, 0.5));

	  centerCenter = Object.freeze(new Point(0.5));

	  bottomLeft = Object.freeze(new Point(0, 1));

	  Point.namedPoints = namedPoints = {
	    point0: point0,
	    point1: point1,
	    topLeft: point0,
	    topCenter: topCenter,
	    topRight: topRight,
	    centerLeft: centerLeft,
	    centerCenter: centerCenter,
	    centerRight: Object.freeze(new Point(1, 0.5)),
	    bottomLeft: bottomLeft,
	    bottomCenter: Object.freeze(new Point(0.5, 1)),
	    bottomRight: point1,
	    pointNearInfinity: Object.freeze(new Point(nearInfinity)),
	    left: point0,
	    center: topCenter,
	    right: topRight,
	    top: point0,
	    bottom: bottomLeft
	  };

	  ref = Point.namedPoints;
	  for (k in ref) {
	    v = ref[k];
	    Point[k] = v;
	  }

	  return Point;

	})(AtomicBase);


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, AtomicBase, Foundation, Point, Rectangle, bound, ceil, floatEq, floor, isArray, isFunction, isNumber, isString, log, max, min, point, round, stringToNumberArray,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(95);

	AtomicBase = __webpack_require__(99);

	Point = __webpack_require__(101);

	max = Foundation.max, min = Foundation.min, bound = Foundation.bound, round = Foundation.round, floatEq = Foundation.floatEq, floor = Foundation.floor, ceil = Foundation.ceil, round = Foundation.round, log = Foundation.log, isNumber = Foundation.isNumber, isArray = Foundation.isArray, isString = Foundation.isString, isFunction = Foundation.isFunction, stringToNumberArray = Foundation.stringToNumberArray;

	point = Point.point;

	module.exports = Rectangle = (function(superClass) {
	  var rect, toArray;

	  extend(Rectangle, superClass);

	  function Rectangle() {
	    return Rectangle.__super__.constructor.apply(this, arguments);
	  }

	  Rectangle.rect = rect = function(a, b, c, d) {
	    if (a instanceof Rectangle) {
	      return a;
	    }
	    return new Rectangle(a, b, c, d);
	  };

	  Rectangle.prototype._init = function(a, b, c, d) {
	    this.x = this.y = this.w = this.h = 0;
	    if (d != null) {
	      this.x = a - 0;
	      this.y = b - 0;
	      this.w = c - 0;
	      return this.h = d - 0;
	    } else if (b != null) {
	      if (b instanceof Point) {
	        this.x = a.x;
	        this.y = a.y;
	        this.w = b.w;
	        return this.h = b.h;
	      } else {
	        this.w = a - 0;
	        return this.h = b - 0;
	      }
	    } else if (a instanceof Point) {
	      this.w = a.w;
	      return this.h = a.h;
	    } else if (a != null) {
	      return this.w = this.h = a - 0;
	    }
	  };

	  Rectangle.getter({
	    clone: function() {
	      return new Rectangle(this.x, this.y, this.w, this.h);
	    },
	    location: function() {
	      return new Point(this.x, this.y);
	    },
	    locationMatrix: function() {
	      return Atomic.Matrix.translateXY(this.x, this.y);
	    },
	    size: function() {
	      return new Point(this.w, this.h);
	    },
	    width: function() {
	      return this.w;
	    },
	    height: function() {
	      return this.h;
	    },
	    rounded: function() {
	      return this["with"](round(this.x), round(this.y), round(this.w), round(this.h));
	    },
	    tl: function() {
	      return new Point(this.x, this.y);
	    },
	    tc: function() {
	      return new Point(this.hCenter, this.y);
	    },
	    tr: function() {
	      return new Point(this.right, this.y);
	    },
	    lc: function() {
	      return new Point(this.x, this.vCenter);
	    },
	    cc: function() {
	      return new Point(this.hCenter, this.vCenter);
	    },
	    rc: function() {
	      return new Point(this.right, this.vCenter);
	    },
	    bl: function() {
	      return new Point(this.x, this.bottom);
	    },
	    bc: function() {
	      return new Point(this.hCenter, this.bottom);
	    },
	    br: function() {
	      return new Point(this.right, this.bottom);
	    },
	    topLeft: function() {
	      return new Point(this.x, this.y);
	    },
	    topCenter: function() {
	      return new Point(this.hCenter, this.y);
	    },
	    topRight: function() {
	      return new Point(this.right, this.y);
	    },
	    centerLeft: function() {
	      return new Point(this.x, this.vCenter);
	    },
	    centerCenter: function() {
	      return new Point(this.hCenter, this.vCenter);
	    },
	    centerRight: function() {
	      return new Point(this.right, this.vCenter);
	    },
	    bottomLeft: function() {
	      return new Point(this.x, this.bottom);
	    },
	    bottomCenter: function() {
	      return new Point(this.hCenter, this.bottom);
	    },
	    bottomRight: function() {
	      return new Point(this.right, this.bottom);
	    },
	    locationIsZero: function() {
	      return floatEq(this.x, 0) && floatEq(this.y, 0);
	    },
	    top: function() {
	      return this.y;
	    },
	    left: function() {
	      return this.x;
	    },
	    right: function() {
	      return this.x + this.w;
	    },
	    bottom: function() {
	      return this.y + this.h;
	    },
	    hCenter: function() {
	      return this.x + this.w * .5;
	    },
	    vCenter: function() {
	      return this.y + this.h * .5;
	    },
	    infinite: function() {
	      return this.w === Infinity || this.h === Infinity;
	    },
	    normalized: function() {
	      var h, w, x, y;
	      w = this.w;
	      h = this.h;
	      if (w >= 0 && h >= 0) {
	        return this;
	      } else {
	        x = this.x;
	        y = this.y;
	        if (w < 0) {
	          x += w;
	          w = -w;
	        }
	        if (h < 0) {
	          y += h;
	          h = -h;
	        }
	        return this["with"](x, y, w, h);
	      }
	    },
	    area: function() {
	      return this.w * this.h;
	    },
	    corners: function() {
	      var bottom, left, right, top;
	      left = this.left;
	      top = this.top;
	      right = this.right;
	      bottom = this.bottom;
	      return [new Point(left, top), new Point(right, top), new Point(right, bottom), new Point(left, bottom)];
	    }
	  });

	  Rectangle.prototype.add = function(b) {
	    var h, w, x, y;
	    if (isNumber(b)) {
	      x = y = w = h = b;
	    } else {
	      x = b.x, y = b.y, w = b.w, h = b.h;
	    }
	    return this["with"](this.x + x, this.y + y, this.w + w, this.h + h);
	  };

	  Rectangle.prototype.sub = function(b) {
	    var h, w, x, y;
	    if (isNumber(b)) {
	      x = y = w = h = b;
	    } else {
	      x = b.x, y = b.y, w = b.w, h = b.h;
	    }
	    return this["with"](this.x - x, this.y - y, this.w - w, this.h - h);
	  };

	  Rectangle.prototype.mul = function(b) {
	    var h, w, x, y;
	    if (isNumber(b)) {
	      x = y = w = h = b;
	    } else {
	      x = b.x, y = b.y, w = b.w, h = b.h;
	    }
	    return this["with"](this.x * x, this.y * y, this.w * w, this.h * h);
	  };

	  Rectangle.prototype.div = function(b) {
	    var h, w, x, y;
	    if (isNumber(b)) {
	      x = y = w = h = b;
	    } else {
	      x = b.x, y = b.y, w = b.w, h = b.h;
	    }
	    return this["with"](this.x / x, this.y / y, this.w / w, this.h / h);
	  };

	  Rectangle.prototype.lt = function(b) {
	    return this.x < b.x && this.y < b.y && this.w < b.w && this.h < b.h;
	  };

	  Rectangle.prototype.gt = function(b) {
	    return this.x > b.x && this.y > b.y && this.w > b.w && this.h > b.h;
	  };

	  Rectangle.prototype.lte = function(b) {
	    return this.x <= b.x && this.y <= b.y && this.w <= b.w && this.h <= b.h;
	  };

	  Rectangle.prototype.gte = function(b) {
	    return this.x >= b.x && this.y >= b.y && this.w >= b.w && this.h >= b.h;
	  };

	  Rectangle.prototype.interpolate = function(toRect, p) {
	    var oneMinusP;
	    if (floatEq(p, 0)) {
	      return this;
	    }
	    if (floatEq(p, 1)) {
	      return toRect;
	    }
	    oneMinusP = 1 - p;
	    return new Rectangle(toRect.x * p + this.x * oneMinusP, toRect.y * p + this.y * oneMinusP, toRect.w * p + this.w * oneMinusP, toRect.h * p + this.h * oneMinusP);
	  };

	  Rectangle.prototype.withX = function(v) {
	    if (floatEq(v, this.x)) {
	      return this;
	    } else {
	      return new Rectangle(v, this.y, this.w, this.h);
	    }
	  };

	  Rectangle.prototype.withY = function(v) {
	    if (floatEq(v, this.y)) {
	      return this;
	    } else {
	      return new Rectangle(this.x, v, this.w, this.h);
	    }
	  };

	  Rectangle.prototype.withXY = function(x, y) {
	    if (floatEq(x, this.x) && floatEq(y, this.y)) {
	      return this;
	    } else {
	      return new Rectangle(x, y, this.w, this.h);
	    }
	  };

	  Rectangle.prototype.withW = function(v) {
	    if (floatEq(v, this.w)) {
	      return this;
	    } else {
	      return new Rectangle(this.x, this.y, v, this.h);
	    }
	  };

	  Rectangle.prototype.withH = function(v) {
	    if (floatEq(v, this.h)) {
	      return this;
	    } else {
	      return new Rectangle(this.x, this.y, this.w, v);
	    }
	  };

	  Rectangle.prototype.withWH = function(w, h) {
	    if (floatEq(w, this.w) && floatEq(h, this.h)) {
	      return this;
	    } else {
	      return new Rectangle(this.x, this.y, w, h);
	    }
	  };

	  Rectangle.prototype.withLocation = function(v) {
	    return this.withXY(v.x, v.y);
	  };

	  Rectangle.prototype.withSize = function(v) {
	    return this.withWH(v.x, v.y);
	  };

	  Rectangle.prototype["with"] = function(x, y, w, h) {
	    if (this._eqParts(x, y, w, h)) {
	      return this;
	    } else {
	      return new Rectangle(x, y, w, h);
	    }
	  };

	  Rectangle.prototype.movedBy = function(d) {
	    return this.withXY(this.x + d.x, this.y + d.y);
	  };

	  Rectangle.prototype._eqParts = function(x, y, w, h) {
	    return floatEq(this.x, x) && floatEq(this.y, y) && floatEq(this.w, w) && floatEq(this.h, h);
	  };

	  Rectangle.prototype.eq = function(b) {
	    return this === b || (b && this._eqParts(b.x, b.y, b.w, b.h));
	  };

	  Rectangle.prototype.lt = function(b) {
	    return this.x < b.x && this.y < b.y && this.w < b.w && this.h < b.h;
	  };

	  Rectangle.prototype.gt = function(b) {
	    return this.x > b.x && this.y > b.y && this.w > b.w && this.h > b.h;
	  };

	  Rectangle.prototype.lte = function(b) {
	    return this.x <= b.x && this.y <= b.y && this.w <= b.w && this.h <= b.h;
	  };

	  Rectangle.prototype.gte = function(b) {
	    return this.x >= b.x && this.y >= b.y && this.w >= b.w && this.h >= b.h;
	  };

	  Rectangle.prototype.toString = function() {
	    return "[" + this.x + ", " + this.y + ", " + this.w + ", " + this.h + "]";
	  };

	  Rectangle.getter({
	    inspectedString: function() {
	      return "rect(" + this.x + ", " + this.y + ", " + this.w + ", " + this.h + ")";
	    }
	  });

	  Rectangle.prototype.toArray = toArray = function() {
	    return [this.x, this.y, this.w, this.h];
	  };

	  Rectangle.prototype.toPlainStructure = {
	    x: Rectangle.x,
	    y: Rectangle.y,
	    w: Rectangle.w,
	    h: Rectangle.h
	  };

	  Rectangle.prototype.toPlainEvalString = function() {
	    return "{x:" + this.x + ", y:" + this.y + ", w:" + this.w + ", h:" + this.h + "}";
	  };

	  Rectangle.prototype.nearestInsidePoint = function(p) {
	    return new Point(bound(this.left, p.x, this.right), bound(this.top, p.y, this.bottom));
	  };

	  Rectangle.prototype.largestInsideRect = function(ofSize) {
	    var h, scaler, w;
	    scaler = min(this.w / ofSize.w, this.h / ofSize.h);
	    w = ofSize.w * scale;
	    h = ofSize.h * scale;
	    return new Rectangle((this.w - w) / 2, (this.h - h) / 2, w, h);
	  };

	  Rectangle.prototype.overlaps = function(val) {
	    if (val == null) {
	      return false;
	    }
	    if (val instanceof Point) {
	      return this.contains(val);
	    } else if (val instanceof Rectangle) {
	      return val.getRight() > this.getLeft() && val.getBottom() > this.getTop() && val.getLeft() < this.getRight() && val.getTop() < this.getBottom();
	    } else {
	      throw new Error("Invalid arguments for 'overlaps'. Expecting Point or Rectangle. Got: " + val + ".");
	    }
	  };

	  Rectangle.prototype.contains = function(val) {
	    if (val == null) {
	      return false;
	    }
	    if (val instanceof Point) {
	      return val.x >= this.x && val.y >= this.y && val.x < this.right && val.y < this.bottom;
	    } else if (val instanceof Rectangle) {
	      return val.x >= this.x && val.y >= this.y && val.right <= this.right && val.bottom <= this.bottom;
	    } else {
	      throw new Error("Invalid arguments for 'contains'. Expecting Point or Rectangle. Got: " + val + ".");
	    }
	  };

	  Rectangle.prototype.round = function(m) {
	    var h, w, x, y;
	    if (m == null) {
	      m = 1;
	    }
	    x = round(this.x, m);
	    y = round(this.y, m);
	    w = round(this.x + this.w, m) - x;
	    h = round(this.y + this.h, m) - y;
	    return this["with"](x, y, w, h);
	  };

	  Rectangle.prototype.roundOut = function(m, k) {
	    var h, w, x, y;
	    if (m == null) {
	      m = 1;
	    }
	    if (k == null) {
	      k = 0;
	    }
	    x = floor(this.x + k, m);
	    y = floor(this.y + k, m);
	    w = ceil(this.x + this.w - k, m) - x;
	    h = ceil(this.y + this.h - k, m) - y;
	    return this["with"](x, y, w, h);
	  };

	  Rectangle.prototype.roundIn = function(m, k) {
	    var h, w, x, y;
	    if (m == null) {
	      m = 1;
	    }
	    if (k == null) {
	      k = 0;
	    }
	    x = ceil(this.x - k, m);
	    y = ceil(this.y - k, m);
	    w = floor(this.x + this.w + k, m) - x;
	    h = floor(this.y + this.h + k, m) - y;
	    return this["with"](x, y, w, h);
	  };

	  Rectangle.prototype.union = function(b) {
	    var h, w, x, y;
	    if (b == null) {
	      return this;
	    }
	    if (this.getArea() <= 0) {
	      return b;
	    }
	    x = min(this.x, b.left);
	    y = min(this.y, b.top);
	    w = max(this.getRight(), b.getRight()) - x;
	    h = max(this.getBottom(), b.getBottom()) - y;
	    return this["with"](x, y, w, h);
	  };

	  Rectangle.prototype.unionInto = function(into) {
	    var area, h, intoArea, w, x, y;
	    area = this.getArea();
	    intoArea = into.getArea();
	    if (area <= 0 || intoArea === Infinity) {
	      return into;
	    }
	    if (intoArea <= 0 || area === Infinity) {
	      into.x = this.x;
	      into.y = this.y;
	      into.w = this.w;
	      into.h = this.h;
	    } else {
	      x = into.x, y = into.y, w = into.w, h = into.h;
	      into.x = min(x, this.x);
	      into.y = min(y, this.y);
	      into.w = max(x + w, this.x + this.w) - into.x;
	      into.h = max(y + h, this.y + this.h) - into.y;
	    }
	    return into;
	  };

	  Rectangle.prototype.intersectInto = function(into) {
	    var area, h, intoArea, w, x, y;
	    area = this.getArea();
	    intoArea = into.getArea();
	    if (intoArea <= 0 || area === Infinity) {
	      return into;
	    }
	    if (area <= 0 || intoArea === Infinity) {
	      into.x = this.x;
	      into.y = this.y;
	      into.w = this.w;
	      return into.h = this.h;
	    } else {
	      x = into.x, y = into.y, w = into.w, h = into.h;
	      into.x = max(x, this.x);
	      into.y = max(y, this.y);
	      into.w = max(0, min(x + w, this.x + this.w) - into.x);
	      into.h = max(0, min(y + h, this.y + this.h) - into.y);
	      return into;
	    }
	  };

	  Rectangle.prototype.intersection = function(b) {
	    var h, w, x, y;
	    if (b == null) {
	      return this;
	    }
	    if (b.getArea() === Infinity || b.contains(this)) {
	      return this;
	    }
	    if (this.getArea() === Infinity || this.contains(b)) {
	      return b;
	    }
	    x = max(this.x, b.left);
	    y = max(this.y, b.top);
	    w = min(this.getRight(), b.getRight()) - x;
	    h = min(this.getBottom(), b.getBottom()) - y;
	    if (w <= 0 || h <= 0) {
	      return Rectangle.nothing;
	    } else {
	      return this["with"](x, y, w, h);
	    }
	  };

	  Rectangle.prototype.grow = function(a, b) {
	    var gx, gy;
	    if (a instanceof Point) {
	      gx = a.x;
	      gy = a.y;
	    } else {
	      gx = a;
	      gy = b != null ? b : a;
	    }
	    return this["with"](this.x - gx, this.y - gy, this.w + 2 * gx, this.h + 2 * gy);
	  };

	  Rectangle.nothing = Object.freeze(new Rectangle(0, 0, 0, 0));

	  Rectangle.everything = Object.freeze(new Rectangle(0, 0, Infinity, Infinity));

	  return Rectangle;

	})(AtomicBase);


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var AtomicBase, Foundation, Perimeter, Point, floatEq, inspect, isPlainObject, isString, log, point,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	AtomicBase = __webpack_require__(99);

	Point = __webpack_require__(101);

	log = Foundation.log, inspect = Foundation.inspect, floatEq = Foundation.floatEq, isPlainObject = Foundation.isPlainObject, isString = Foundation.isString;

	point = Point.point;

	module.exports = Perimeter = (function(superClass) {
	  var k, namedPerimeters, perimeter, perimeter0, ref, toString, v;

	  extend(Perimeter, superClass);

	  function Perimeter() {
	    return Perimeter.__super__.constructor.apply(this, arguments);
	  }

	  Perimeter.perimeter = perimeter = function(a, b, c, d) {
	    var p;
	    if (a instanceof Perimeter) {
	      return a;
	    }
	    if (isString(a) && (p = namedPerimeters[a])) {
	      return p;
	    }
	    if ((b == null) && (floatEq(a, 0)) || !a) {
	      return perimeter0;
	    }
	    return new Perimeter(a, b, c, d);
	  };

	  Perimeter.prototype._initFields = function() {
	    return this.left = this.right = this.top = this.bottom = 0;
	  };

	  Perimeter.prototype._initFromObject = function(obj) {
	    this._initFields();
	    this.left = (obj.left || 0) + (obj.l || 0) + (obj.h || 0) + (obj.horizontal || 0);
	    this.right = (obj.right || 0) + (obj.r || 0) + (obj.h || 0) + (obj.horizontal || 0);
	    this.top = (obj.top || 0) + (obj.t || 0) + (obj.v || 0) + (obj.vertical || 0);
	    return this.bottom = (obj.bottom || 0) + (obj.b || 0) + (obj.v || 0) + (obj.vertical || 0);
	  };

	  Perimeter.prototype._init = function(a, b, c, d) {
	    var argLength;
	    this._initFields();
	    argLength = a != null ? b != null ? c != null ? d != null ? 4 : 3 : 2 : 1 : 0;
	    switch (argLength) {
	      case 0:
	        return this.left = this.right = this.top = this.bottom = 0;
	      case 1:
	        return this.left = this.right = this.top = this.bottom = a;
	      case 2:
	        this.left = this.right = a;
	        return this.top = this.bottom = b;
	      case 4:
	        this.left = a;
	        this.right = b;
	        this.top = c;
	        return this.bottom = d;
	      default:
	        throw new Error("invalid number of arguments: " + (inspect(arguments)));
	    }
	  };

	  Perimeter.namedPerimeters = namedPerimeters = {
	    perimeter0: perimeter0 = Object.freeze(new Perimeter(0))
	  };

	  ref = Perimeter.namedPerimeters;
	  for (k in ref) {
	    v = ref[k];
	    Perimeter[k] = v;
	  }

	  Perimeter.prototype.toArray = function() {
	    return [this.left, this.right, this.top, this.bottom];
	  };

	  Perimeter.prototype.toString = toString = function() {
	    return "[" + (this.toArray().join(', ')) + "]";
	  };

	  Perimeter.prototype.toJson = toString;

	  Perimeter.getter({
	    inspectedString: function() {
	      return "perimeter(" + (this.toArray().join(', ')) + ")";
	    }
	  });

	  Perimeter.getter({
	    width: function() {
	      return this.left + this.right;
	    },
	    height: function() {
	      return this.top + this.bottom;
	    },
	    w: function() {
	      return this.left + this.right;
	    },
	    h: function() {
	      return this.top + this.bottom;
	    }
	  });

	  Perimeter.prototype.toObject = function() {
	    return {
	      left: this.left,
	      right: this.right,
	      top: this.top,
	      bottom: this.bottom
	    };
	  };

	  Perimeter.prototype.subtractedFromSize = function(size) {
	    var h, w;
	    w = this.getWidth();
	    h = this.getHeight();
	    if (floatEq(w, 0) && floatEq(h, 0)) {
	      return size;
	    } else {
	      return point(size.x - w, size.y - h);
	    }
	  };

	  Perimeter.prototype.addedToSize = function(size) {
	    var h, w;
	    w = this.getWidth();
	    h = this.getHeight();
	    if (floatEq(w, 0) && floatEq(h, 0)) {
	      return size;
	    } else {
	      return point(size.x + w, size.y + h);
	    }
	  };

	  return Perimeter;

	})(AtomicBase);


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(105);


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	var Webgl;

	module.exports = Webgl = __webpack_require__(106);

	Webgl.Bitmap = __webpack_require__(108);

	Webgl.ContextManager = __webpack_require__(120);

	Webgl.Detector = __webpack_require__(128);

	Webgl.OffscreenRenderTarget = __webpack_require__(122);

	Webgl.Shader = __webpack_require__(121);

	Webgl.ShaderProgram = __webpack_require__(123);

	Webgl.ShaderPrograms = __webpack_require__(124);

	Webgl.ShaderRenderer = __webpack_require__(126);

	Webgl.ShaderRendererColored = __webpack_require__(125);

	Webgl.ShaderRendererTextured = __webpack_require__(127);

	Webgl.finishLoad(["Bitmap", "ContextManager", "Detector", "OffscreenRenderTarget", "Shader", "ShaderProgram", "ShaderPrograms", "ShaderRenderer", "ShaderRendererColored", "ShaderRendererTextured"]);


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(107);

	module.exports = Art.Webgl || (Art.Webgl = (function(superClass) {
	  extend(Webgl, superClass);

	  function Webgl() {
	    return Webgl.__super__.constructor.apply(this, arguments);
	  }

	  Webgl.namespace = Art;

	  Webgl.namespacePath = "Neptune.Art.Webgl";

	  return Webgl;

	})(Neptune.Base));

	Art.addNamespace(Art.Webgl);


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(109), __webpack_require__(106), __webpack_require__(120)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl, ContextManager) {
	  var Color, Matrix, Point, Rectangle, color, eq, inspect, matrix, point, rect, superSuperConstructor, white;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  inspect = Foundation.Inspect.inspect;
	  eq = Foundation.Eq.eq;
	  white = color(1, 1, 1, 1);
	  superSuperConstructor = Canvas.BitmapBase.__super__.constructor;
	  return Webgl.Bitmap = (function(superClass) {
	    extend(Bitmap, superClass);

	    Bitmap.supportedCompositeModes = Webgl.ContextManager.supportedCompositeModes;

	    Bitmap.getter({
	      supportedCompositeModes: function() {
	        return Bitmap.supportedCompositeModes;
	      }
	    });

	    function Bitmap(a, b) {
	      if (a instanceof Webgl.ContextManager) {
	        superSuperConstructor.apply(this, arguments);
	        this.initFromContextManager(a, b);
	      } else {
	        Bitmap.__super__.constructor.apply(this, arguments);
	      }
	    }

	    Bitmap.prototype.newBitmap = function(size) {
	      return new this.bitmapClass(this._contextManager, size || this.size).tap((function(_this) {
	        return function(b) {
	          return b.pixelsPerPoint = _this.pixelsPerPoint;
	        };
	      })(this));
	    };

	    Bitmap.prototype.setClippingArea = function(area) {
	      if (area) {
	        this._clippingArea = area = (area || rect(this.size)).roundIn(1, 1 / 256);
	        this._contextManager.viewport = this.texture ? area : rect(area.x, this.size.y - area.bottom, area.w, area.h);
	      } else {
	        this._contextManager.viewport = rect(this.size);
	        this._clippingArea = null;
	      }
	      return this.updateDrawMatrix();
	    };

	    Bitmap.prototype.clippedTo = function(area, f) {
	      var a, previousClippingArea;
	      previousClippingArea = this._clippingArea;
	      try {
	        this.setClippingArea(a = area.intersection(this._clippingArea));
	        return f();
	      } finally {
	        this.setClippingArea(previousClippingArea);
	      }
	    };

	    Bitmap.prototype.populateClone = function(result) {
	      result.initFromContextManager(this._contextManager, this.size);
	      return Bitmap.__super__.populateClone.apply(this, arguments);
	    };

	    Bitmap.prototype.initFromContextManager = function(cm, initializer) {
	      var ref;
	      this._contextManager = cm;
	      this._context = this._contextManager.context;
	      return ref = cm.newTexture(initializer), this._size = ref[0], this.texture = ref[1], ref;
	    };

	    Bitmap.prototype.initContext = function() {
	      this._contextManager = new Webgl.ContextManager(this._canvas);
	      return this._context = this._contextManager.context;
	    };

	    Bitmap.getter({
	      isTexture: function() {
	        return !!this.texture;
	      }
	    });

	    Bitmap.prototype.toMemoryDrawableBitmap = function() {
	      if (this.isTexture) {
	        return this.toMemoryBitmap();
	      } else {
	        return this;
	      }
	    };

	    Bitmap.prototype.toMemoryBitmap = function() {
	      var imageData, memoryBitmap;
	      memoryBitmap = new Canvas.Bitmap(this.size);
	      if (this.isTexture) {
	        imageData = memoryBitmap.context.createImageData(this.size.x, this.size.y);
	        this.fillImageData(imageData);
	        memoryBitmap.putImageData(imageData);
	      } else {
	        memoryBitmap.clear(color(0, 0, 0, 0));
	        memoryBitmap.drawBitmap(point(), this);
	      }
	      return memoryBitmap;
	    };

	    Bitmap.prototype.startGL = function(mode) {
	      if (mode == null) {
	        mode = "normal";
	      }
	      this._contextManager.setRenderTarget(this);
	      this._contextManager.setGLBlender(mode);
	      if (!this.drawMatrix) {
	        return this.updateDrawMatrix();
	      }
	    };

	    Bitmap.prototype.updateDrawMatrix = function() {
	      var size, sx, sy, tx, ty;
	      tx = ty = 0;
	      sx = sy = 1;
	      size = this._clippingArea ? (tx = -this._clippingArea.x, ty = -this._clippingArea.y, this._clippingArea.size) : this.size;
	      if (this.texture) {
	        sx = 2 / size.x;
	        sy = 2 / size.y;
	        tx = tx * sx - 1;
	        ty = ty * sy - 1;
	      } else {
	        sx = 2 / size.x;
	        sy = -2 / size.y;
	        tx = tx * sx - 1;
	        ty = ty * sy + 1;
	      }
	      return this.drawMatrix = new Matrix(sx, sy, 0, 0, tx, ty);
	    };

	    Bitmap.prototype.clear = function(a, b, c, d) {
	      var clr;
	      clr = a != null ? color(a, b, c, d) : color(0, 0, 0, 0);
	      this.startGL();
	      clr = clr.premultiplied;
	      this._context.clearColor(clr.r, clr.g, clr.b, clr.a);
	      return this._context.clear(this._context.COLOR_BUFFER_BIT);
	    };

	    Bitmap.prototype.drawRectangle = function(where, rectangle, options) {
	      var c, clr, compositeMode, fillStyle;
	      compositeMode = options.compositeMode, fillStyle = options.fillStyle;
	      clr = options.color;
	      rectangle = rect(rectangle);
	      if (this.shouldPixelSnap(where)) {
	        rectangle = this.pixelSnapRectangle(where, rectangle);
	      }
	      if (fillStyle instanceof Canvas.GradientFillStyle) {
	        return this.drawLinearGradientRectangle(where, rectangle, fillStyle, compositeMode);
	      } else {
	        c = color(clr).premultiplied;
	        this.startGL(compositeMode);
	        this._contextManager.uniformColorRenderer.renderRectangle(where, rectangle, c);
	        return this;
	      }
	    };

	    Bitmap.prototype.drawLinearGradientRectangle = function(where, rectangle, gfs, compositeMode) {
	      var factor, gfsBitmap, gp1, gp2, gradientV, xRect;
	      gfsBitmap = this.gradientBitmap(gfs, point(512, 1));
	      gp1 = gfs.from;
	      gp2 = gfs.to;
	      gradientV = gp2.sub(gp1);
	      factor = 1 / gradientV.magnitudeSquared;
	      xRect = rectangle instanceof Point ? rectangle = rect(rectangle) : rect(rectangle.size);
	      this.startGL(compositeMode);
	      this._contextManager.texturedUniformColorRenderer.renderRectangle(where, rectangle, white, function(renderer) {
	        var j, len, p, ref, results;
	        renderer.texture = gfsBitmap.texture;
	        ref = xRect.corners;
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          p = ref[j];
	          results.push(renderer.addTextureLocation(point(p.sub(gp1).dot(gradientV) * factor, 0)));
	        }
	        return results;
	      });
	      return this;
	    };

	    Bitmap.prototype.drawBitmap = function(where, bitmap, options) {
	      var bitmapSize, compositeMode, opacity, r, sourceArea;
	      if (!bitmap.texture) {
	        bitmap = this.newBitmap(bitmap);
	      }
	      if (options) {
	        sourceArea = options.sourceArea;
	        opacity = options.opacity;
	        compositeMode = options.compositeMode;
	      }
	      bitmapSize = bitmap.size;
	      opacity = opacity != null ? opacity : 1;
	      r = !sourceArea ? sourceArea = bitmapSize : sourceArea.x !== 0 || sourceArea.y !== 0 ? new Rectangle(0, 0, sourceArea.w, sourceArea.h) : sourceArea;
	      this.startGL(compositeMode);
	      this._contextManager.texturedUniformColorRenderer.renderRectangle(where, r, opacity, function(renderer) {
	        var data, xScaler, yScaler;
	        renderer.texture = bitmap.texture;
	        xScaler = 1 / bitmapSize.x;
	        yScaler = 1 / bitmapSize.y;
	        data = renderer.allocateTextureLocations(4);
	        data[0] = sourceArea.left * xScaler;
	        data[1] = sourceArea.top * yScaler;
	        data[2] = sourceArea.right * xScaler;
	        data[3] = sourceArea.top * yScaler;
	        data[4] = sourceArea.right * xScaler;
	        data[5] = sourceArea.bottom * yScaler;
	        data[6] = sourceArea.left * xScaler;
	        return data[7] = sourceArea.bottom * yScaler;
	      });
	      return this;
	    };

	    Bitmap.prototype.blur = function(radius, toClone) {
	      var mem;
	      this.log("WARNING: WebGL blurring not implemented efficiently, yet...");
	      mem = this.toMemoryBitmap().blur(radius);
	      toClone = toClone ? this.clone() : this;
	      toClone.drawBitmap(null, mem, {
	        compositeMode: "replace"
	      });
	      return toClone;
	    };

	    Bitmap.prototype.blurAlpha = function(radius, options) {
	      var mem, toClone;
	      this.log("WARNING: WebGL alpha-blurring not implemented efficiently, yet...");
	      toClone = (options != null ? options.clone : void 0) ? this.clone() : this;
	      options && (options.clone = null);
	      mem = this.toMemoryBitmap().blurAlpha(radius, options);
	      toClone.drawBitmap(null, mem, {
	        compositeMode: "replace"
	      });
	      return toClone;
	    };

	    Bitmap.prototype.setTransform = function() {
	      return 1;
	    };

	    Bitmap.prototype.fillText = function() {};

	    Bitmap.prototype.getImageData = function(a, b, c, d) {
	      var imageData, r;
	      if (!this.texture) {
	        return Bitmap.__super__.getImageData.apply(this, arguments);
	      }
	      r = a != null ? rect(a, b, c, d) : rect(this.size);
	      imageData = {
	        data: new Uint8Array(r.area * 4),
	        width: r.w,
	        height: r.h
	      };
	      this.fillImageData(imageData, r);
	      return imageData;
	    };

	    Bitmap.prototype.bindTexture = function() {
	      return this._context.bindTexture(this._context.TEXTURE_2D, this.texture);
	    };

	    Bitmap.prototype.demultiplyImageData = function(data) {
	      var a, b, g, i, j, len, m, r;
	      for (i = j = 0, len = data.length; j < len; i = j += 4) {
	        r = data[i];
	        g = data[i + 1];
	        b = data[i + 2];
	        a = data[i + 3];
	        m = 255.0 / a;
	        data[i] = r > a ? 255 : r * m;
	        data[i + 1] = g > a ? 255 : g * m;
	        data[i + 2] = b > a ? 255 : b * m;
	        if (r > a) {
	          data[i + 3] = a = r;
	        }
	        if (g > a) {
	          data[i + 3] = a = g;
	        }
	        if (b > a) {
	          data[i + 3] = a = b;
	        }
	      }
	      return null;
	    };

	    Bitmap.prototype.fillImageData = function(imageData, r) {
	      var data, i, j, len, results, tempData, v;
	      if (r == null) {
	        r = rect(this.size);
	      }
	      this.startGL();
	      data = imageData.data;
	      if (data.buffer) {
	        data = new Uint8Array(data.buffer);
	        this._context.readPixels(r.x, r.y, r.w, r.h, this._context.RGBA, this._context.UNSIGNED_BYTE, data);
	        return this.demultiplyImageData(data);
	      } else {
	        tempData = new Uint8Array(r.w * r.h * 4);
	        this._context.readPixels(r.x, r.y, r.w, r.h, this._context.RGBA, this._context.UNSIGNED_BYTE, tempData);
	        this.demultiplyImageData(tempData);
	        results = [];
	        for (i = j = 0, len = tempData.length; j < len; i = ++j) {
	          v = tempData[i];
	          results.push(data[i] = v);
	        }
	        return results;
	      }
	    };

	    Bitmap.prototype.gradientBitmap = function(gradientFillStyle, size) {
	      var bitmap, c, colorN, colors, i, j, lastC, lastX, len, r, renderer, w;
	      if (size == null) {
	        size = point(1024, 1);
	      }
	      bitmap = this.newBitmap(size);
	      colors = gradientFillStyle.premultipliedColorPositions;
	      lastX = 0;
	      lastC = colors[0].c;
	      w = size.x;
	      r = rect(0, 0, 0, size.y);
	      bitmap.startGL();
	      renderer = this._contextManager.coloredRenderer;
	      for (i = j = 0, len = colors.length; j < len; i = ++j) {
	        colorN = colors[i];
	        if (i > 0) {
	          r = rect(r.x, r.y, colorN.n * w - r.x, r.h);
	          c = colorN.c;
	          renderer.renderRectangle(null, r, white, function() {
	            renderer.addColor(lastC);
	            renderer.addColor(c);
	            renderer.addColor(c);
	            return renderer.addColor(lastC);
	          });
	          r = rect(r.right, r.y, r.w, r.h);
	          lastC = c;
	        }
	      }
	      return bitmap;
	    };

	    return Bitmap;

	  })(Canvas.BitmapBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	var Canvas;

	module.exports = Canvas = __webpack_require__(110);

	Canvas.Bitmap = __webpack_require__(111);

	Canvas.BitmapBase = __webpack_require__(113);

	Canvas.GoogleFontLoader = __webpack_require__(116);

	Canvas.GradientFillStyle = __webpack_require__(112);

	Canvas.Paths = __webpack_require__(114);

	Canvas.StackBlur = __webpack_require__(115);

	Canvas.StackBlurOriginal = __webpack_require__(118);

	Canvas.finishLoad(["Bitmap", "BitmapBase", "GoogleFontLoader", "GradientFillStyle", "Paths", "StackBlur", "StackBlurOriginal"]);


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(107);

	module.exports = Art.Canvas || (Art.Canvas = (function(superClass) {
	  extend(Canvas, superClass);

	  function Canvas() {
	    return Canvas.__super__.constructor.apply(this, arguments);
	  }

	  Canvas.namespace = Art;

	  Canvas.namespacePath = "Neptune.Art.Canvas";

	  return Canvas;

	})(Neptune.Base));

	Art.addNamespace(Art.Canvas);


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Binary, Bitmap, BitmapBase, Color, EncodedImage, Foundation, GradientFillStyle, IdentityMatrix, Matrix, Paths, Point, Promise, Rectangle, StackBlur, canvasBlenders, color, currentSecond, emptyOptions, eq, floatEq0, inspect, isFunction, isNumber, isPlainObject, log, matrix, max, min, point, rect, round,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Atomic = __webpack_require__(93);

	Foundation = __webpack_require__(11);

	GradientFillStyle = __webpack_require__(112);

	BitmapBase = __webpack_require__(113);

	Paths = __webpack_require__(114);

	StackBlur = __webpack_require__(115);

	point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, color = Atomic.color, Color = Atomic.Color, IdentityMatrix = Atomic.IdentityMatrix;

	inspect = Foundation.inspect, log = Foundation.log, min = Foundation.min, max = Foundation.max, Binary = Foundation.Binary, isFunction = Foundation.isFunction, isPlainObject = Foundation.isPlainObject, eq = Foundation.eq, currentSecond = Foundation.currentSecond, round = Foundation.round, isNumber = Foundation.isNumber, floatEq0 = Foundation.floatEq0, Promise = Foundation.Promise;

	EncodedImage = Binary.EncodedImage;

	emptyOptions = {};

	canvasBlenders = {
	  add: "lighter",
	  normal: "source-over",
	  target_alphamask: "source-in",
	  alphamask: "destination-in",
	  destover: "destination-over",
	  sourcein: "source-atop",
	  inverse_alphamask: "destination-out",
	  targetAlphamask: "source-in",
	  destOver: "destination-over",
	  sourceIn: "source-atop",
	  replace: "copy",
	  inverseAlphamask: "destination-out"
	};

	module.exports = Bitmap = (function(superClass) {
	  var k, v;

	  extend(Bitmap, superClass);

	  function Bitmap() {
	    return Bitmap.__super__.constructor.apply(this, arguments);
	  }

	  Bitmap.supportedCompositeModes = (function() {
	    var results;
	    results = [];
	    for (k in canvasBlenders) {
	      v = canvasBlenders[k];
	      results.push(k);
	    }
	    return results;
	  })();

	  Bitmap.getter({
	    supportedCompositeModes: function() {
	      return Bitmap.supportedCompositeModes;
	    }
	  });

	  Bitmap.artToCanvasCompositeModeMap = canvasBlenders;

	  Bitmap.prototype.initContext = function() {
	    var ref;
	    return this._context = (ref = this._canvas) != null ? ref.getContext("2d") : void 0;
	  };

	  Bitmap.getter({
	    context: function() {
	      if (!this._context && this._htmlImageElement) {
	        this.initNewCanvas(this.size);
	        this.drawBitmap(point(), this._htmlImageElement);
	        this._htmlImageElement = null;
	      }
	      return this._context;
	    },
	    context2D: function() {
	      return this.getContext();
	    },
	    htmlImageElement: function() {
	      return this._htmlImageElement;
	    },
	    htmlElement: function() {
	      return this._htmlImageElement || this._canvas;
	    }
	  });

	  Bitmap.get = function(url) {
	    return EncodedImage.get(url).then(function(image) {
	      var _, bitmap, match, resolution;
	      bitmap = new Bitmap(image);
	      if (match = url.match(/@([2-9])x\.[a-zA-Z]+$/)) {
	        _ = match[0], resolution = match[1];
	        bitmap.pixelsPerPoint = resolution | 0;
	      }
	      return bitmap;
	    });
	  };


	  /*
	  Uses the browser's file-request dialog to have the user select a local image file.
	  
	  OUT:
	    promise.then ({bitmap, file}) ->
	       * bitmap is a Canvas.Bitmap
	       * file is a javascript File object
	   */

	  Bitmap.requestImage = function() {
	    return Foundation.Browser.File.request({
	      accept: "image/*"
	    }).then((function(_this) {
	      return function(arg) {
	        var file;
	        file = arg[0];
	        return EncodedImage.toImage(file).then(function(image) {
	          return {
	            bitmap: new Bitmap(image),
	            file: file
	          };
	        });
	      };
	    })(this));
	  };

	  Bitmap.prototype.initFromImage = function(image) {
	    this._size = point(image.width, image.height);
	    return this._htmlImageElement = image;
	  };

	  Bitmap.setter({
	    imageSmoothing: function(bool) {
	      return this._context.imageSmoothingEnabled = this._context.mozImageSmoothingEnabled = this._context.webkitImageSmoothingEnabled = this._context.msImageSmoothingEnabled = this._imageSmoothing = !!bool;
	    }
	  });

	  Bitmap.bitmapClass = Bitmap;

	  Bitmap.newBitmap = function(size) {
	    return new Bitmap.bitmapClass(size);
	  };

	  Bitmap.prototype.newBitmap = function(size) {
	    return new this.bitmapClass(size || this.size).tap((function(_this) {
	      return function(b) {
	        return b.pixelsPerPoint = _this.pixelsPerPoint;
	      };
	    })(this));
	  };

	  Bitmap.prototype.setClippingArea = function(area, drawMatrix) {
	    this._setTransform(drawMatrix);
	    if (isFunction(area)) {
	      this._context.beginPath();
	      area(this._context);
	      return this._context.clip();
	    } else {
	      area = this.pixelSnapRectangle(drawMatrix, area);
	      this._clippingArea = area.intersection(this._clippingArea);
	      this._context.beginPath();
	      this._context.rect(area.x, area.y, area.w, area.h);
	      return this._context.clip();
	    }
	  };

	  Bitmap.prototype.clippedTo = function(area, f, drawMatrix) {
	    var previousClippingArea;
	    this._context.save();
	    previousClippingArea = this._clippingArea;
	    try {
	      this.setClippingArea(area, drawMatrix);
	      return f();
	    } finally {
	      this._context.restore();
	      this._clippingArea = previousClippingArea;
	    }
	  };

	  Bitmap.prototype.clear = function(a, b, c, d) {
	    var clr;
	    clr = a != null ? color(a, b, c, d) : color(0, 0, 0, 0);
	    this._clearTransform();
	    if (clr.a !== 1.0) {
	      this._context.clearRect(0, 0, this.size.x, this.size.y);
	    }
	    if (!clr.eq(color(0, 0, 0, 0))) {
	      this._context.globalCompositeOperation = "source-over";
	      this._setFillStyle(clr);
	      this._context.fillRect(0, 0, this.size.x, this.size.y);
	    }
	    return this;
	  };

	  Bitmap.prototype.strokeRectangle = function(where, rectangle, options) {
	    var grow, lineWidth, lineWidthMod2, r;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    r = rect(rectangle);
	    if (this.shouldPixelSnap(where)) {
	      lineWidth = options.lineWidth || 1;
	      r = this.pixelSnapRectangle(where, r);
	      lineWidthMod2 = lineWidth % 2;
	      grow = lineWidthMod2 < 1 ? -lineWidthMod2 / 2 : lineWidthMod2 / 2 - 1;
	      if (!floatEq0(grow)) {
	        r = r.grow(grow);
	      }
	    }
	    if (options.radius) {
	      this.strokeShape(where, options, (function(_this) {
	        return function() {
	          return Paths.roundedRectangle(_this._context, r, min(options.radius, r.w / 2, r.h / 2));
	        };
	      })(this));
	    } else {
	      if (this._setupDraw(where, options, true)) {
	        this._context.strokeRect(r.x, r.y, r.w, r.h);
	        this._cleanupDraw(options);
	      }
	    }
	    return this;
	  };

	  Bitmap.prototype.strokeShape = function(where, options, pathFunction) {
	    if (this._setupDraw(where, options, true)) {
	      this._context.beginPath();
	      pathFunction(this._context);
	      this._context.stroke();
	      this._cleanupDraw(options);
	    }
	    return this;
	  };

	  Bitmap.prototype.drawBorder = function(where, rectangle, options) {
	    var a, a1, g, p, w;
	    if (this._setupDraw(where, options, true)) {
	      p = options.padding || 0;
	      w = options.width || 1;
	      a1 = rect(rectangle);
	      g = p - w / 2;
	      a = a1.grow(g);
	      this._context.beginPath();
	      Paths.rectangle(this._context, a);
	      this._context.stroke();
	      this._cleanupDraw(options);
	    }
	    return this;
	  };

	  Bitmap.prototype.drawLine = function(where, fromPoint, toPoint, options) {
	    if (options == null) {
	      options = emptyOptions;
	    }
	    if (this._setupDraw(where, options, true)) {
	      this._context.beginPath();
	      Paths.line(this._context, fromPoint, toPoint);
	      this._context.stroke();
	      this._cleanupDraw(options);
	    }
	    return this;
	  };

	  Bitmap.prototype.drawRectangle = function(where, rectangle, options) {
	    var _context, fillRule, r, radius;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    r = rect(rectangle);
	    radius = options.radius, fillRule = options.fillRule;
	    if (this.shouldPixelSnap(where)) {
	      r = this.pixelSnapRectangle(where, r);
	    }
	    _context = this._context;
	    if (this._setupDraw(where, options)) {
	      if (radius > 0) {
	        _context.beginPath();
	        Paths.roundedRectangle(_context, r, radius);
	        _context.fill(fillRule || "nonzero");
	      } else {
	        _context.fillRect(r.x, r.y, r.w, r.h);
	      }
	      this._cleanupDraw(options);
	    }
	    return this;
	  };

	  Bitmap.prototype.fillShape = function(where, options, pathFunction) {
	    if (this._setupDraw(where, options)) {
	      _context.beginPath();
	      pathFunction(_context);
	      _context.fill(options.fillRule || "nonzero");
	      this._cleanupDraw(options);
	    }
	    return this;
	  };

	  Bitmap.prototype.drawBitmap = function(where, bitmap, options) {
	    var aboutToDrawTime, drawed, endTime, h, inputBitmap, inputBitmapSize, origSourceArea, ref, ref1, sh, sourceArea, startTime, sw, sx, sy, w, x, y;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    startTime = currentSecond();
	    sourceArea = options.sourceArea;
	    inputBitmap = bitmap;
	    if (bitmap.toMemoryDrawableBitmap) {
	      bitmap = bitmap.toMemoryDrawableBitmap();
	    }
	    bitmap = bitmap._canvas || bitmap._htmlImageElement || bitmap;
	    inputBitmapSize = inputBitmap.size || point(inputBitmap.width, inputBitmap.height);
	    drawed = "";
	    if (this.shouldPixelSnap(where)) {
	      ref = this.pixelSnapAndTransformRectangle(where, (sourceArea != null ? sourceArea.size : void 0) || inputBitmapSize), x = ref.x, y = ref.y, w = ref.w, h = ref.h;
	      if (sourceArea) {
	        sx = round(sourceArea.x);
	        sy = round(sourceArea.y);
	        sw = round(sourceArea.w);
	        sh = round(sourceArea.h);
	      } else {
	        sx = sy = 0;
	        sw = inputBitmapSize.x;
	        sh = inputBitmapSize.y;
	      }
	      if (this._setupDraw(null, options)) {
	        drawed = "pixelSnap - " + (inspect([sx, sy, sw, sh]));
	        aboutToDrawTime = currentSecond();
	        this._context.drawImage(bitmap, sx, sy, sw, sh, x, y, w, h);
	        this._cleanupDraw(options);
	      }
	    } else {
	      if (this._setupDraw(where, options)) {
	        aboutToDrawTime = currentSecond();
	        if (origSourceArea = sourceArea) {
	          drawed = "sourceArea";
	          ref1 = sourceArea.intersection(rect(inputBitmap.size)), x = ref1.x, y = ref1.y, w = ref1.w, h = ref1.h;
	          this._context.drawImage(bitmap, x, y, w, h, 0, 0, w, h);
	        } else {
	          drawed = "other";
	          this._context.drawImage(bitmap, 0, 0);
	        }
	        this._cleanupDraw(options);
	      }
	    }
	    endTime = currentSecond();
	    if (endTime - startTime > .1) {
	      log({
	        Canvas_Bitmap_drawBitmap: {
	          slowDraw: ((endTime - startTime) * 1000 | 0) + "ms",
	          time2: ((endTime - aboutToDrawTime) * 1000 | 0) + "ms",
	          where: where,
	          options: options,
	          drawed: drawed,
	          bitmapSize: [bitmap._size, bitmap.width, bitmap.height]
	        }
	      });
	    }
	    return this;
	  };

	  Bitmap.prototype.drawText = function(where, text, options) {
	    if (options == null) {
	      options = emptyOptions;
	    }
	    if (this._setupDraw(where, options)) {
	      this._context.font = (options.size || 16) + "px " + (options.family || 'Arial') + ", Arial";
	      this._context.textAlign = options.align || 'start';
	      this._context.textBaseline = options.baseline || 'alphabetic';
	      this._context.fillText(text, 0, 0);
	      this._cleanupDraw(options);
	    }
	    return this;
	  };

	  Bitmap.prototype.blur = function(radius, toClone) {
	    return (toClone ? this.clone() : this).tap((function(_this) {
	      return function(target) {
	        return StackBlur.blur(_this, radius, target);
	      };
	    })(this));
	  };

	  Bitmap.prototype.blurAlpha = function(radius, options) {
	    if (options == null) {
	      options = emptyOptions;
	    }
	    return (options.clone ? this.clone() : this).tap((function(_this) {
	      return function(target) {
	        var func;
	        func = options.inverted ? "blurInvertedAlpha" : "blurAlpha";
	        return StackBlur[func](_this, radius, target);
	      };
	    })(this));
	  };

	  Bitmap.prototype._clearTransform = function() {
	    this._lastTransform = IdentityMatrix;
	    return this._context.setTransform(1, 0, 0, 1, 0, 0);
	  };

	  Bitmap.prototype._setTransform = function(m) {
	    if (m) {
	      this._lastTransform = m;
	      if (m instanceof Point) {
	        return this._context.setTransform(1, 0, 0, 1, m.x, m.y);
	      } else {
	        return this._context.setTransform(m.sx, m.shy, m.shx, m.sy, m.tx, m.ty);
	      }
	    } else {
	      return this._clearTransform();
	    }
	  };

	  Bitmap.prototype._setStrokeStyle = function(strokeStyle) {
	    return this._context.strokeStyle = strokeStyle.toCanvasStyle ? strokeStyle.toCanvasStyle(this._context) : strokeStyle.toString();
	  };

	  Bitmap.prototype._setFillStyle = function(fillStyle) {
	    return this._context.fillStyle = fillStyle.toCanvasStyle ? fillStyle.toCanvasStyle(this._context) : fillStyle.toString();
	  };

	  Bitmap.prototype._setStrokeStyleFromOptions = function(options) {
	    var lineCap, lineJoin, lineWidth, miterLimit;
	    this._setStrokeStyle(options.fillStyle || options.color || this.defaultColorString);
	    lineWidth = options.lineWidth, lineCap = options.lineCap, lineJoin = options.lineJoin, miterLimit = options.miterLimit;
	    this._context.lineWidth = lineWidth || 1;
	    this._context.lineCap = lineCap || "butt";
	    this._context.lineJoin = lineJoin || "miter";
	    return this._context.miterLimit = miterLimit || 10;
	  };

	  Bitmap.prototype._setFillStyleFromOptions = function(options) {
	    return this._setFillStyle(options.fillStyle || options.color || this.defaultColorString);
	  };

	  Bitmap.prototype._setupDraw = function(where, options, stroke) {
	    var _context, blur, compositeMode, offset, offsetX, offsetY, opacity, shadow, shadowColor;
	    compositeMode = options.compositeMode, shadow = options.shadow, opacity = options.opacity;
	    stroke || (stroke = options.stroke);
	    if (!isNumber(opacity)) {
	      opacity = 1;
	    }
	    if (opacity < 1 / 256) {
	      return false;
	    }
	    _context = this._context;
	    if (stroke) {
	      this._setStrokeStyleFromOptions(options);
	    } else {
	      this._setFillStyleFromOptions(options);
	    }
	    if (compositeMode && compositeMode !== "normal") {
	      _context.globalCompositeOperation = canvasBlenders[compositeMode] || canvasBlenders.normal;
	    }
	    if (opacity < 1) {
	      _context.globalAlpha = opacity;
	    }
	    if (shadow) {
	      blur = shadow.blur, offsetX = shadow.offsetX, offsetY = shadow.offsetY, offset = shadow.offset;
	      shadowColor = shadow.color;
	      _context.shadowColor = color(shadowColor || "black");
	      if (blur) {
	        _context.shadowBlur = blur;
	      }
	      if (offsetX) {
	        _context.shadowOffsetX = offsetX;
	      }
	      if (offsetY) {
	        _context.shadowOffsetY = offsetY;
	      }
	    }
	    this._setTransform(where);
	    return true;
	  };

	  Bitmap.prototype._cleanupDraw = function(options) {
	    var _context, compositeMode, opacity, shadow;
	    compositeMode = options.compositeMode, shadow = options.shadow, opacity = options.opacity;
	    if (!isNumber(opacity)) {
	      opacity = 1;
	    }
	    _context = this._context;
	    if (compositeMode && compositeMode !== "normal") {
	      _context.globalCompositeOperation = canvasBlenders.normal;
	    }
	    if (opacity < 1) {
	      _context.globalAlpha = 1;
	    }
	    if (shadow) {
	      _context.shadowColor = "transparent";
	      _context.shadowBlur = 0;
	      _context.shadowOffsetX = 0;
	      return _context.shadowOffsetY = 0;
	    }
	  };

	  return Bitmap;

	})(BitmapBase);


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(93), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation) {
	  var GradientFillStyle, color, flatten, inspect, isNumber, isPlainArray, isPlainObject, isString, log, point, point1, shallowClone;
	  point = Atomic.point, color = Atomic.color, point1 = Atomic.point1;
	  inspect = Foundation.inspect, shallowClone = Foundation.shallowClone, flatten = Foundation.flatten, isPlainObject = Foundation.isPlainObject, log = Foundation.log, isNumber = Foundation.isNumber, isString = Foundation.isString, isPlainArray = Foundation.isPlainArray;
	  return GradientFillStyle = (function(superClass) {
	    extend(GradientFillStyle, superClass);


	    /*
	    from and to are points where the lineary gradient will begin and end.
	    "colors" is a list of the colors for the gradient. There must be at least two colors.
	    In the explicit form, each color should be formatted as {n:<number>, c:<html color string>}
	      Ex: {n:.45, c:"#ff0"}
	    Implicitly, you can:
	      provide just a HTML color string with no "n".
	      N is determined as follows:
	        The first and last color will be forced to have n=0 and n=1 respectively
	        Any string of omitted Ns will be interpolated between the specified ns.
	    
	    Examples:
	      black to white:
	        new GradientFillStyle point(0,0), point(100,0), {c:"#000"}, {c:"#fff"}
	        OR
	        new GradientFillStyle point(0,0), point(100,0), "#000", "#fff"
	    
	      black to red to white:
	        new GradientFillStyle point(0,0), point(100,0), {c:"#000"}, {n:.5, c:"#f00"}, {c:"#fff"}
	        OR
	        new GradientFillStyle point(0,0), point(100,0), "#000", "#f00", "#fff"
	    
	      red to transparent
	        new GradientFillStyle point(0,0), point(100,0), #f00", "rgba(1,0,0,0)"
	    
	      rainbow:
	        new GradientFillStyle(
	          point(0,0), point(100,0)
	          "#f00"
	          "#ff0"
	          "#0f0"
	          "#0ff"
	          "#00f"
	          "#f0f"
	          "#f00"
	        )
	     */

	    GradientFillStyle.colorsToObjectsAndStringColors = function(colors) {
	      var clr, j, len, results;
	      results = [];
	      for (j = 0, len = colors.length; j < len; j++) {
	        clr = colors[j];
	        if (isPlainObject(clr)) {
	          results.push({
	            n: clr.n,
	            c: String(color(clr.c))
	          });
	        } else {
	          results.push({
	            c: String(color(clr))
	          });
	        }
	      }
	      return results;
	    };

	    GradientFillStyle.colorsFromObjects = function(colors) {
	      var c, clr, j, k, len, n, ret;
	      ret = [];
	      for (j = 0, len = colors.length; j < len; j++) {
	        clr = colors[j];
	        if (isPlainObject(clr)) {
	          if (isNumber(clr.r)) {
	            ret.push(color(clr));
	          } else {
	            for (k in clr) {
	              c = clr[k];
	              n = k - 0;
	              ret.push({
	                n: n,
	                c: c
	              });
	            }
	          }
	        } else {
	          ret.push(clr);
	        }
	      }
	      return ret;
	    };

	    GradientFillStyle.interpolateColorPositionRange = function(colors, start, end) {
	      var firstN, i, lastN, n, nDelta, results, steps;
	      steps = end - start;
	      firstN = colors[start].n;
	      lastN = colors[end].n;
	      nDelta = (lastN - firstN) / steps;
	      n = firstN + nDelta;
	      i = start + 1;
	      results = [];
	      while (i < end) {
	        colors[i].n = n;
	        n += nDelta;
	        results.push(i++);
	      }
	      return results;
	    };

	    GradientFillStyle.interpolateColorPositions = function(colors) {
	      var clr, i, j, lastNindex, len;
	      colors[0].n = 0;
	      colors[colors.length - 1].n = 1;
	      lastNindex = 0;
	      for (i = j = 0, len = colors.length; j < len; i = ++j) {
	        clr = colors[i];
	        if (clr.n) {
	          GradientFillStyle.interpolateColorPositionRange(colors, lastNindex, i);
	          lastNindex = i;
	        }
	      }
	      return colors;
	    };

	    GradientFillStyle.sortColorsByN = function(colors) {
	      return colors.sort(function(a, b) {
	        return a.n - b.n;
	      });
	    };

	    GradientFillStyle.normalizeColors = function(colors) {
	      colors = this.colorsFromObjects(colors);
	      colors = this.colorsToObjectsAndStringColors(colors);
	      colors = this.sortColorsByN(colors);
	      colors = this.interpolateColorPositions(colors);
	      return colors;
	    };

	    function GradientFillStyle(from, to, colors, scale) {
	      this.scale = scale || point1;
	      this.from = from;
	      this.to = to;
	      this.setColors(this.inputColors = colors);
	    }

	    GradientFillStyle.prototype.inspect2 = function() {
	      return "gradient(from:" + this.from + ", to:" + this.to + ", colors:" + (inspect(this.inputColors)) + ")";
	    };

	    GradientFillStyle.clone = function() {
	      return new GradientFillStyle(this.from, this.to, shallowClone(this.colors));
	    };

	    GradientFillStyle.getter({
	      colors: function() {
	        return this._colors;
	      },
	      premultipliedColorPositions: function() {
	        var a, j, len, ref, results;
	        ref = this._colors;
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          a = ref[j];
	          results.push({
	            n: a.n,
	            c: color(a.c).premultiplied
	          });
	        }
	        return results;
	      }
	    });

	    GradientFillStyle.setter({
	      colors: function(colors) {
	        var k, v;
	        return this._colors = isPlainArray(colors) ? GradientFillStyle.normalizeColors(colors) : isPlainObject(colors) ? (colors = (function() {
	          var results;
	          results = [];
	          for (k in colors) {
	            v = colors[k];
	            results.push({
	              n: k * 1,
	              c: isString(v) ? v : String(color(v))
	            });
	          }
	          return results;
	        })(), colors = GradientFillStyle.sortColorsByN(colors), GradientFillStyle.interpolateColorPositions(colors)) : [
	          {
	            n: 0,
	            c: color("black"),
	            n: 1,
	            c: color("white")
	          }
	        ];
	      }
	    });

	    GradientFillStyle.prototype.toCanvasStyle = function(context) {
	      var clr, gradient, j, len, ref, ref1, x, y;
	      if (context.context) {
	        context = context.context;
	      }
	      ref = this.scale, x = ref.x, y = ref.y;
	      gradient = context.createLinearGradient(this.from.x * x, this.from.y * y, this.to.x * x, this.to.y * y);
	      ref1 = this._colors;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        clr = ref1[j];
	        gradient.addColorStop(clr.n, clr.c);
	      }
	      return gradient;
	    };

	    return GradientFillStyle;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic) {
	  var BaseObject, Binary, BinaryString, BitmapBase, Color, Matrix, Point, Rectangle, color, floor, inspect, isNumber, isString, log, matrix, nextTick, point, pureMerge, rect, round, toChannelNumberMap;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, color = Atomic.color, Color = Atomic.Color;
	  inspect = Foundation.inspect, nextTick = Foundation.nextTick, BaseObject = Foundation.BaseObject, Binary = Foundation.Binary, pureMerge = Foundation.pureMerge, isString = Foundation.isString, isNumber = Foundation.isNumber, log = Foundation.log;
	  round = Math.round, floor = Math.floor;
	  BinaryString = Binary.BinaryString;
	  toChannelNumberMap = {
	    0: 0,
	    1: 1,
	    2: 2,
	    3: 3,
	    r: 0,
	    g: 1,
	    b: 2,
	    a: 3,
	    red: 0,
	    green: 1,
	    blue: 2,
	    alpha: 3
	  };
	  return BitmapBase = (function(superClass) {
	    extend(BitmapBase, superClass);

	    BitmapBase.bitmapsCreated = 0;

	    BitmapBase.prototype.compositeModeSupported = function(mode) {
	      return this.supportedCompositeModes.indexOf(mode) >= 0;
	    };

	    BitmapBase.pixelSnapDefault = true;

	    BitmapBase.prototype.defaultColor = color("black");

	    BitmapBase.prototype.defaultColorString = "black";

	    function BitmapBase(a, b) {
	      BitmapBase.__super__.constructor.apply(this, arguments);
	      this._htmlImageElement = null;
	      this._canvas = null;
	      this._clippingArea = null;
	      this._context = null;
	      this._size = null;
	      this._lastTransform = null;
	      this._imageSmoothing = false;
	      this.pixelSnap = BitmapBase.pixelSnapDefault;
	      this._pixelsPerPoint = 1;
	      BitmapBase.bitmapsCreated++;
	      if (b) {
	        a = point(a, b);
	      }
	      if (a instanceof BitmapBase) {
	        this.populateClone(this);
	      } else if (a instanceof HTMLCanvasElement) {
	        this.initFromCanvas(a);
	      } else if (a instanceof HTMLImageElement) {
	        this.initFromImage(a);
	      } else {
	        this.initNewCanvas(point(a, b));
	      }
	    }

	    BitmapBase.getter({
	      canvas: function() {
	        return this._canvas;
	      },
	      bitmapClass: function() {
	        return this["class"];
	      },
	      clippingArea: function() {
	        return this._clippingArea || (this._clippingArea = rect(this.getSize()));
	      },
	      aspectRatio: function() {
	        return this.getSize().getAspectRatio();
	      }
	    });

	    BitmapBase.prototype.shouldPixelSnap = function(where) {
	      return this.pixelSnap && ((!where) || (where instanceof Point) || where.isTranslateAndPositiveScaleOnly);
	    };

	    BitmapBase.prototype.pixelSnapWhere = function(where) {
	      if (where instanceof Point) {
	        return where.rounded;
	      } else if (where) {
	        return where.withRoundedTranslation;
	      }
	    };

	    BitmapBase.prototype.pixelSnapRectangle = function(where, r) {
	      var bottom, h, isx, isy, right, sx, sy, tx, ty, w, x, y;
	      right = (x = r.x) + (w = r.w);
	      bottom = (y = r.y) + (h = r.h);
	      isx = isy = sx = sy = 1;
	      tx = ty = 0;
	      if (where instanceof Point) {
	        tx = where.x;
	        ty = where.y;
	      } else if (where) {
	        tx = where.tx;
	        ty = where.ty;
	        sx = where.sx;
	        isx = 1 / sx;
	        sy = where.sy;
	        isy = 1 / sy;
	      }
	      x = (Math.round((x * sx) + tx) - tx) * isx;
	      y = (Math.round((y * sy) + ty) - ty) * isy;
	      w = (Math.round((right * sx) + tx) - tx) * isx - x;
	      h = (Math.round((bottom * sy) + ty) - ty) * isy - y;
	      return rect(x, y, w, h);
	    };

	    BitmapBase.prototype.pixelSnapAndTransformRectangle = function(where, r) {
	      var bottom, left, right, top;
	      if (!r) {
	        console.error("no r");
	      }
	      left = r.left, right = r.right, top = r.top, bottom = r.bottom;
	      if (where instanceof Point) {
	        left += where.x;
	        right += where.x;
	        top += where.y;
	        bottom += where.y;
	      } else if (where) {
	        left = where.transformX(left, top);
	        top = where.transformY(left, top);
	        right = where.transformX(right, bottom);
	        bottom = where.transformY(right, bottom);
	      }
	      left = Math.round(left);
	      top = Math.round(top);
	      right = Math.round(right);
	      bottom = Math.round(bottom);
	      return rect(left, top, right - left, bottom - top);
	    };

	    BitmapBase.prototype.clone = function() {
	      var b;
	      b = this.newBitmap(this.size);
	      b.drawBitmap(null, this);
	      return b;
	    };

	    BitmapBase.prototype.initFromCanvas = function(canvas) {
	      this._canvas = canvas;
	      this._size = point(this._canvas.width, this._canvas.height);
	      return this.initContext();
	    };

	    BitmapBase.prototype.initFromImage = function(image) {
	      this._size = point(image.width, image.height);
	      this.initNewCanvas(this.size);
	      return this.drawBitmap(point(), image);
	    };

	    BitmapBase.prototype.initNewCanvas = function(size) {
	      if (this._context) {
	        return;
	      }
	      if (!size.gt(point())) {
	        throw new Error("invalid size=" + size + " for Art.Canvas.Bitmap");
	      }
	      this._size = size.floor();
	      this._canvas = document.createElement('canvas');
	      this._canvas.width = this.size.x;
	      this._canvas.height = this.size.y;
	      return this.initContext();
	    };

	    BitmapBase.prototype.populateClone = function(result) {
	      result.initNewCanvas(this.size);
	      result.drawBitmap(null, this);
	      return result._pixelsPerPoint = this._pixelsPerPoint;
	    };

	    BitmapBase.getter({
	      pixelsPerPoint: function() {
	        return this._pixelsPerPoint;
	      },
	      pointsPerPixel: function() {
	        return 1 / this._pixelsPerPoint;
	      },
	      pointSize: function() {
	        return this.size.div(this.pixelsPerPoint);
	      },
	      byteSize: function() {
	        return this.size.area * this.getBytesPerPixel();
	      },
	      bytesPerPixel: function() {
	        return 4;
	      }
	    });

	    BitmapBase.setter({
	      pixelsPerPoint: function(v) {
	        return this._pixelsPerPoint = v;
	      },
	      pointsPerPixel: function(v) {
	        return this._pixelsPerPoint = 1 / v;
	      }
	    });

	    BitmapBase.property({
	      size: point(100, 100)
	    });

	    BitmapBase.property({
	      imageSmoothing: false
	    });

	    BitmapBase.prototype.toMemoryBitmap = function() {
	      return this;
	    };

	    BitmapBase.prototype.toMemoryDrawableBitmap = function() {
	      return this;
	    };

	    BitmapBase.prototype.getImageData = function(a, b, c, d) {
	      var area;
	      area = a === null || a === void 0 ? rect(this.size) : rect(a, b, c, d);
	      return this.toMemoryBitmap().context.getImageData(area.x, area.y, area.w, area.h);
	    };

	    BitmapBase.prototype.putImageData = function(imageData, location, sourceArea) {
	      if (location == null) {
	        location = point();
	      }
	      if (sourceArea == null) {
	        sourceArea = rect(this.size);
	      }
	      location = location.sub(sourceArea.location);
	      return this._context.putImageData(imageData, location.x, location.y, sourceArea.x, sourceArea.y, sourceArea.w, sourceArea.h);
	    };

	    BitmapBase.prototype.getImageDataArray = function(channel) {
	      var data, end, i, j, len, results, results1, v;
	      if (channel == null) {
	        channel = null;
	      }
	      data = this.getImageData().data;
	      if ((channel = toChannelNumberMap[channel]) != null) {
	        i = channel;
	        end = data.length;
	        results = [];
	        while (i < end) {
	          i += 4;
	          results.push(data[i - 4]);
	        }
	        return results;
	      } else {
	        results1 = [];
	        for (j = 0, len = data.length; j < len; j++) {
	          v = data[j];
	          results1.push(v);
	        }
	        return results1;
	      }
	    };

	    BitmapBase.prototype.toPngUri = function(callback) {
	      if (callback) {
	        throw new Error("Bitmap.toPngUri: callback is no longer supported; use returned Promise");
	      }
	      return nextTick().then((function(_this) {
	        return function() {
	          return _this.toMemoryBitmap().canvas.toDataURL();
	        };
	      })(this));
	    };

	    BitmapBase.prototype.toJpgUri = function(quality, callback) {
	      if (quality == null) {
	        quality = .95;
	      }
	      if (callback) {
	        throw new Error("Bitmap.toJpgUri: callback is no longer supported; use returned Promise");
	      }
	      return nextTick().then((function(_this) {
	        return function() {
	          return _this.toMemoryBitmap().canvas.toDataURL("image/jpeg", quality);
	        };
	      })(this));
	    };

	    BitmapBase.prototype.toPng = function(callback) {
	      if (callback) {
	        throw new Error("Bitmap.toPng: callback is no longer supported; use returned Promise");
	      }
	      return this.toPngUri().then(function(dataURI) {
	        return BinaryString.fromDataUri(dataURI);
	      });
	    };

	    BitmapBase.prototype.toJpg = function(quality, callback) {
	      if (callback) {
	        throw new Error("Bitmap.toJpg: callback is no longer supported; use returned Promise");
	      }
	      return this.toJpgUri(quality).then(function(dataURI) {
	        return BinaryString.fromDataUri(dataURI);
	      });
	    };

	    BitmapBase.prototype.toImage = function(callback) {
	      if (callback) {
	        throw new Error("Bitmap.toImage: callback is no longer supported; use returned Promise");
	      }
	      return nextTick().then((function(_this) {
	        return function() {
	          var url;
	          if (_this._htmlImageElement) {
	            return _this._htmlImageElement;
	          } else {
	            url = _this.toMemoryBitmap().canvas.toDataURL();
	            return Binary.EncodedImage.toImage(url).then(function(image) {
	              var h, ref, w;
	              ref = _this.pointSize, w = ref.w, h = ref.h;
	              image.width = w;
	              image.height = h;
	              return image;
	            });
	          }
	        };
	      })(this));
	    };

	    BitmapBase.prototype.hFlipped = function() {
	      var result;
	      result = this.newBitmap(this.size);
	      result.drawBitmap(Matrix.translate(-this.size.x / 2, 0).scale(-1, 1).translate(this.size.x / 2, 0), this);
	      return result;
	    };

	    BitmapBase.prototype.vFlipped = function() {
	      var result;
	      result = this.newBitmap(this.size);
	      result.drawBitmap(Matrix.translate(0, -this.size.y / 2).scale(1, -1).translate(0, this.size.y / 2), this);
	      return result;
	    };

	    BitmapBase.prototype.drawBorder = function(where, r, options) {
	      var c, m, p, w;
	      m = matrix(where);
	      r = rect(r);
	      c = options.color || "#777";
	      w = options.width || 1;
	      p = options.padding || 0;
	      r = r.grow(p);
	      this.drawRectangle(m, rect(r.x, r.y, r.w, w), c);
	      this.drawRectangle(m, rect(r.x, r.bottom - w, r.w, w), c);
	      this.drawRectangle(m, rect(r.x, r.y + w, w, r.h - w * 2), c);
	      return this.drawRectangle(m, rect(r.right - w, r.y + w, w, r.h - w * 2), c);
	    };

	    BitmapBase.prototype.drawStretchedBorderBitmap = function(drawMatrix, targetArea, bitmap, sourceCenterArea, options) {
	      var bitmapSize, borderRatio, borderReductionRatio, borderScale, botomCenter, bottomCenter, bottomLeft, bottomRight, centerCenter, centerLeft, centerRight, centertCenter, hide, horizontalBorderHeight, horizontalBorderWidth, m, show, sourceBottomHeight, sourceBottomScale, sourceCenterAreaBottom, sourceCenterAreaHeight, sourceCenterAreaLeft, sourceCenterAreaRight, sourceCenterAreaTop, sourceCenterAreaWidth, sourceCenterHeightScale, sourceCenterWidthScale, sourceLeftScale, sourceLeftWidth, sourceRightScale, sourceRightWidth, sourceTopHeight, sourceTopScale, targetAreaBottom, targetAreaHeight, targetAreaLeft, targetAreaRight, targetAreaTop, targetAreaWidth, targetBottomHeight, targetCenterAreaBottom, targetCenterAreaHeight, targetCenterAreaLeft, targetCenterAreaRight, targetCenterAreaTop, targetCenterAreaWidth, targetLeftWidth, targetRightWidth, targetTopHeight, topCenter, topLeft, topRight, totalBorderHeight, totalBorderWidth;
	      if (options == null) {
	        options = {};
	      }
	      hide = options.hide, show = options.show;
	      bitmapSize = bitmap.size;
	      borderScale = options.borderScale;
	      if (!isNumber(borderScale)) {
	        borderScale = 1;
	      }
	      sourceCenterAreaLeft = sourceCenterArea.left;
	      sourceCenterAreaTop = sourceCenterArea.top;
	      sourceCenterAreaRight = sourceCenterArea.right;
	      sourceCenterAreaBottom = sourceCenterArea.bottom;
	      sourceCenterAreaWidth = sourceCenterAreaRight - sourceCenterAreaLeft;
	      sourceCenterAreaHeight = sourceCenterAreaBottom - sourceCenterAreaTop;
	      targetAreaLeft = round(drawMatrix.transformX(targetArea.left, 0));
	      targetAreaTop = round(drawMatrix.transformY(0, targetArea.top));
	      targetAreaRight = round(drawMatrix.transformX(targetArea.right, 0));
	      targetAreaBottom = round(drawMatrix.transformY(0, targetArea.bottom));
	      targetAreaWidth = targetAreaRight - targetAreaLeft;
	      targetAreaHeight = targetAreaBottom - targetAreaTop;
	      sourceLeftWidth = sourceCenterAreaLeft;
	      sourceTopHeight = sourceCenterAreaTop;
	      sourceRightWidth = bitmapSize.w - sourceCenterAreaRight;
	      sourceBottomHeight = bitmapSize.h - sourceCenterAreaBottom;
	      targetCenterAreaLeft = round(drawMatrix.transformX(targetArea.left + sourceLeftWidth * borderScale, 0));
	      targetCenterAreaTop = round(drawMatrix.transformY(0, targetArea.top + sourceTopHeight * borderScale));
	      targetCenterAreaRight = round(drawMatrix.transformX(targetArea.right - sourceRightWidth * borderScale, 0));
	      targetCenterAreaBottom = round(drawMatrix.transformY(0, targetArea.bottom - sourceBottomHeight * borderScale));
	      targetCenterAreaWidth = targetCenterAreaRight - targetCenterAreaLeft;
	      targetCenterAreaHeight = targetCenterAreaBottom - targetCenterAreaTop;
	      if (targetCenterAreaWidth < 0) {
	        horizontalBorderWidth = targetAreaWidth - targetCenterAreaWidth;
	        borderReductionRatio = targetAreaWidth / horizontalBorderWidth;
	        borderRatio = sourceLeftWidth / (totalBorderWidth = sourceLeftWidth + sourceRightWidth);
	        sourceLeftWidth = round(sourceLeftWidth * borderReductionRatio);
	        sourceRightWidth = round(sourceRightWidth * borderReductionRatio);
	        sourceCenterAreaRight = bitmap.size.x - sourceRightWidth;
	        targetCenterAreaLeft = targetCenterAreaRight = targetAreaLeft + round(targetAreaWidth * borderRatio);
	        targetCenterAreaWidth = 0;
	      }
	      if (targetCenterAreaHeight < 0) {
	        horizontalBorderHeight = targetAreaHeight - targetCenterAreaHeight;
	        borderReductionRatio = targetAreaHeight / horizontalBorderHeight;
	        borderRatio = sourceTopHeight / (totalBorderHeight = sourceTopHeight + sourceBottomHeight);
	        sourceTopHeight = round(sourceTopHeight * borderReductionRatio);
	        sourceBottomHeight = round(sourceBottomHeight * borderReductionRatio);
	        sourceCenterAreaBottom = bitmap.size.x - sourceBottomHeight;
	        targetCenterAreaTop = targetCenterAreaBottom = targetAreaTop + round(targetAreaHeight * borderRatio);
	        targetCenterAreaHeight = 0;
	      }
	      targetLeftWidth = targetCenterAreaLeft - targetAreaLeft;
	      targetTopHeight = targetCenterAreaTop - targetAreaTop;
	      targetRightWidth = targetAreaRight - targetCenterAreaRight;
	      targetBottomHeight = targetAreaBottom - targetCenterAreaBottom;
	      sourceLeftScale = targetLeftWidth / sourceLeftWidth;
	      sourceTopScale = targetTopHeight / sourceTopHeight;
	      sourceRightScale = targetRightWidth / sourceRightWidth;
	      sourceBottomScale = targetBottomHeight / sourceBottomHeight;
	      sourceCenterWidthScale = targetCenterAreaWidth / sourceCenterAreaWidth;
	      sourceCenterHeightScale = targetCenterAreaHeight / sourceCenterAreaHeight;
	      if (show) {
	        topLeft = !show.topLeft;
	        topRight = !show.topRight;
	        topCenter = !show.topCenter;
	        centerLeft = !show.centerLeft;
	        centerRight = !show.centerRight;
	        centerCenter = !show.centerCenter;
	        bottomLeft = !show.bottomLeft;
	        bottomRight = !show.bottomRight;
	        bottomCenter = !show.bottomCenter;
	      }
	      if (hide) {
	        topLeft = hide.topLeft, topCenter = hide.topCenter, topRight = hide.topRight, centerLeft = hide.centerLeft, centerCenter = hide.centerCenter, centerRight = hide.centerRight, bottomLeft = hide.bottomLeft, botomCenter = hide.botomCenter, bottomRight = hide.bottomRight;
	        if (hide.top) {
	          topLeft = topCenter = topRight = true;
	        }
	        if (hide.bottom) {
	          bottomLeft = bottomCenter = bottomRight = true;
	        }
	        if (hide.left) {
	          topLeft = centerLeft = bottomLeft = true;
	        }
	        if (hide.left) {
	          topRight = centerRight = bottomRight = true;
	        }
	        if (hide.centerRow) {
	          centerLeft = centerCenter = centerRight = true;
	        }
	        if (hide.centerColumn) {
	          topCenter = centertCenter = bottomRight = true;
	        }
	      }
	      if (!topLeft) {
	        m = Matrix.scale(sourceLeftScale, sourceTopScale).translate(targetAreaLeft, targetAreaTop);
	        options.sourceArea = rect(0, 0, sourceLeftWidth, sourceTopHeight);
	        this.drawBitmap(m, bitmap, options);
	      }
	      if (!topRight) {
	        m = Matrix.scale(sourceRightScale, sourceTopScale).translate(targetCenterAreaRight, targetAreaTop);
	        options.sourceArea = rect(sourceCenterAreaRight, 0, sourceRightWidth, sourceTopHeight);
	        this.drawBitmap(m, bitmap, options);
	      }
	      if (!bottomLeft) {
	        m = Matrix.scale(sourceLeftScale, sourceBottomScale).translate(targetAreaLeft, targetCenterAreaBottom);
	        options.sourceArea = rect(0, sourceCenterAreaBottom, sourceLeftWidth, sourceBottomHeight);
	        this.drawBitmap(m, bitmap, options);
	      }
	      if (!bottomRight) {
	        m = Matrix.scale(sourceRightScale, sourceBottomScale).translate(targetCenterAreaRight, targetCenterAreaBottom);
	        options.sourceArea = rect(sourceCenterAreaRight, sourceCenterAreaBottom, sourceRightWidth, sourceBottomHeight);
	        this.drawBitmap(m, bitmap, options);
	      }
	      if (targetCenterAreaHeight > 0) {
	        if (!centerLeft) {
	          m = Matrix.scale(sourceLeftScale, sourceCenterHeightScale).translate(targetAreaLeft, targetCenterAreaTop);
	          options.sourceArea = rect(0, sourceTopHeight, sourceLeftWidth, sourceCenterAreaHeight);
	          this.drawBitmap(m, bitmap, options);
	        }
	        if (!(centerCenter || targetCenterAreaWidth <= 0)) {
	          m = Matrix.scale(sourceCenterWidthScale, sourceCenterHeightScale).translate(targetCenterAreaLeft, targetCenterAreaTop);
	          options.sourceArea = rect(sourceCenterAreaLeft, sourceCenterAreaTop, sourceCenterAreaWidth, sourceCenterAreaHeight);
	          this.drawBitmap(m, bitmap, options);
	        }
	        if (!centerRight) {
	          m = Matrix.scale(sourceRightScale, sourceCenterHeightScale).translate(targetCenterAreaRight, targetCenterAreaTop);
	          options.sourceArea = rect(sourceCenterAreaRight, sourceTopHeight, sourceRightWidth, sourceCenterAreaHeight);
	          this.drawBitmap(m, bitmap, options);
	        }
	      }
	      if (sourceCenterAreaWidth > 0) {
	        if (!bottomCenter) {
	          m = Matrix.scale(sourceCenterWidthScale, sourceBottomScale).translate(targetCenterAreaLeft, targetCenterAreaBottom);
	          options.sourceArea = rect(sourceLeftWidth, sourceCenterAreaBottom, sourceCenterAreaWidth, sourceBottomHeight);
	          this.drawBitmap(m, bitmap, options);
	        }
	        if (!topCenter) {
	          m = Matrix.scale(sourceCenterWidthScale, sourceTopScale).translate(targetCenterAreaLeft, targetAreaTop);
	          options.sourceArea = rect(sourceCenterAreaLeft, 0, sourceCenterAreaWidth, sourceTopHeight);
	          return this.drawBitmap(m, bitmap, options);
	        }
	      }
	    };

	    return BitmapBase;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var Paths, floatEq, log, min;
	  log = Foundation.log, floatEq = Foundation.floatEq, min = Foundation.min;
	  return Paths = (function() {
	    var rectangle, roundedRectangle;

	    function Paths() {}

	    Paths.rectangle = rectangle = function(context, r) {
	      var bottom, left, right, top;
	      left = r.left, right = r.right, top = r.top, bottom = r.bottom;
	      context.moveTo(left, top);
	      context.lineTo(right, top);
	      context.lineTo(right, bottom);
	      context.lineTo(left, bottom);
	      return context.closePath();
	    };

	    Paths.line = function(context, fromPoint, toPoint) {
	      context.moveTo(fromPoint.x, fromPoint.y);
	      return context.lineTo(toPoint.x, toPoint.y);
	    };

	    Paths.roundedRectangle = roundedRectangle = function(context, r, radius) {
	      var bottom, h, hCenter, halfW, left, right, top, vCenter, w;
	      if (!((radius != null) && radius > 0)) {
	        return rectangle(context, r);
	      }
	      w = r.w, h = r.h;
	      if (floatEq(w, h) && radius >= (halfW = w / 2)) {
	        hCenter = r.hCenter, vCenter = r.vCenter;
	        return context.arc(hCenter, vCenter, halfW, 0, Math.PI * 2, true);
	      } else {
	        radius = min(radius, w / 2, h / 2);
	        left = r.left, right = r.right, top = r.top, bottom = r.bottom;
	        context.moveTo(left, top + radius);
	        context.arcTo(left, top, left + radius, top, radius);
	        context.lineTo(right - radius, top);
	        context.arcTo(right, top, right, top + radius, radius);
	        context.lineTo(right, bottom - radius);
	        context.arcTo(right, bottom, right - radius, bottom, radius);
	        context.lineTo(left + radius, bottom);
	        context.arcTo(left, bottom, left, bottom - radius, radius);
	        return context.closePath();
	      }
	    };

	    Paths.curriedRoundedRectangle = function(r, radius) {
	      return function(context) {
	        return roundedRectangle(context, r, radius);
	      };
	    };

	    return Paths;

	  })();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	SBD TODO

	Bluring transparencies has errors. Repro:
	  clear background to: color(1,0,0,.5)
	  drawRectangle color(0,1,0,1) over a sub-area of the bitmap
	  blur

	The problem (I think) is transparent colors have equal weight as non-transparent colors.

	...

	I need to test bluring on the edge of the bitmap. I'm not convinced it works right.

	...

	Possible speedup and simplification:

	One solution which may be faster overall is to reserve one line of pixels in memory plus
	the blur radius amount of pixels on each side. Those pixel colors should be repetitions of the edge colors.
	Then we can blur over that range with reduced tests in our inner loop.
	It looks like "slice" allows us to quickly get a subsection of an ArrayBuffer. That will work for all lines
	except the first and last one(s). Just slice and then overwrite the first and end colors with the edge-colors.

	UInt8Array .subarray and .set should make moving the pixles to and from pretty fast. The only slow part will
	be filling the edge pixels in.
	 */

	/*

	StackBlur - a fast almost Gaussian Blur For Canvas

	Version:  0.5
	Author:   Mario Klingemann
	Contact:  mario@quasimondo.com
	Website:  http://www.quasimondo.com/StackBlurForCanvas
	Twitter:  @quasimondo

	In case you find this class useful - especially in commercial projects -
	I am not totally unhappy for a small donation to my PayPal account
	mario@quasimondo.de

	Or support me on flattr:
	https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

	Copyright (c) 2010 Mario Klingemann

	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(110), __webpack_require__(93), __webpack_require__(11), __webpack_require__(113)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Canvas, Atomic, Foundation) {
	  var BlurStack, color, inspect, matrix, nextTick, point, rect;
	  point = Atomic.point, matrix = Atomic.matrix, rect = Atomic.rect, color = Atomic.color;
	  inspect = Foundation.Inspect.inspect;
	  nextTick = Foundation.nextTick;
	  BlurStack = (function() {
	    function BlurStack() {
	      this.r = this.g = this.b = this.a = 0;
	      this.next = null;
	    }

	    return BlurStack;

	  })();
	  return Canvas.StackBlur = (function(superClass) {
	    extend(StackBlur, superClass);

	    function StackBlur() {
	      return StackBlur.__super__.constructor.apply(this, arguments);
	    }

	    StackBlur.blur = function(bitmap, radius) {
	      return (new Canvas.StackBlur).blur(bitmap, radius);
	    };

	    StackBlur.blurRGB = function(bitmap, radius) {
	      return (new Canvas.StackBlur).blurRGB(bitmap, radius);
	    };

	    StackBlur.blurAlpha = function(bitmap, radius) {
	      return (new Canvas.StackBlur).blurAlpha(bitmap, radius);
	    };

	    StackBlur.blurInvertedAlpha = function(bitmap, radius) {
	      return (new Canvas.StackBlur).blurInvertedAlpha(bitmap, radius);
	    };

	    StackBlur.prototype.blur = function(bitmap, radius, targetBitmap) {
	      var imageData, pixels;
	      targetBitmap || (targetBitmap = bitmap);
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      radius = radius + .5 | 0;
	      if (radius > 0) {
	        this.stackBlurCanvasRGBA(pixels, bitmap.size.w, bitmap.size.h, radius);
	      }
	      return targetBitmap.putImageData(imageData);
	    };

	    StackBlur.prototype.blurRGB = function(bitmap, radius, targetBitmap) {
	      var imageData, pixels;
	      targetBitmap || (targetBitmap = bitmap);
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      radius = radius + .5 | 0;
	      if (radius > 0) {
	        this.stackBlurCanvasRGB(pixels, bitmap.size.w, bitmap.size.h, radius);
	      }
	      return targetBitmap.putImageData(imageData);
	    };

	    StackBlur.prototype.blurAlpha = function(bitmap, radius, targetBitmap) {
	      var imageData, pixels;
	      targetBitmap || (targetBitmap = bitmap);
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      radius = radius + .5 | 0;
	      if (radius > 0) {
	        this.stackBlurCanvasAlpha(pixels, bitmap.size.w, bitmap.size.h, radius);
	      }
	      return targetBitmap.putImageData(imageData);
	    };

	    StackBlur.prototype.blurInvertedAlpha = function(bitmap, radius, targetBitmap) {
	      var imageData, pixels;
	      targetBitmap || (targetBitmap = bitmap);
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      radius = radius + .5 | 0;
	      this.invertAlpha(pixels, bitmap.size.area);
	      if (radius > 0) {
	        this.stackBlurCanvasAlpha(pixels, bitmap.size.w, bitmap.size.h, radius);
	      }
	      return targetBitmap.putImageData(imageData);
	    };

	    StackBlur.prototype.invertAlpha = function(pixels, numPixels) {
	      var end, end8, i, results;
	      i = 0;
	      end = numPixels * 4 - 4;
	      end8 = end - (end % 8);
	      while (i <= end) {
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	        pixels[i + 3] = 255 - pixels[i + 3];
	        i += 4;
	      }
	      results = [];
	      while (i <= end) {
	        pixels[i + 3] = 255 - pixels[i + 3];
	        results.push(i += 4);
	      }
	      return results;
	    };

	    StackBlur.prototype.createStack = function(radius) {
	      var i, j, ref, stack;
	      this.stackStart = new BlurStack();
	      stack = this.stackStart;
	      for (i = j = 1, ref = 2 * radius; j <= ref; i = j += 1) {
	        stack = stack.next = new BlurStack();
	        if (i === radius + 1) {
	          this.stackEnd = stack;
	        }
	      }
	      return stack.next = this.stackStart;
	    };

	    StackBlur.prototype.rgbaPass = function(radius, pixels, outterStep, outterEnd, innerStep, innerEndDelta) {
	      var a_in_sum, a_out_sum, a_sum, b_in_sum, b_out_sum, b_sum, firstPixelSumWeight, g_in_sum, g_out_sum, g_sum, i, innerEnd, innerPos, innerRadiusEnd, j, oneOverStackWeight, outterPos, pa, pb, pg, pr, r_in_sum, r_out_sum, r_sum, radiusPlus1, rbs, readPos, readPosOffset, ref, results, stackEnd, stackIn, stackOut, stackStart, stackWeight, weight;
	      radiusPlus1 = radius + 1;
	      stackWeight = radiusPlus1 * radiusPlus1;
	      oneOverStackWeight = 1 / stackWeight;
	      firstPixelSumWeight = (stackWeight + radiusPlus1) / 2;
	      stackStart = this.stackStart;
	      stackEnd = this.stackEnd;
	      outterPos = 0;
	      results = [];
	      while (outterPos <= outterEnd) {
	        r_in_sum = g_in_sum = b_in_sum = a_in_sum = 0;
	        pr = pixels[outterPos];
	        pg = pixels[outterPos + 1];
	        pb = pixels[outterPos + 2];
	        pa = pixels[outterPos + 3];
	        if (pa < 255) {
	          weight = pa / 255;
	          pr *= weight;
	          pg *= weight;
	          pb *= weight;
	        }
	        r_out_sum = radiusPlus1 * pr;
	        g_out_sum = radiusPlus1 * pg;
	        b_out_sum = radiusPlus1 * pb;
	        a_out_sum = radiusPlus1 * pa;
	        r_sum = firstPixelSumWeight * pr;
	        g_sum = firstPixelSumWeight * pg;
	        b_sum = firstPixelSumWeight * pb;
	        a_sum = firstPixelSumWeight * pa;
	        stackIn = stackStart;
	        for (i = j = 0, ref = radius; j <= ref; i = j += 1) {
	          stackIn.r = pr;
	          stackIn.g = pg;
	          stackIn.b = pb;
	          stackIn.a = pa;
	          stackIn = stackIn.next;
	        }
	        innerEnd = outterPos + innerEndDelta;
	        rbs = radius;
	        innerRadiusEnd = outterPos + radius * innerStep;
	        innerPos = outterPos + innerStep;
	        while (innerPos <= innerRadiusEnd) {
	          readPos = innerPos;
	          if (innerPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pr = pixels[readPos];
	          pg = pixels[readPos + 1];
	          pb = pixels[readPos + 2];
	          pa = pixels[readPos + 3];
	          if (pa < 255) {
	            weight = pa / 255;
	            pr *= weight;
	            pg *= weight;
	            pb *= weight;
	          }
	          r_in_sum += stackIn.r = pr;
	          g_in_sum += stackIn.g = pg;
	          b_in_sum += stackIn.b = pb;
	          a_in_sum += stackIn.a = pa;
	          r_sum += pr * rbs;
	          g_sum += pg * rbs;
	          b_sum += pb * rbs;
	          a_sum += pa * rbs;
	          rbs--;
	          stackIn = stackIn.next;
	          innerPos += innerStep;
	        }
	        stackOut = stackEnd;
	        readPosOffset = radiusPlus1 * innerStep;
	        innerPos = outterPos;
	        while (innerPos <= innerEnd) {
	          pixels[innerPos + 3] = pa = a_sum * oneOverStackWeight;
	          if (pa !== 0) {
	            pa = oneOverStackWeight * 255 / pa;
	            pixels[innerPos] = r_sum * pa;
	            pixels[innerPos + 1] = g_sum * pa;
	            pixels[innerPos + 2] = b_sum * pa;
	          } else {
	            pixels[innerPos] = pixels[innerPos + 1] = pixels[innerPos + 2] = 0;
	          }
	          r_sum -= r_out_sum;
	          g_sum -= g_out_sum;
	          b_sum -= b_out_sum;
	          a_sum -= a_out_sum;
	          r_out_sum -= stackIn.r;
	          g_out_sum -= stackIn.g;
	          b_out_sum -= stackIn.b;
	          a_out_sum -= stackIn.a;
	          readPos = innerPos + readPosOffset;
	          if (readPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pr = pixels[readPos];
	          pg = pixels[readPos + 1];
	          pb = pixels[readPos + 2];
	          pa = pixels[readPos + 3];
	          if (pa < 255) {
	            weight = pa / 255;
	            pr *= weight;
	            pg *= weight;
	            pb *= weight;
	          }
	          r_in_sum += stackIn.r = pr;
	          g_in_sum += stackIn.g = pg;
	          b_in_sum += stackIn.b = pb;
	          a_in_sum += stackIn.a = pa;
	          r_sum += r_in_sum;
	          g_sum += g_in_sum;
	          b_sum += b_in_sum;
	          a_sum += a_in_sum;
	          r_out_sum += pr = stackOut.r;
	          g_out_sum += pg = stackOut.g;
	          b_out_sum += pb = stackOut.b;
	          a_out_sum += pa = stackOut.a;
	          r_in_sum -= pr;
	          g_in_sum -= pg;
	          b_in_sum -= pb;
	          a_in_sum -= pa;
	          stackIn = stackIn.next;
	          stackOut = stackOut.next;
	          innerPos += innerStep;
	        }
	        results.push(outterPos += outterStep);
	      }
	      return results;
	    };

	    StackBlur.prototype.rgbPass = function(radius, pixels, outterStep, outterEnd, innerStep, innerEndDelta) {
	      var b_in_sum, b_out_sum, b_sum, firstPixelSumWeight, g_in_sum, g_out_sum, g_sum, i, innerEnd, innerPos, innerRadiusEnd, j, oneOverStackWeight, outterPos, pb, pg, pr, r_in_sum, r_out_sum, r_sum, radiusPlus1, rbs, readPos, readPosOffset, ref, results, stackEnd, stackIn, stackOut, stackStart, stackWeight;
	      radiusPlus1 = radius + 1;
	      stackWeight = radiusPlus1 * radiusPlus1;
	      oneOverStackWeight = 1 / stackWeight;
	      firstPixelSumWeight = (stackWeight + radiusPlus1) / 2;
	      stackStart = this.stackStart;
	      stackEnd = this.stackEnd;
	      outterPos = 0;
	      results = [];
	      while (outterPos <= outterEnd) {
	        r_in_sum = g_in_sum = b_in_sum = 0;
	        pr = pixels[outterPos];
	        pg = pixels[outterPos + 1];
	        pb = pixels[outterPos + 2];
	        r_out_sum = radiusPlus1 * pr;
	        g_out_sum = radiusPlus1 * pg;
	        b_out_sum = radiusPlus1 * pb;
	        r_sum = firstPixelSumWeight * pr;
	        g_sum = firstPixelSumWeight * pg;
	        b_sum = firstPixelSumWeight * pb;
	        stackIn = stackStart;
	        for (i = j = 0, ref = radius; j <= ref; i = j += 1) {
	          stackIn.r = pr;
	          stackIn.g = pg;
	          stackIn.b = pb;
	          stackIn = stackIn.next;
	        }
	        innerEnd = outterPos + innerEndDelta;
	        rbs = radius;
	        innerRadiusEnd = outterPos + radius * innerStep;
	        innerPos = outterPos + innerStep;
	        while (innerPos <= innerRadiusEnd) {
	          readPos = innerPos;
	          if (innerPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pr = pixels[readPos];
	          pg = pixels[readPos + 1];
	          pb = pixels[readPos + 2];
	          r_in_sum += stackIn.r = pr;
	          g_in_sum += stackIn.g = pg;
	          b_in_sum += stackIn.b = pb;
	          r_sum += pr * rbs;
	          g_sum += pg * rbs;
	          b_sum += pb * rbs;
	          rbs--;
	          stackIn = stackIn.next;
	          innerPos += innerStep;
	        }
	        stackOut = stackEnd;
	        readPosOffset = radiusPlus1 * innerStep;
	        innerPos = outterPos;
	        while (innerPos <= innerEnd) {
	          pixels[innerPos] = r_sum * oneOverStackWeight;
	          pixels[innerPos + 1] = g_sum * oneOverStackWeight;
	          pixels[innerPos + 2] = b_sum * oneOverStackWeight;
	          r_sum -= r_out_sum;
	          g_sum -= g_out_sum;
	          b_sum -= b_out_sum;
	          r_out_sum -= stackIn.r;
	          g_out_sum -= stackIn.g;
	          b_out_sum -= stackIn.b;
	          readPos = innerPos + readPosOffset;
	          if (readPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pr = pixels[readPos];
	          pg = pixels[readPos + 1];
	          pb = pixels[readPos + 2];
	          r_in_sum += stackIn.r = pr;
	          g_in_sum += stackIn.g = pg;
	          b_in_sum += stackIn.b = pb;
	          r_sum += r_in_sum;
	          g_sum += g_in_sum;
	          b_sum += b_in_sum;
	          r_out_sum += pr = stackOut.r;
	          g_out_sum += pg = stackOut.g;
	          b_out_sum += pb = stackOut.b;
	          r_in_sum -= pr;
	          g_in_sum -= pg;
	          b_in_sum -= pb;
	          stackIn = stackIn.next;
	          stackOut = stackOut.next;
	          innerPos += innerStep;
	        }
	        results.push(outterPos += outterStep);
	      }
	      return results;
	    };

	    StackBlur.prototype.alphaPass = function(radius, pixels, outterStep, outterEnd, innerStep, innerEndDelta) {
	      var a_in_sum, a_out_sum, a_sum, firstPixelSumWeight, i, innerEnd, innerPos, innerRadiusEnd, j, oneOverStackWeight, outterPos, pa, radiusPlus1, rbs, readPos, readPosOffset, ref, results, stackEnd, stackIn, stackOut, stackStart, stackWeight;
	      radiusPlus1 = radius + 1;
	      stackWeight = radiusPlus1 * radiusPlus1;
	      oneOverStackWeight = 1 / stackWeight;
	      firstPixelSumWeight = (stackWeight + radiusPlus1) / 2;
	      stackStart = this.stackStart;
	      stackEnd = this.stackEnd;
	      outterPos = 3;
	      outterEnd += 3;
	      results = [];
	      while (outterPos <= outterEnd) {
	        a_in_sum = 0;
	        pa = pixels[outterPos];
	        a_out_sum = radiusPlus1 * pa;
	        a_sum = firstPixelSumWeight * pa;
	        stackIn = stackStart;
	        for (i = j = 0, ref = radius; j <= ref; i = j += 1) {
	          stackIn.a = pa;
	          stackIn = stackIn.next;
	        }
	        innerEnd = outterPos + innerEndDelta;
	        rbs = radius;
	        innerRadiusEnd = outterPos + radius * innerStep;
	        innerPos = outterPos + innerStep;
	        while (innerPos <= innerRadiusEnd) {
	          readPos = innerPos;
	          if (innerPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          pa = pixels[readPos];
	          a_in_sum += stackIn.a = pa;
	          a_sum += pa * rbs;
	          rbs--;
	          stackIn = stackIn.next;
	          innerPos += innerStep;
	        }
	        stackOut = stackEnd;
	        readPosOffset = radiusPlus1 * innerStep;
	        innerPos = outterPos;
	        while (innerPos <= innerEnd) {
	          pixels[innerPos] = a_sum * oneOverStackWeight;
	          a_sum -= a_out_sum;
	          a_out_sum -= stackIn.a;
	          readPos = innerPos + readPosOffset;
	          if (readPos > innerEnd) {
	            readPos = innerEnd;
	          }
	          a_in_sum += stackIn.a = pixels[readPos];
	          a_sum += a_in_sum;
	          a_out_sum += pa = stackOut.a;
	          a_in_sum -= pa;
	          stackIn = stackIn.next;
	          stackOut = stackOut.next;
	          innerPos += innerStep;
	        }
	        results.push(outterPos += outterStep);
	      }
	      return results;
	    };

	    StackBlur.prototype.stackBlurCanvasRGBA = function(pixels, width, height, radius) {
	      if (radius <= 0) {
	        return;
	      }
	      this.createStack(radius);
	      this.rgbaPass(radius, pixels, 4, (width - 1) * 4, width * 4, (height - 1) * width * 4);
	      return this.rgbaPass(radius, pixels, width * 4, (height - 1) * width * 4, 4, (width - 1) * 4);
	    };

	    StackBlur.prototype.stackBlurCanvasAlpha = function(pixels, width, height, radius) {
	      if (radius <= 0) {
	        return;
	      }
	      this.createStack(radius);
	      this.alphaPass(radius, pixels, 4, (width - 1) * 4, width * 4, (height - 1) * width * 4);
	      return this.alphaPass(radius, pixels, width * 4, (height - 1) * width * 4, 4, (width - 1) * 4);
	    };

	    StackBlur.prototype.stackBlurCanvasRGB = function(pixels, width, height, radius) {
	      if (radius <= 0) {
	        return;
	      }
	      this.createStack(radius);
	      this.rgbPass(radius, pixels, 4, (width - 1) * 4, width * 4, (height - 1) * width * 4);
	      return this.rgbPass(radius, pixels, width * 4, (height - 1) * width * 4, 4, (width - 1) * 4);
	    };

	    return StackBlur;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(117)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var BatchLoader, GoogleFontLoader, inspect, log;
	  inspect = Foundation.inspect, log = Foundation.log, BatchLoader = Foundation.BatchLoader;
	  return GoogleFontLoader = (function(superClass) {
	    extend(GoogleFontLoader, superClass);

	    GoogleFontLoader.singletonClass();

	    function GoogleFontLoader(options) {
	      if (options == null) {
	        options = {};
	      }
	      this.defaultWeight = {
	        UnifrakturCook: 700
	      };
	      GoogleFontLoader.__super__.constructor.call(this, (function(_this) {
	        return function(src) {
	          return _this.webFontLoadWithWaiting([src]);
	        };
	      })(this));
	    }

	    GoogleFontLoader.prototype.googleFamilies = function(fontFamilies) {
	      var font, i, len, results, weight;
	      results = [];
	      for (i = 0, len = fontFamilies.length; i < len; i++) {
	        font = fontFamilies[i];
	        weight = this.defaultWeight[font] || "";
	        results.push((font.split(" ").join("+")) + ":" + weight + ":latin,latin-ext");
	      }
	      return results;
	    };

	    GoogleFontLoader.prototype.webFontLoad = function(fontFamilies, done) {
	      return WebFont.load({
	        google: {
	          families: this.googleFamilies(fontFamilies)
	        },
	        fontactive: (function(_this) {
	          return function(font) {
	            return _this.addAsset(font, font);
	          };
	        })(this),
	        fontinactive: (function(_this) {
	          return function(font) {
	            return _this.addAsset(font, "FAILED TO LOAD");
	          };
	        })(this),
	        inactive: done,
	        active: done
	      });
	    };

	    GoogleFontLoader.prototype.webFontLoadWithWaiting = function(fontFamilies) {
	      var font, i, len, wfw;
	      this.log("loading external fonts: " + (inspect(fontFamilies)));
	      if (window.WebFontConfig) {
	        wfw = window.WebFontWaiting || (window.WebFontWaiting = {});
	        for (i = 0, len = fontFamilies.length; i < len; i++) {
	          font = fontFamilies[i];
	          wfw[font] = true;
	        }
	        return;
	      }
	      return this.webFontLoad(fontFamilies, (function(_this) {
	        return function() {
	          var waitingList;
	          waitingList = window.WebFontWaiting && Object.keys(window.WebFontWaiting);
	          window.WebFontWaiting = null;
	          window.WebFontConfig = null;
	          if (waitingList) {
	            return _this.webFontLoad(waitingList);
	          }
	        };
	      })(this));
	    };

	    return GoogleFontLoader;

	  })(BatchLoader);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 117 */
/***/ function(module, exports) {

	;(function(window,document,undefined){
	var j=!0,l=null,m=!1;function n(a){return function(){return this[a]}}var q=this;function r(a,b){var c=a.split("."),d=q;!(c[0]in d)&&d.execScript&&d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)!c.length&&void 0!==b?d[e]=b:d=d[e]?d[e]:d[e]={}}function aa(a,b,c){return a.call.apply(a.bind,arguments)}
	function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function t(a,b,c){t=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return t.apply(l,arguments)}var u=Date.now||function(){return+new Date};function v(a,b){this.G=a;this.v=b||a;this.z=this.v.document}v.prototype.createElement=function(a,b,c){a=this.z.createElement(a);if(b)for(var d in b)b.hasOwnProperty(d)&&("style"==d?a.style.cssText=b[d]:a.setAttribute(d,b[d]));c&&a.appendChild(this.z.createTextNode(c));return a};function ca(a,b,c){a=a.z.getElementsByTagName(b)[0];a||(a=document.documentElement);a&&a.lastChild&&a.insertBefore(c,a.lastChild)}
	function w(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return;c.push(b);a.className=c.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function x(a,b){for(var c=a.className.split(/\s+/),d=[],e=0,g=c.length;e<g;e++)c[e]!=b&&d.push(c[e]);a.className=d.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function da(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return j;return m}
	function y(a){var b=a.v.location.protocol;"about:"==b&&(b=a.G.location.protocol);return"https:"==b?"https:":"http:"}function ea(a,b){var c=a.createElement("link",{rel:"stylesheet",href:b}),d=m;c.onload=function(){d||(d=j)};c.onerror=function(){d||(d=j)};ca(a,"head",c)}
	function z(a,b,c,d){var e=a.z.getElementsByTagName("head")[0];if(e){var g=a.createElement("script",{src:b}),f=m;g.onload=g.onreadystatechange=function(){if(!f&&(!this.readyState||"loaded"==this.readyState||"complete"==this.readyState))f=j,c&&c(l),g.onload=g.onreadystatechange=l,"HEAD"==g.parentNode.tagName&&e.removeChild(g)};e.appendChild(g);window.setTimeout(function(){f||(f=j,c&&c(Error("Script load timeout")))},d||5E3);return g}return l};function A(a,b,c){this.M=a;this.U=b;this.Aa=c}r("webfont.BrowserInfo",A);A.prototype.pa=n("M");A.prototype.hasWebFontSupport=A.prototype.pa;A.prototype.qa=n("U");A.prototype.hasWebKitFallbackBug=A.prototype.qa;A.prototype.ra=n("Aa");A.prototype.hasWebKitMetricsBug=A.prototype.ra;function B(a,b,c,d){this.d=a!=l?a:l;this.o=b!=l?b:l;this.aa=c!=l?c:l;this.f=d!=l?d:l}var fa=/^([0-9]+)(?:[\._-]([0-9]+))?(?:[\._-]([0-9]+))?(?:[\._+-]?(.*))?$/;B.prototype.toString=function(){return[this.d,this.o||"",this.aa||"",this.f||""].join("")};
	function C(a){a=fa.exec(a);var b=l,c=l,d=l,e=l;a&&(a[1]!==l&&a[1]&&(b=parseInt(a[1],10)),a[2]!==l&&a[2]&&(c=parseInt(a[2],10)),a[3]!==l&&a[3]&&(d=parseInt(a[3],10)),a[4]!==l&&a[4]&&(e=/^[0-9]+$/.test(a[4])?parseInt(a[4],10):a[4]));return new B(b,c,d,e)};function D(a,b,c,d,e,g,f,h,k,p,s){this.K=a;this.Ga=b;this.za=c;this.fa=d;this.Ea=e;this.ea=g;this.wa=f;this.Fa=h;this.va=k;this.da=p;this.k=s}r("webfont.UserAgent",D);D.prototype.getName=n("K");D.prototype.getName=D.prototype.getName;D.prototype.oa=n("za");D.prototype.getVersion=D.prototype.oa;D.prototype.ka=n("fa");D.prototype.getEngine=D.prototype.ka;D.prototype.la=n("ea");D.prototype.getEngineVersion=D.prototype.la;D.prototype.ma=n("wa");D.prototype.getPlatform=D.prototype.ma;D.prototype.na=n("va");
	D.prototype.getPlatformVersion=D.prototype.na;D.prototype.ja=n("da");D.prototype.getDocumentMode=D.prototype.ja;D.prototype.ia=n("k");D.prototype.getBrowserInfo=D.prototype.ia;function E(a,b){this.a=a;this.I=b}var ga=new D("Unknown",new B,"Unknown","Unknown",new B,"Unknown","Unknown",new B,"Unknown",void 0,new A(m,m,m));
	E.prototype.parse=function(){var a;if(-1!=this.a.indexOf("MSIE")||-1!=this.a.indexOf("Trident/")){a=F(this);var b=G(this),c=C(b),d=l,e=l,g=l,f=l,h=H(this.a,/Trident\/([\d\w\.]+)/,1),k=I(this.I),d=-1!=this.a.indexOf("MSIE")?H(this.a,/MSIE ([\d\w\.]+)/,1):H(this.a,/rv:([\d\w\.]+)/,1),e=C(d);""!=h?(g="Trident",f=C(h)):(g="Unknown",f=new B,h="Unknown");a=new D("MSIE",e,d,g,f,h,a,c,b,k,new A("Windows"==a&&6<=e.d||"Windows Phone"==a&&8<=c.d,m,m))}else if(-1!=this.a.indexOf("Opera"))a:if(a="Unknown",b=H(this.a,
	/Presto\/([\d\w\.]+)/,1),c=C(b),d=G(this),e=C(d),g=I(this.I),c.d!==l?a="Presto":(-1!=this.a.indexOf("Gecko")&&(a="Gecko"),b=H(this.a,/rv:([^\)]+)/,1),c=C(b)),-1!=this.a.indexOf("Opera Mini/"))f=H(this.a,/Opera Mini\/([\d\.]+)/,1),h=C(f),a=new D("OperaMini",h,f,a,c,b,F(this),e,d,g,new A(m,m,m));else{if(-1!=this.a.indexOf("Version/")&&(f=H(this.a,/Version\/([\d\.]+)/,1),h=C(f),h.d!==l)){a=new D("Opera",h,f,a,c,b,F(this),e,d,g,new A(10<=h.d,m,m));break a}f=H(this.a,/Opera[\/ ]([\d\.]+)/,1);h=C(f);a=
	h.d!==l?new D("Opera",h,f,a,c,b,F(this),e,d,g,new A(10<=h.d,m,m)):new D("Opera",new B,"Unknown",a,c,b,F(this),e,d,g,new A(m,m,m))}else/OPR\/[\d.]+/.test(this.a)?a=ha(this):/AppleWeb(K|k)it/.test(this.a)?a=ha(this):-1!=this.a.indexOf("Gecko")?(a="Unknown",b=new B,c="Unknown",d=G(this),e=C(d),g=m,-1!=this.a.indexOf("Firefox")?(a="Firefox",c=H(this.a,/Firefox\/([\d\w\.]+)/,1),b=C(c),g=3<=b.d&&5<=b.o):-1!=this.a.indexOf("Mozilla")&&(a="Mozilla"),f=H(this.a,/rv:([^\)]+)/,1),h=C(f),g||(g=1<h.d||1==h.d&&
	9<h.o||1==h.d&&9==h.o&&2<=h.aa||f.match(/1\.9\.1b[123]/)!=l||f.match(/1\.9\.1\.[\d\.]+/)!=l),a=new D(a,b,c,"Gecko",h,f,F(this),e,d,I(this.I),new A(g,m,m))):a=ga;return a};function F(a){var b=H(a.a,/(iPod|iPad|iPhone|Android|Windows Phone|BB\d{2}|BlackBerry)/,1);if(""!=b)return/BB\d{2}/.test(b)&&(b="BlackBerry"),b;a=H(a.a,/(Linux|Mac_PowerPC|Macintosh|Windows|CrOS)/,1);return""!=a?("Mac_PowerPC"==a&&(a="Macintosh"),a):"Unknown"}
	function G(a){var b=H(a.a,/(OS X|Windows NT|Android) ([^;)]+)/,2);if(b||(b=H(a.a,/Windows Phone( OS)? ([^;)]+)/,2))||(b=H(a.a,/(iPhone )?OS ([\d_]+)/,2)))return b;if(b=H(a.a,/(?:Linux|CrOS) ([^;)]+)/,1))for(var b=b.split(/\s/),c=0;c<b.length;c+=1)if(/^[\d\._]+$/.test(b[c]))return b[c];return(a=H(a.a,/(BB\d{2}|BlackBerry).*?Version\/([^\s]*)/,2))?a:"Unknown"}
	function ha(a){var b=F(a),c=G(a),d=C(c),e=H(a.a,/AppleWeb(?:K|k)it\/([\d\.\+]+)/,1),g=C(e),f="Unknown",h=new B,k="Unknown",p=m;/OPR\/[\d.]+/.test(a.a)?f="Opera":-1!=a.a.indexOf("Chrome")||-1!=a.a.indexOf("CrMo")||-1!=a.a.indexOf("CriOS")?f="Chrome":/Silk\/\d/.test(a.a)?f="Silk":"BlackBerry"==b||"Android"==b?f="BuiltinBrowser":-1!=a.a.indexOf("PhantomJS")?f="PhantomJS":-1!=a.a.indexOf("Safari")?f="Safari":-1!=a.a.indexOf("AdobeAIR")&&(f="AdobeAIR");"BuiltinBrowser"==f?k="Unknown":"Silk"==f?k=H(a.a,
	/Silk\/([\d\._]+)/,1):"Chrome"==f?k=H(a.a,/(Chrome|CrMo|CriOS)\/([\d\.]+)/,2):-1!=a.a.indexOf("Version/")?k=H(a.a,/Version\/([\d\.\w]+)/,1):"AdobeAIR"==f?k=H(a.a,/AdobeAIR\/([\d\.]+)/,1):"Opera"==f?k=H(a.a,/OPR\/([\d.]+)/,1):"PhantomJS"==f&&(k=H(a.a,/PhantomJS\/([\d.]+)/,1));h=C(k);p="AdobeAIR"==f?2<h.d||2==h.d&&5<=h.o:"BlackBerry"==b?10<=d.d:"Android"==b?2<d.d||2==d.d&&1<d.o:526<=g.d||525<=g.d&&13<=g.o;return new D(f,h,k,"AppleWebKit",g,e,b,d,c,I(a.I),new A(p,536>g.d||536==g.d&&11>g.o,"iPhone"==
	b||"iPad"==b||"iPod"==b||"Macintosh"==b))}function H(a,b,c){return(a=a.match(b))&&a[c]?a[c]:""}function I(a){if(a.documentMode)return a.documentMode};function ia(a){this.ua=a||"-"}ia.prototype.f=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.ua)};function J(a,b){this.K=a;this.V=4;this.L="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.L=c[1],this.V=parseInt(c[2],10))}J.prototype.getName=n("K");function K(a){return a.L+a.V}function ja(a){var b=4,c="n",d=l;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ka(a,b,c){this.c=a;this.h=b;this.O=c;this.j="wf";this.g=new ia("-")}function L(a){x(a.h,a.g.f(a.j,"loading"));da(a.h,a.g.f(a.j,"active"))||w(a.h,a.g.f(a.j,"inactive"));M(a,"inactive")}function M(a,b,c){if(a.O[b])if(c)a.O[b](c.getName(),K(c));else a.O[b]()};function la(){this.w={}};function O(a,b){this.c=a;this.C=b;this.s=this.c.createElement("span",{"aria-hidden":"true"},this.C)}
	function P(a,b){var c;c=[];for(var d=b.K.split(/,\s*/),e=0;e<d.length;e++){var g=d[e].replace(/['"]/g,"");-1==g.indexOf(" ")?c.push(g):c.push("'"+g+"'")}c=c.join(",");d="normal";e=b.V+"00";"o"===b.L?d="oblique":"i"===b.L&&(d="italic");a.s.style.cssText="position:absolute;top:-999px;left:-999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+c+";"+("font-style:"+d+";font-weight:"+e+";")}
	function Q(a){ca(a.c,"body",a.s)}O.prototype.remove=function(){var a=this.s;a.parentNode&&a.parentNode.removeChild(a)};function ma(a,b,c,d,e,g,f,h){this.W=a;this.sa=b;this.c=c;this.q=d;this.C=h||"BESbswy";this.k=e;this.F={};this.T=g||5E3;this.Z=f||l;this.B=this.A=l;a=new O(this.c,this.C);Q(a);for(var k in R)R.hasOwnProperty(k)&&(P(a,new J(R[k],K(this.q))),this.F[R[k]]=a.s.offsetWidth);a.remove()}var R={Da:"serif",Ca:"sans-serif",Ba:"monospace"};
	ma.prototype.start=function(){this.A=new O(this.c,this.C);Q(this.A);this.B=new O(this.c,this.C);Q(this.B);this.xa=u();P(this.A,new J(this.q.getName()+",serif",K(this.q)));P(this.B,new J(this.q.getName()+",sans-serif",K(this.q)));oa(this)};function pa(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.F[R[d]]&&c===a.F[R[d]])return j;return m}
	function oa(a){var b=a.A.s.offsetWidth,c=a.B.s.offsetWidth;b===a.F.serif&&c===a.F["sans-serif"]||a.k.U&&pa(a,b,c)?u()-a.xa>=a.T?a.k.U&&pa(a,b,c)&&(a.Z===l||a.Z.hasOwnProperty(a.q.getName()))?S(a,a.W):S(a,a.sa):setTimeout(t(function(){oa(this)},a),25):S(a,a.W)}function S(a,b){a.A.remove();a.B.remove();b(a.q)};function T(a,b,c,d){this.c=b;this.t=c;this.P=0;this.ba=this.Y=m;this.T=d;this.k=a.k}function qa(a,b,c,d,e){if(0===b.length&&e)L(a.t);else{a.P+=b.length;e&&(a.Y=e);for(e=0;e<b.length;e++){var g=b[e],f=c[g.getName()],h=a.t,k=g;w(h.h,h.g.f(h.j,k.getName(),K(k).toString(),"loading"));M(h,"fontloading",k);(new ma(t(a.ga,a),t(a.ha,a),a.c,g,a.k,a.T,d,f)).start()}}}
	T.prototype.ga=function(a){var b=this.t;x(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"loading"));x(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"inactive"));w(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"active"));M(b,"fontactive",a);this.ba=j;ra(this)};T.prototype.ha=function(a){var b=this.t;x(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"loading"));da(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"active"))||w(b.h,b.g.f(b.j,a.getName(),K(a).toString(),"inactive"));M(b,"fontinactive",a);ra(this)};
	function ra(a){0==--a.P&&a.Y&&(a.ba?(a=a.t,x(a.h,a.g.f(a.j,"loading")),x(a.h,a.g.f(a.j,"inactive")),w(a.h,a.g.f(a.j,"active")),M(a,"active")):L(a.t))};function U(a){this.G=a;this.u=new la;this.ya=new E(a.navigator.userAgent,a.document);this.a=this.ya.parse();this.Q=this.R=0}
	U.prototype.load=function(a){var b=a.context||this.G;this.c=new v(this.G,b);var b=new ka(this.c,b.document.documentElement,a),c=[],d=a.timeout;w(b.h,b.g.f(b.j,"loading"));M(b,"loading");var c=this.u,e=this.c,g=[],f;for(f in a)if(a.hasOwnProperty(f)){var h=c.w[f];h&&g.push(h(a[f],e))}c=g;this.Q=this.R=c.length;a=new T(this.a,this.c,b,d);f=0;for(d=c.length;f<d;f++)e=c[f],e.H(this.a,t(this.ta,this,e,b,a))};
	U.prototype.ta=function(a,b,c,d){var e=this;d?a.load(function(a,b,d){var k=0==--e.R;setTimeout(function(){qa(c,a,b||{},d||l,k)},0)}):(a=0==--this.R,this.Q--,a&&0==this.Q&&L(b),qa(c,[],{},l,a))};function sa(a,b,c){this.N=a?a:b+ta;this.p=[];this.S=[];this.ca=c||""}var ta="//fonts.googleapis.com/css";sa.prototype.f=function(){if(0==this.p.length)throw Error("No fonts to load !");if(-1!=this.N.indexOf("kit="))return this.N;for(var a=this.p.length,b=[],c=0;c<a;c++)b.push(this.p[c].replace(/ /g,"+"));a=this.N+"?family="+b.join("%7C");0<this.S.length&&(a+="&subset="+this.S.join(","));0<this.ca.length&&(a+="&text="+encodeURIComponent(this.ca));return a};function ua(a){this.p=a;this.$=[];this.J={}}
	var va={latin:"BESbswy",cyrillic:"&#1081;&#1103;&#1046;",greek:"&#945;&#946;&#931;",khmer:"&#x1780;&#x1781;&#x1782;",Hanuman:"&#x1780;&#x1781;&#x1782;"},wa={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},xa={i:"i",italic:"i",n:"n",normal:"n"},ya=RegExp("^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$");
	ua.prototype.parse=function(){for(var a=this.p.length,b=0;b<a;b++){var c=this.p[b].split(":"),d=c[0].replace(/\+/g," "),e=["n4"];if(2<=c.length){var g;var f=c[1];g=[];if(f)for(var f=f.split(","),h=f.length,k=0;k<h;k++){var p;p=f[k];if(p.match(/^[\w]+$/)){p=ya.exec(p.toLowerCase());var s=void 0;if(p==l)s="";else{s=void 0;s=p[1];if(s==l||""==s)s="4";else var na=wa[s],s=na?na:isNaN(s)?"4":s.substr(0,1);s=[p[2]==l||""==p[2]?"n":xa[p[2]],s].join("")}p=s}else p="";p&&g.push(p)}0<g.length&&(e=g);3==c.length&&
	(c=c[2],g=[],c=!c?g:c.split(","),0<c.length&&(c=va[c[0]])&&(this.J[d]=c))}this.J[d]||(c=va[d])&&(this.J[d]=c);for(c=0;c<e.length;c+=1)this.$.push(new J(d,e[c]))}};function V(a,b){this.a=(new E(navigator.userAgent,document)).parse();this.c=a;this.e=b}var za={Arimo:j,Cousine:j,Tinos:j};V.prototype.H=function(a,b){b(a.k.M)};V.prototype.load=function(a){var b=this.c;if("MSIE"==this.a.getName()&&this.e.blocking!=j){var c=t(this.X,this,a),d=function(){b.z.body?c():setTimeout(d,0)};d()}else this.X(a)};
	V.prototype.X=function(a){for(var b=this.c,c=new sa(this.e.api,y(b),this.e.text),d=this.e.families,e=d.length,g=0;g<e;g++){var f=d[g].split(":");3==f.length&&c.S.push(f.pop());var h="";2==f.length&&""!=f[1]&&(h=":");c.p.push(f.join(h))}d=new ua(d);d.parse();ea(b,c.f());a(d.$,d.J,za)};function W(a,b){this.c=a;this.e=b;this.m=[]}W.prototype.D=function(a){return y(this.c)+(this.e.api||"//f.fontdeck.com/s/css/js/")+(this.c.v.location.hostname||this.c.G.location.hostname)+"/"+a+".js"};
	W.prototype.H=function(a,b){var c=this.e.id,d=this.c.v,e=this;c?(d.__webfontfontdeckmodule__||(d.__webfontfontdeckmodule__={}),d.__webfontfontdeckmodule__[c]=function(a,c){for(var d=0,k=c.fonts.length;d<k;++d){var p=c.fonts[d];e.m.push(new J(p.name,ja("font-weight:"+p.weight+";font-style:"+p.style)))}b(a)},z(this.c,this.D(c),function(a){a&&b(m)})):b(m)};W.prototype.load=function(a){a(this.m)};function X(a,b){this.c=a;this.e=b;this.m=[]}X.prototype.D=function(a){var b=y(this.c);return(this.e.api||b+"//use.typekit.net")+"/"+a+".js"};
	X.prototype.H=function(a,b){var c=this.e.id,d=this.e,e=this.c.v,g=this;c?(e.__webfonttypekitmodule__||(e.__webfonttypekitmodule__={}),e.__webfonttypekitmodule__[c]=function(c){c(a,d,function(a,c,d){for(var e=0;e<c.length;e+=1){var f=d[c[e]];if(f)for(var N=0;N<f.length;N+=1)g.m.push(new J(c[e],f[N]));else g.m.push(new J(c[e]))}b(a)})},z(this.c,this.D(c),function(a){a&&b(m)},2E3)):b(m)};X.prototype.load=function(a){a(this.m)};function Y(a,b){this.c=a;this.e=b;this.m=[]}Y.prototype.H=function(a,b){var c=this,d=c.e.projectId,e=c.e.version;if(d){var g=c.c.v;z(this.c,c.D(d,e),function(e){if(e)b(m);else{if(g["__mti_fntLst"+d]&&(e=g["__mti_fntLst"+d]()))for(var h=0;h<e.length;h++)c.m.push(new J(e[h].fontfamily));b(a.k.M)}}).id="__MonotypeAPIScript__"+d}else b(m)};Y.prototype.D=function(a,b){var c=y(this.c),d=(this.e.api||"fast.fonts.net/jsapi").replace(/^.*http(s?):(\/\/)?/,"");return c+"//"+d+"/"+a+".js"+(b?"?v="+b:"")};
	Y.prototype.load=function(a){a(this.m)};function Z(a,b){this.c=a;this.e=b}Z.prototype.load=function(a){var b,c,d=this.e.urls||[],e=this.e.families||[],g=this.e.testStrings||{};b=0;for(c=d.length;b<c;b++)ea(this.c,d[b]);d=[];b=0;for(c=e.length;b<c;b++){var f=e[b].split(":");if(f[1])for(var h=f[1].split(","),k=0;k<h.length;k+=1)d.push(new J(f[0],h[k]));else d.push(new J(f[0]))}a(d,g)};Z.prototype.H=function(a,b){return b(a.k.M)};var $=new U(q);$.u.w.custom=function(a,b){return new Z(b,a)};$.u.w.fontdeck=function(a,b){return new W(b,a)};$.u.w.monotype=function(a,b){return new Y(b,a)};$.u.w.typekit=function(a,b){return new X(b,a)};$.u.w.google=function(a,b){return new V(b,a)};q.WebFont||(q.WebFont={},q.WebFont.load=t($.load,$),q.WebFontConfig&&$.load(q.WebFontConfig));
	})(this,document);


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*

	StackBlurOriginal - a fast almost Gaussian Blur For Canvas

	Version:  0.5
	Author:   Mario Klingemann
	Contact:  mario@quasimondo.com
	Website:  http://www.quasimondo.com/StackBlurForCanvas
	Twitter:  @quasimondo

	In case you find this class useful - especially in commercial projects -
	I am not totally unhappy for a small donation to my PayPal account
	mario@quasimondo.de

	Or support me on flattr:
	https://flattr.com/thing/72791/StackBlurOriginal-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

	Copyright (c) 2010 Mario Klingemann

	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(110), __webpack_require__(119), __webpack_require__(113)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, OrigStackBlur) {
	  var BlurStack, color, inspect, matrix, mulTable, nextTick, point, rect, shgTable;
	  point = Atomic.point, matrix = Atomic.matrix, rect = Atomic.rect, color = Atomic.color;
	  inspect = Foundation.Inspect.inspect;
	  nextTick = Foundation.nextTick;
	  mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
	  shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];
	  BlurStack = (function() {
	    function BlurStack() {
	      this.r = this.g = this.b = this.a = 0;
	      this.next = null;
	    }

	    return BlurStack;

	  })();
	  return Canvas.StackBlurOriginal = (function(superClass) {
	    extend(StackBlurOriginal, superClass);

	    function StackBlurOriginal() {
	      return StackBlurOriginal.__super__.constructor.apply(this, arguments);
	    }

	    StackBlurOriginal.blur = function(bitmap, radius) {
	      return (new Canvas.StackBlurOriginal).blur(bitmap, radius);
	    };

	    StackBlurOriginal.blurRGB = function(bitmap, radius) {
	      return (new Canvas.StackBlurOriginal).blurRGB(bitmap, radius);
	    };

	    StackBlurOriginal.prototype.blur = function(bitmap, radius) {
	      var imageData, pixels;
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      OrigStackBlur.stackBlurCanvasRGBA(imageData, 0, 0, bitmap.size.w, bitmap.size.h, radius);
	      return bitmap.putImageData(imageData);
	    };

	    StackBlurOriginal.prototype.blurRGB = function(bitmap, radius) {
	      var imageData, pixels;
	      imageData = bitmap.getImageData();
	      pixels = imageData.data;
	      OrigStackBlur.stackBlurCanvasRGB(imageData, 0, 0, bitmap.size.w, bitmap.size.h, radius);
	      return bitmap.putImageData(imageData);
	    };

	    StackBlurOriginal.prototype.stackBlurCanvasRGBA = function(pixels, top_x, top_y, width, height, radius) {
	      var a_in_sum, a_out_sum, a_sum, b_in_sum, b_out_sum, b_sum, div, g_in_sum, g_out_sum, g_sum, heightMinus1, i, j, k, l, m, mul_sum, n, o, p, pa, pb, pg, pr, q, r, r_in_sum, r_out_sum, r_sum, radiusPlus1, rbs, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, results, s, shg_sum, stack, stackEnd, stackIn, stackOut, stackStart, sumFactor, w4, widthMinus1, x, y, yi, yp, yw;
	      div = radius + radius + 1;
	      w4 = width << 2;
	      widthMinus1 = width - 1;
	      heightMinus1 = height - 1;
	      radiusPlus1 = radius + 1;
	      sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
	      stackStart = new BlurStack();
	      stack = stackStart;
	      for (i = j = 1, ref = div - 1; j <= ref; i = j += 1) {
	        stack = stack.next = new BlurStack();
	        if (i === radiusPlus1) {
	          stackEnd = stack;
	        }
	      }
	      stack.next = stackStart;
	      yw = yi = 0;
	      mul_sum = mulTable[radius];
	      shg_sum = shgTable[radius];
	      for (y = k = 0, ref1 = heightMinus1; k <= ref1; y = k += 1) {
	        r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;
	        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	        r_sum += sumFactor * pr;
	        g_sum += sumFactor * pg;
	        b_sum += sumFactor * pb;
	        a_sum += sumFactor * pa;
	        stack = stackStart;
	        for (i = l = 0, ref2 = radius; l <= ref2; i = l += 1) {
	          stack.r = pr;
	          stack.g = pg;
	          stack.b = pb;
	          stack.a = pa;
	          stack = stack.next;
	        }
	        for (i = m = 1, ref3 = radius; m <= ref3; i = m += 1) {
	          p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
	          r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);
	          g_sum += (stack.g = (pg = pixels[p + 1])) * rbs;
	          b_sum += (stack.b = (pb = pixels[p + 2])) * rbs;
	          a_sum += (stack.a = (pa = pixels[p + 3])) * rbs;
	          r_in_sum += pr;
	          g_in_sum += pg;
	          b_in_sum += pb;
	          a_in_sum += pa;
	          stack = stack.next;
	        }
	        stackIn = stackStart;
	        stackOut = stackEnd;
	        for (x = n = 0, ref4 = widthMinus1; n <= ref4; x = n += 1) {
	          pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;
	          if (pa !== 0) {
	            pa = 255 / pa;
	            pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;
	            pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	            pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	          } else {
	            pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
	          }
	          r_sum -= r_out_sum;
	          g_sum -= g_out_sum;
	          b_sum -= b_out_sum;
	          a_sum -= a_out_sum;
	          r_out_sum -= stackIn.r;
	          g_out_sum -= stackIn.g;
	          b_out_sum -= stackIn.b;
	          a_out_sum -= stackIn.a;
	          p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;
	          r_in_sum += (stackIn.r = pixels[p]);
	          g_in_sum += (stackIn.g = pixels[p + 1]);
	          b_in_sum += (stackIn.b = pixels[p + 2]);
	          a_in_sum += (stackIn.a = pixels[p + 3]);
	          r_sum += r_in_sum;
	          g_sum += g_in_sum;
	          b_sum += b_in_sum;
	          a_sum += a_in_sum;
	          stackIn = stackIn.next;
	          r_out_sum += (pr = stackOut.r);
	          g_out_sum += (pg = stackOut.g);
	          b_out_sum += (pb = stackOut.b);
	          a_out_sum += (pa = stackOut.a);
	          r_in_sum -= pr;
	          g_in_sum -= pg;
	          b_in_sum -= pb;
	          a_in_sum -= pa;
	          stackOut = stackOut.next;
	          yi += 4;
	        }
	        yw += width;
	      }
	      results = [];
	      for (x = o = 0, ref5 = widthMinus1; o <= ref5; x = o += 1) {
	        g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;
	        yi = x << 2;
	        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	        r_sum += sumFactor * pr;
	        g_sum += sumFactor * pg;
	        b_sum += sumFactor * pb;
	        a_sum += sumFactor * pa;
	        stack = stackStart;
	        for (i = q = 0, ref6 = radius; q <= ref6; i = q += 1) {
	          stack.r = pr;
	          stack.g = pg;
	          stack.b = pb;
	          stack.a = pa;
	          stack = stack.next;
	        }
	        yp = width;
	        for (i = r = 1, ref7 = radius; r <= ref7; i = r += 1) {
	          yi = (yp + x) << 2;
	          r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);
	          g_sum += (stack.g = (pg = pixels[yi + 1])) * rbs;
	          b_sum += (stack.b = (pb = pixels[yi + 2])) * rbs;
	          a_sum += (stack.a = (pa = pixels[yi + 3])) * rbs;
	          r_in_sum += pr;
	          g_in_sum += pg;
	          b_in_sum += pb;
	          a_in_sum += pa;
	          stack = stack.next;
	          if (i < heightMinus1) {
	            yp += width;
	          }
	        }
	        yi = x;
	        stackIn = stackStart;
	        stackOut = stackEnd;
	        for (y = s = 0, ref8 = heightMinus1; s <= ref8; y = s += 1) {
	          p = yi << 2;
	          pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;
	          if (pa > 0) {
	            pa = 255 / pa;
	            pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;
	            pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	            pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	          } else {
	            pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
	          }
	          r_sum -= r_out_sum;
	          g_sum -= g_out_sum;
	          b_sum -= b_out_sum;
	          a_sum -= a_out_sum;
	          r_out_sum -= stackIn.r;
	          g_out_sum -= stackIn.g;
	          b_out_sum -= stackIn.b;
	          a_out_sum -= stackIn.a;
	          p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;
	          r_sum += (r_in_sum += (stackIn.r = pixels[p]));
	          g_sum += (g_in_sum += (stackIn.g = pixels[p + 1]));
	          b_sum += (b_in_sum += (stackIn.b = pixels[p + 2]));
	          a_sum += (a_in_sum += (stackIn.a = pixels[p + 3]));
	          stackIn = stackIn.next;
	          r_out_sum += (pr = stackOut.r);
	          g_out_sum += (pg = stackOut.g);
	          b_out_sum += (pb = stackOut.b);
	          a_out_sum += (pa = stackOut.a);
	          r_in_sum -= pr;
	          g_in_sum -= pg;
	          b_in_sum -= pb;
	          a_in_sum -= pa;
	          stackOut = stackOut.next;
	          yi += width;
	        }
	        results.push(1);
	      }
	      return results;
	    };

	    return StackBlurOriginal;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*

	StackBlur - a fast almost Gaussian Blur For Canvas

	Version:  0.5
	Author:   Mario Klingemann
	Contact:  mario@quasimondo.com
	Website:  http://www.quasimondo.com/StackBlurForCanvas
	Twitter:  @quasimondo

	In case you find this class useful - especially in commercial projects -
	I am not totally unhappy for a small donation to my PayPal account
	mario@quasimondo.de

	Or support me on flattr:
	https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript

	Copyright (c) 2010 Mario Klingemann

	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:

	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	*/
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {


	  var mul_table = [
	          512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,
	          454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,
	          482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,
	          437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,
	          497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,
	          320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,
	          446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,
	          329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,
	          505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,
	          399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,
	          324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,
	          268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,
	          451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,
	          385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,
	          332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,
	          289,287,285,282,280,278,275,273,271,269,267,265,263,261,259];


	  var shg_table = [
	         9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17,
	      17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19,
	      19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20,
	      20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	      21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	      21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	      22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	      22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23,
	      23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	      23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	      23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	      23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	      24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	      24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	      24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	      24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24 ];

	  function stackBlurImage( imageID, canvasID, radius, blurAlphaChannel )
	  {

	    var img = document.getElementById( imageID );
	    var w = img.naturalWidth;
	      var h = img.naturalHeight;

	    var canvas = document.getElementById( canvasID );

	      canvas.style.width  = w + "px";
	      canvas.style.height = h + "px";
	      canvas.width = w;
	      canvas.height = h;

	      var context = canvas.getContext("2d");
	      context.clearRect( 0, 0, w, h );
	      context.drawImage( img, 0, 0 );

	    if ( isNaN(radius) || radius < 1 ) return;

	    if ( blurAlphaChannel )
	      stackBlurCanvasRGBA( canvasID, 0, 0, w, h, radius );
	    else
	      stackBlurCanvasRGB( canvasID, 0, 0, w, h, radius );
	  }


	  function stackBlurCanvasRGBA( imageData, top_x, top_y, width, height, radius )
	  {
	    // if ( isNaN(radius) || radius < 1 ) return;
	    // radius |= 0;

	    // var canvas  = document.getElementById( id );
	    // var context = canvas.getContext("2d");
	    // var imageData;

	    // try {
	    //   try {
	    //   imageData = context.getImageData( top_x, top_y, width, height );
	    //   } catch(e) {

	    //   // NOTE: this part is supposedly only needed if you want to work with local files
	    //   // so it might be okay to remove the whole try/catch block and just use
	    //   // imageData = context.getImageData( top_x, top_y, width, height );
	    //   try {
	    //     netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
	    //     imageData = context.getImageData( top_x, top_y, width, height );
	    //   } catch(e) {
	    //     alert("Cannot access local image");
	    //     throw new Error("unable to access local image data: " + e);
	    //     return;
	    //   }
	    //   }
	    // } catch(e) {
	    //   alert("Cannot access image");
	    //   throw new Error("unable to access image data: " + e);
	    // }

	    var pixels = imageData.data;

	    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum,
	    r_out_sum, g_out_sum, b_out_sum, a_out_sum,
	    r_in_sum, g_in_sum, b_in_sum, a_in_sum,
	    pr, pg, pb, pa, rbs;

	    var div = radius + radius + 1;
	    var w4 = width << 2;
	    var widthMinus1  = width - 1;
	    var heightMinus1 = height - 1;
	    var radiusPlus1  = radius + 1;
	    var sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2;

	    var stackStart = new BlurStack();
	    var stack = stackStart;
	    for ( i = 1; i < div; i++ )
	    {
	      stack = stack.next = new BlurStack();
	      if ( i == radiusPlus1 ) var stackEnd = stack;
	    }
	    stack.next = stackStart;
	    var stackIn = null;
	    var stackOut = null;

	    yw = yi = 0;

	    var mul_sum = mul_table[radius];
	    var shg_sum = shg_table[radius];

	    for ( y = 0; y < height; y++ )
	    {
	      r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;

	      r_out_sum = radiusPlus1 * ( pr = pixels[yi] );
	      g_out_sum = radiusPlus1 * ( pg = pixels[yi+1] );
	      b_out_sum = radiusPlus1 * ( pb = pixels[yi+2] );
	      a_out_sum = radiusPlus1 * ( pa = pixels[yi+3] );

	      r_sum += sumFactor * pr;
	      g_sum += sumFactor * pg;
	      b_sum += sumFactor * pb;
	      a_sum += sumFactor * pa;

	      stack = stackStart;

	      for( i = 0; i < radiusPlus1; i++ )
	      {
	        stack.r = pr;
	        stack.g = pg;
	        stack.b = pb;
	        stack.a = pa;
	        stack = stack.next;
	      }

	      for( i = 1; i < radiusPlus1; i++ )
	      {
	        p = yi + (( widthMinus1 < i ? widthMinus1 : i ) << 2 );
	        r_sum += ( stack.r = ( pr = pixels[p])) * ( rbs = radiusPlus1 - i );
	        g_sum += ( stack.g = ( pg = pixels[p+1])) * rbs;
	        b_sum += ( stack.b = ( pb = pixels[p+2])) * rbs;
	        a_sum += ( stack.a = ( pa = pixels[p+3])) * rbs;

	        r_in_sum += pr;
	        g_in_sum += pg;
	        b_in_sum += pb;
	        a_in_sum += pa;

	        stack = stack.next;
	      }


	      stackIn = stackStart;
	      stackOut = stackEnd;
	      for ( x = 0; x < width; x++ )
	      {
	        pixels[yi+3] = pa = (a_sum * mul_sum) >> shg_sum;
	        if ( pa != 0 )
	        {
	          pa = 255 / pa;
	          pixels[yi]   = ((r_sum * mul_sum) >> shg_sum) * pa;
	          pixels[yi+1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	          pixels[yi+2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	        } else {
	          pixels[yi] = pixels[yi+1] = pixels[yi+2] = 0;
	        }

	        r_sum -= r_out_sum;
	        g_sum -= g_out_sum;
	        b_sum -= b_out_sum;
	        a_sum -= a_out_sum;

	        r_out_sum -= stackIn.r;
	        g_out_sum -= stackIn.g;
	        b_out_sum -= stackIn.b;
	        a_out_sum -= stackIn.a;

	        p =  ( yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;

	        r_in_sum += ( stackIn.r = pixels[p]);
	        g_in_sum += ( stackIn.g = pixels[p+1]);
	        b_in_sum += ( stackIn.b = pixels[p+2]);
	        a_in_sum += ( stackIn.a = pixels[p+3]);

	        r_sum += r_in_sum;
	        g_sum += g_in_sum;
	        b_sum += b_in_sum;
	        a_sum += a_in_sum;

	        stackIn = stackIn.next;

	        r_out_sum += ( pr = stackOut.r );
	        g_out_sum += ( pg = stackOut.g );
	        b_out_sum += ( pb = stackOut.b );
	        a_out_sum += ( pa = stackOut.a );

	        r_in_sum -= pr;
	        g_in_sum -= pg;
	        b_in_sum -= pb;
	        a_in_sum -= pa;

	        stackOut = stackOut.next;

	        yi += 4;
	      }
	      yw += width;
	    }


	    for ( x = 0; x < width; x++ )
	    {
	      g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;

	      yi = x << 2;
	      r_out_sum = radiusPlus1 * ( pr = pixels[yi]);
	      g_out_sum = radiusPlus1 * ( pg = pixels[yi+1]);
	      b_out_sum = radiusPlus1 * ( pb = pixels[yi+2]);
	      a_out_sum = radiusPlus1 * ( pa = pixels[yi+3]);

	      r_sum += sumFactor * pr;
	      g_sum += sumFactor * pg;
	      b_sum += sumFactor * pb;
	      a_sum += sumFactor * pa;

	      stack = stackStart;

	      for( i = 0; i < radiusPlus1; i++ )
	      {
	        stack.r = pr;
	        stack.g = pg;
	        stack.b = pb;
	        stack.a = pa;
	        stack = stack.next;
	      }

	      yp = width;

	      for( i = 1; i <= radius; i++ )
	      {
	        yi = ( yp + x ) << 2;

	        r_sum += ( stack.r = ( pr = pixels[yi])) * ( rbs = radiusPlus1 - i );
	        g_sum += ( stack.g = ( pg = pixels[yi+1])) * rbs;
	        b_sum += ( stack.b = ( pb = pixels[yi+2])) * rbs;
	        a_sum += ( stack.a = ( pa = pixels[yi+3])) * rbs;

	        r_in_sum += pr;
	        g_in_sum += pg;
	        b_in_sum += pb;
	        a_in_sum += pa;

	        stack = stack.next;

	        if( i < heightMinus1 )
	        {
	          yp += width;
	        }
	      }

	      yi = x;
	      stackIn = stackStart;
	      stackOut = stackEnd;
	      for ( y = 0; y < height; y++ )
	      {
	        p = yi << 2;
	        pixels[p+3] = pa = (a_sum * mul_sum) >> shg_sum;
	        if ( pa > 0 )
	        {
	          pa = 255 / pa;
	          pixels[p]   = ((r_sum * mul_sum) >> shg_sum ) * pa;
	          pixels[p+1] = ((g_sum * mul_sum) >> shg_sum ) * pa;
	          pixels[p+2] = ((b_sum * mul_sum) >> shg_sum ) * pa;
	        } else {
	          pixels[p] = pixels[p+1] = pixels[p+2] = 0;
	        }

	        r_sum -= r_out_sum;
	        g_sum -= g_out_sum;
	        b_sum -= b_out_sum;
	        a_sum -= a_out_sum;

	        r_out_sum -= stackIn.r;
	        g_out_sum -= stackIn.g;
	        b_out_sum -= stackIn.b;
	        a_out_sum -= stackIn.a;

	        p = ( x + (( ( p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1 ) * width )) << 2;

	        r_sum += ( r_in_sum += ( stackIn.r = pixels[p]));
	        g_sum += ( g_in_sum += ( stackIn.g = pixels[p+1]));
	        b_sum += ( b_in_sum += ( stackIn.b = pixels[p+2]));
	        a_sum += ( a_in_sum += ( stackIn.a = pixels[p+3]));

	        stackIn = stackIn.next;

	        r_out_sum += ( pr = stackOut.r );
	        g_out_sum += ( pg = stackOut.g );
	        b_out_sum += ( pb = stackOut.b );
	        a_out_sum += ( pa = stackOut.a );

	        r_in_sum -= pr;
	        g_in_sum -= pg;
	        b_in_sum -= pb;
	        a_in_sum -= pa;

	        stackOut = stackOut.next;

	        yi += width;
	      }
	    }

	    // context.putImageData( imageData, top_x, top_y );

	  }


	  function stackBlurCanvasRGB( imageData, top_x, top_y, width, height, radius )
	  {
	    // if ( isNaN(radius) || radius < 1 ) return;
	    // radius |= 0;

	    // var canvas  = document.getElementById( id );
	    // var context = canvas.getContext("2d");
	    // var imageData;

	    // try {
	    //   try {
	    //   imageData = context.getImageData( top_x, top_y, width, height );
	    //   } catch(e) {

	    //   // NOTE: this part is supposedly only needed if you want to work with local files
	    //   // so it might be okay to remove the whole try/catch block and just use
	    //   // imageData = context.getImageData( top_x, top_y, width, height );
	    //   try {
	    //     netscape.security.PrivilegeManager.enablePrivilege("UniversalBrowserRead");
	    //     imageData = context.getImageData( top_x, top_y, width, height );
	    //   } catch(e) {
	    //     alert("Cannot access local image");
	    //     throw new Error("unable to access local image data: " + e);
	    //     return;
	    //   }
	    //   }
	    // } catch(e) {
	    //   alert("Cannot access image");
	    //   throw new Error("unable to access image data: " + e);
	    // }

	    var pixels = imageData.data;

	    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,
	    r_out_sum, g_out_sum, b_out_sum,
	    r_in_sum, g_in_sum, b_in_sum,
	    pr, pg, pb, rbs;

	    var div = radius + radius + 1;
	    var w4 = width << 2;
	    var widthMinus1  = width - 1;
	    var heightMinus1 = height - 1;
	    var radiusPlus1  = radius + 1;
	    var sumFactor = radiusPlus1 * ( radiusPlus1 + 1 ) / 2;

	    var stackStart = new BlurStack();
	    var stack = stackStart;
	    for ( i = 1; i < div; i++ )
	    {
	      stack = stack.next = new BlurStack();
	      if ( i == radiusPlus1 ) var stackEnd = stack;
	    }
	    stack.next = stackStart;
	    var stackIn = null;
	    var stackOut = null;

	    yw = yi = 0;

	    var mul_sum = mul_table[radius];
	    var shg_sum = shg_table[radius];

	    for ( y = 0; y < height; y++ )
	    {
	      r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;

	      r_out_sum = radiusPlus1 * ( pr = pixels[yi] );
	      g_out_sum = radiusPlus1 * ( pg = pixels[yi+1] );
	      b_out_sum = radiusPlus1 * ( pb = pixels[yi+2] );

	      r_sum += sumFactor * pr;
	      g_sum += sumFactor * pg;
	      b_sum += sumFactor * pb;

	      stack = stackStart;

	      for( i = 0; i < radiusPlus1; i++ )
	      {
	        stack.r = pr;
	        stack.g = pg;
	        stack.b = pb;
	        stack = stack.next;
	      }

	      for( i = 1; i < radiusPlus1; i++ )
	      {
	        p = yi + (( widthMinus1 < i ? widthMinus1 : i ) << 2 );
	        r_sum += ( stack.r = ( pr = pixels[p])) * ( rbs = radiusPlus1 - i );
	        g_sum += ( stack.g = ( pg = pixels[p+1])) * rbs;
	        b_sum += ( stack.b = ( pb = pixels[p+2])) * rbs;

	        r_in_sum += pr;
	        g_in_sum += pg;
	        b_in_sum += pb;

	        stack = stack.next;
	      }


	      stackIn = stackStart;
	      stackOut = stackEnd;
	      for ( x = 0; x < width; x++ )
	      {
	        pixels[yi]   = (r_sum * mul_sum) >> shg_sum;
	        pixels[yi+1] = (g_sum * mul_sum) >> shg_sum;
	        pixels[yi+2] = (b_sum * mul_sum) >> shg_sum;

	        r_sum -= r_out_sum;
	        g_sum -= g_out_sum;
	        b_sum -= b_out_sum;

	        r_out_sum -= stackIn.r;
	        g_out_sum -= stackIn.g;
	        b_out_sum -= stackIn.b;

	        p =  ( yw + ( ( p = x + radius + 1 ) < widthMinus1 ? p : widthMinus1 ) ) << 2;

	        r_in_sum += ( stackIn.r = pixels[p]);
	        g_in_sum += ( stackIn.g = pixels[p+1]);
	        b_in_sum += ( stackIn.b = pixels[p+2]);

	        r_sum += r_in_sum;
	        g_sum += g_in_sum;
	        b_sum += b_in_sum;

	        stackIn = stackIn.next;

	        r_out_sum += ( pr = stackOut.r );
	        g_out_sum += ( pg = stackOut.g );
	        b_out_sum += ( pb = stackOut.b );

	        r_in_sum -= pr;
	        g_in_sum -= pg;
	        b_in_sum -= pb;

	        stackOut = stackOut.next;

	        yi += 4;
	      }
	      yw += width;
	    }


	    for ( x = 0; x < width; x++ )
	    {
	      g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;

	      yi = x << 2;
	      r_out_sum = radiusPlus1 * ( pr = pixels[yi]);
	      g_out_sum = radiusPlus1 * ( pg = pixels[yi+1]);
	      b_out_sum = radiusPlus1 * ( pb = pixels[yi+2]);

	      r_sum += sumFactor * pr;
	      g_sum += sumFactor * pg;
	      b_sum += sumFactor * pb;

	      stack = stackStart;

	      for( i = 0; i < radiusPlus1; i++ )
	      {
	        stack.r = pr;
	        stack.g = pg;
	        stack.b = pb;
	        stack = stack.next;
	      }

	      yp = width;

	      for( i = 1; i <= radius; i++ )
	      {
	        yi = ( yp + x ) << 2;

	        r_sum += ( stack.r = ( pr = pixels[yi])) * ( rbs = radiusPlus1 - i );
	        g_sum += ( stack.g = ( pg = pixels[yi+1])) * rbs;
	        b_sum += ( stack.b = ( pb = pixels[yi+2])) * rbs;

	        r_in_sum += pr;
	        g_in_sum += pg;
	        b_in_sum += pb;

	        stack = stack.next;

	        if( i < heightMinus1 )
	        {
	          yp += width;
	        }
	      }

	      yi = x;
	      stackIn = stackStart;
	      stackOut = stackEnd;
	      for ( y = 0; y < height; y++ )
	      {
	        p = yi << 2;
	        pixels[p]   = (r_sum * mul_sum) >> shg_sum;
	        pixels[p+1] = (g_sum * mul_sum) >> shg_sum;
	        pixels[p+2] = (b_sum * mul_sum) >> shg_sum;

	        r_sum -= r_out_sum;
	        g_sum -= g_out_sum;
	        b_sum -= b_out_sum;

	        r_out_sum -= stackIn.r;
	        g_out_sum -= stackIn.g;
	        b_out_sum -= stackIn.b;

	        p = ( x + (( ( p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1 ) * width )) << 2;

	        r_sum += ( r_in_sum += ( stackIn.r = pixels[p]));
	        g_sum += ( g_in_sum += ( stackIn.g = pixels[p+1]));
	        b_sum += ( b_in_sum += ( stackIn.b = pixels[p+2]));

	        stackIn = stackIn.next;

	        r_out_sum += ( pr = stackOut.r );
	        g_out_sum += ( pg = stackOut.g );
	        b_out_sum += ( pb = stackOut.b );

	        r_in_sum -= pr;
	        g_in_sum -= pg;
	        b_in_sum -= pb;

	        stackOut = stackOut.next;

	        yi += width;
	      }
	    }

	    // context.putImageData( imageData, top_x, top_y );

	  }

	  function BlurStack()
	  {
	    this.r = 0;
	    this.g = 0;
	    this.b = 0;
	    this.a = 0;
	    this.next = null;
	  }
	  return {stackBlurCanvasRGBA:stackBlurCanvasRGBA, stackBlurCanvasRGB:stackBlurCanvasRGB};
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(109), __webpack_require__(106), __webpack_require__(121), __webpack_require__(122), __webpack_require__(123), __webpack_require__(124), __webpack_require__(126)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl) {
	  var Color, Matrix, Point, Rectangle, blendModeSetters, color, inspect, matrix, point, rect;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  inspect = Foundation.Inspect.inspect;
	  blendModeSetters = {
	    replace: function(gl) {
	      return gl.disable(gl.BLEND);
	    },
	    normal: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
	    },
	    add: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ONE, gl.ONE);
	    },
	    associative_add: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ZERO, gl.ONE);
	    },
	    alphamask: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ZERO, gl.SRC_ALPHA);
	    },
	    target_alphamask: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.DST_ALPHA, gl.ZERO);
	    },
	    destover: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ONE_MINUS_DST_ALPHA, gl.ONE);
	    },
	    sourcein: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
	    },
	    sub: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_REVERSE_SUBTRACT);
	      return gl.blendFunc(gl.ONE, gl.ONE);
	    },
	    erase: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);
	    },
	    mul: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.DST_COLOR, gl.ZERO);
	    },
	    inverse_alphamask: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);
	    },
	    inverse_alpha: function(gl) {
	      gl.enable(gl.BLEND);
	      gl.blendEquation(gl.FUNC_ADD);
	      return gl.blendFuncSeparate(gl.ZERO, gl.ONE, gl.ZERO, gl.ONE_MINUS_SRC_ALPHA);
	    }
	  };
	  return Webgl.ContextManager = (function(superClass) {
	    var k, v;

	    extend(ContextManager, superClass);

	    ContextManager.supportedCompositeModes = (function() {
	      var results;
	      results = [];
	      for (k in blendModeSetters) {
	        v = blendModeSetters[k];
	        results.push(k);
	      }
	      return results;
	    })();

	    function ContextManager(canvas) {
	      var contextOptions;
	      this.canvas = canvas;
	      this.canvas.addEventListener("webglcontextlost", function(event) {
	        return this.log("WEBGL CONTEXT LOST");
	      });
	      contextOptions = {
	        premultipliedAlpha: false
	      };
	      this.context = this.canvas.getContext("webgl", contextOptions) || this.canvas.getContext("experimental-webgl", contextOptions);
	      if (window.WebGLDebugUtils) {
	        this.log("!!!!!!!!!!!!!!!!!!! Using WebGLDebugUtils !!!!!!!!!!!!!");
	        this.context = WebGLDebugUtils.makeDebugContext(this.context);
	      }
	      Webgl.Detector.detect(function(message) {
	        if (!this.context) {
	          throw new Error(message);
	        }
	      });
	      this.offscreenRenderTarget = new Webgl.OffscreenRenderTarget(this);
	      this.shaders = {};
	      this.shaderPrograms = {};
	      this.renderers = {};
	      this.initBasicShaders();
	    }

	    ContextManager.setter({
	      viewport: function(r) {
	        return this.context.viewport(r.x, r.y, r.w, r.h);
	      }
	    });

	    ContextManager.getter({
	      bitmapClass: function() {
	        return Webgl.Bitmap;
	      }
	    });

	    ContextManager.prototype.newBitmap = function(size) {
	      return new Webgl.Bitmap(this, size);
	    };

	    ContextManager.prototype.shaderProgram = function(name) {
	      var base;
	      return (base = this.shaderPrograms)[name] || (base[name] = this.compileShaderProgram(name));
	    };

	    ContextManager.prototype.renderer = function(name) {
	      var base;
	      return (base = this.renderers)[name] || (base[name] = this.buildRenderer(name));
	    };

	    ContextManager.prototype.buildRenderer = function(name) {
	      var program, rendererClass;
	      program = this.shaderProgram(name);
	      rendererClass = program.rendererClass || Webgl.ShaderRenderer;
	      return new rendererClass(this, program);
	    };

	    ContextManager.prototype.compileShaderProgram = function(name) {
	      var definition;
	      definition = Webgl.ShaderPrograms[name];
	      if (!definition) {
	        throw new Error("ShaderProgram " + (inspect(name)) + " not found in Webgl.ShaderPrograms");
	      }
	      return new Webgl.ShaderProgram(this.context, name, new Webgl.Shader(this.context, name + "FragmentShader", this.context.FRAGMENT_SHADER, definition.fragment), new Webgl.Shader(this.context, name + "VertexShader", this.context.VERTEX_SHADER, definition.vertex), definition.rendererClass);
	    };

	    ContextManager.prototype.newTexture = function(a) {
	      var gl, loadPixelDataFrom, size, texture;
	      size = a instanceof Point ? a : a instanceof Canvas.Bitmap ? (loadPixelDataFrom = a.canvas, a.size) : a instanceof HTMLCanvasElement ? (loadPixelDataFrom = a, point(a.width, a.height)) : a instanceof HTMLImageElement ? (loadPixelDataFrom = a, point(a.width, a.height)) : void 0;
	      if (!(size.x >= 1 && size.y >= 1)) {
	        throw new Error("size must be >= 1,1");
	      }
	      gl = this.context;
	      texture = gl.createTexture();
	      gl.bindTexture(gl.TEXTURE_2D, texture);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
	      if (loadPixelDataFrom) {
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, loadPixelDataFrom);
	      } else {
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size.width, size.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
	      }
	      return [size, texture];
	    };

	    ContextManager.prototype.bindGlobalRenderTarget = function() {
	      this.context.bindTexture(this.context.TEXTURE_2D, null);
	      this.context.bindFramebuffer(this.context.FRAMEBUFFER, null);
	      return this.context.bindRenderbuffer(this.context.RENDERBUFFER, null);
	    };

	    ContextManager.prototype.setRenderTarget = function(bitmap) {
	      var clippingArea, height, size;
	      if (this.renderTarget === bitmap) {
	        return;
	      }
	      if (bitmap.texture != null) {
	        this.offscreenRenderTarget.bind(bitmap.texture);
	      } else {
	        this.bindGlobalRenderTarget();
	      }
	      size = bitmap.size;
	      if (clippingArea = bitmap.clippingArea) {
	        height = size.y;
	        this.context.viewport(clippingArea.x, height - clippingArea.bottom, clippingArea.w, clippingArea.h);
	      } else {
	        this.context.viewport(0, 0, size.x, size.y);
	      }
	      return this.renderTarget = bitmap;
	    };

	    ContextManager.prototype.setGLBlender = function(mode) {
	      var blendModeSetter;
	      if (this.blenderMode === mode) {
	        return;
	      }
	      blendModeSetter = blendModeSetters[mode];
	      if (!blendModeSetter) {
	        throw "invalid blend mode: " + mode;
	      }
	      blendModeSetter(this.context);
	      return this.blenderMode = mode;
	    };

	    ContextManager.prototype.initBasicShaders = function() {
	      this.uniformColorRenderer = this.renderer("uniformColor");
	      this.texturedUniformColorRenderer = this.renderer("texturedUniformColor");
	      return this.coloredRenderer = this.renderer("colored");
	    };

	    return ContextManager;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(106)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Webgl) {
	  var rawErrorLog;
	  rawErrorLog = Foundation.Log.rawErrorLog;
	  return Webgl.Shader = (function(superClass) {
	    extend(Shader, superClass);

	    function Shader(context, name, shaderType, shaderCode) {
	      this.name = name;
	      this.shaderType = shaderType;
	      this.context = context;
	      this.shaderCode = shaderCode;
	      this.compile();
	    }

	    Shader.prototype.compile = function() {
	      this.shader = this.context.createShader(this.shaderType);
	      this.context.shaderSource(this.shader, this.shaderCode);
	      this.context.compileShader(this.shader);
	      return this.reportCompileErrors();
	    };

	    Shader.prototype.reportCompileErrors = function() {
	      var message;
	      if (!this.context.getShaderParameter(this.shader, this.context.COMPILE_STATUS)) {
	        message = this.context.getShaderInfoLog(this.shader);
	        rawErrorLog("Shader name:" + this.name + ", type:" + this.shaderType);
	        rawErrorLog("Compile error:\n" + message);
	        return rawErrorLog("Shader code:\n" + (this.shaderCode.replace(";    ", ";\n    ")));
	      }
	    };

	    return Shader;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(106)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Webgl) {
	  return Webgl.OffscreenRenderTarget = (function(superClass) {
	    extend(OffscreenRenderTarget, superClass);

	    function OffscreenRenderTarget(contextManager) {
	      this.contextManager = contextManager;
	      this.context = this.contextManager.context;
	      this.setup();
	    }

	    OffscreenRenderTarget.prototype.setup = function() {
	      this.framebuffer = this.context.createFramebuffer();
	      return this.renderbuffer = this.context.createRenderbuffer();
	    };

	    OffscreenRenderTarget.prototype.bind = function(texture) {
	      this.context.bindTexture(this.context.TEXTURE_2D, texture);
	      this.context.bindFramebuffer(this.context.FRAMEBUFFER, this.framebuffer);
	      this.context.bindRenderbuffer(this.context.RENDERBUFFER, this.renderbuffer);
	      return this.context.framebufferTexture2D(this.context.FRAMEBUFFER, this.context.COLOR_ATTACHMENT0, this.context.TEXTURE_2D, texture, 0);
	    };

	    return OffscreenRenderTarget;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(106)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Webgl) {
	  var rawErrorLog;
	  rawErrorLog = Foundation.Log.rawErrorLog;
	  return Webgl.ShaderProgram = (function(superClass) {
	    extend(ShaderProgram, superClass);

	    function ShaderProgram(context, name, fragmentShader, vertexShader, rendererClass) {
	      this.name = name;
	      this.context = context;
	      this.fragmentShader = fragmentShader;
	      this.vertexShader = vertexShader;
	      this.rendererClass = rendererClass;
	      this.link();
	    }

	    ShaderProgram.getter({
	      glShaderType: function() {
	        if (this.shaderType === "vertex") {
	          return this.context.VERTEX_SHADER;
	        } else {
	          return this.context.FRAGMENT_SHADER;
	        }
	      }
	    });

	    ShaderProgram.prototype.link = function() {
	      this.program = this.context.createProgram();
	      this.context.attachShader(this.program, this.fragmentShader.shader);
	      this.context.attachShader(this.program, this.vertexShader.shader);
	      this.context.linkProgram(this.program);
	      return this.reportLinkErrors();
	    };

	    ShaderProgram.prototype.reportLinkErrors = function() {
	      var message;
	      if (!this.context.getProgramParameter(this.program, this.context.LINK_STATUS)) {
	        message = this.context.getProgramInfoLog(this.program);
	        rawErrorLog("Program name:" + this.name + " vertexShader: " + this.vertexShader.name + " fragmentShader: " + this.fragmentShader.name);
	        return rawErrorLog("Link error:\n" + message);
	      }
	    };

	    ShaderProgram.prototype.use = function() {
	      return this.context.useProgram(this.program);
	    };

	    return ShaderProgram;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(106), __webpack_require__(125), __webpack_require__(127)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Webgl) {
	  var vertexShaderCommonCode, vertexShaderCommonDeclarations;
	  vertexShaderCommonDeclarations = "attribute vec2 vertexLoc; uniform mat3 vertexMatrix;";
	  vertexShaderCommonCode = "vec3 l = vec3(vertexLoc, 1) * vertexMatrix; gl_Position = vec4(l, 1);";
	  return Webgl.ShaderPrograms = (function() {
	    function ShaderPrograms() {}

	    ShaderPrograms.texturedUniformColor = {
	      rendererClass: Webgl.ShaderRendererTextured,
	      vertex: vertexShaderCommonDeclarations + " attribute vec2 textureLoc; varying vec2 interpolatedTextureLoc; void main(void) { " + vertexShaderCommonCode + " interpolatedTextureLoc = textureLoc; }",
	      fragment: "precision highp float; varying vec2 interpolatedTextureLoc; uniform sampler2D texture1; uniform vec4 color; void main(void) {gl_FragColor = texture2D(texture1, interpolatedTextureLoc) * color;}"
	    };

	    ShaderPrograms.uniformColor = {
	      vertex: vertexShaderCommonDeclarations + " void main(void) { " + vertexShaderCommonCode + " }",
	      fragment: "precision highp float; uniform vec4 color; void main(void) {gl_FragColor = color;}"
	    };

	    ShaderPrograms.colored = {
	      rendererClass: Webgl.ShaderRendererColored,
	      vertex: vertexShaderCommonDeclarations + " attribute vec4 vertexColor; varying vec4 interpolatedColor; uniform vec4 color; void main(void) { " + vertexShaderCommonCode + " interpolatedColor = vertexColor * color; }",
	      fragment: "precision highp float; varying vec4 interpolatedColor; void main(void) {gl_FragColor = interpolatedColor;}"
	    };

	    return ShaderPrograms;

	  })();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(109), __webpack_require__(106), __webpack_require__(126)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl, ShaderRenderer) {
	  var Color, Matrix, Point, Rectangle, color, matrix, point, rect;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return Webgl.ShaderRendererColored = (function(superClass) {
	    extend(ShaderRendererColored, superClass);

	    function ShaderRendererColored() {
	      ShaderRendererColored.__super__.constructor.apply(this, arguments);
	      this.glColorBuffer = this.context.createBuffer();
	    }

	    ShaderRendererColored.prototype.addColor = function(c) {
	      return this.colorData = this.colorData.concat([c.r, c.g, c.b, c.a]);
	    };

	    ShaderRendererColored.prototype.shaderAttributeNames = function() {
	      return ShaderRendererColored.__super__.shaderAttributeNames.apply(this, arguments).concat(["vertexColor"]);
	    };

	    ShaderRendererColored.prototype.reset = function() {
	      ShaderRendererColored.__super__.reset.apply(this, arguments);
	      this.float32ArrayColorData = null;
	      this.colorData = [];
	      return this.color = null;
	    };

	    ShaderRendererColored.prototype.bindEverything = function() {
	      ShaderRendererColored.__super__.bindEverything.apply(this, arguments);
	      return this.bindColors();
	    };

	    ShaderRendererColored.prototype.bindColors = function() {
	      this.float32ArrayColorData || (this.float32ArrayColorData = new Float32Array(this.colorData));
	      return this.bindFloatArray(this.vertexColorAttribLocation, this.float32ArrayColorData, 4, this.glColorBuffer);
	    };

	    return ShaderRendererColored;

	  })(ShaderRenderer);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(109), __webpack_require__(106), __webpack_require__(120)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl, ContextManager) {
	  var Color, Matrix, Point, Rectangle, color, matrix, point, rect;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return Webgl.ShaderRenderer = (function(superClass) {
	    extend(ShaderRenderer, superClass);

	    function ShaderRenderer(contextManager, shaderProgram) {
	      this.contextManager = contextManager;
	      this.context = contextManager.context;
	      this.shaderProgram = shaderProgram;
	      this.glProgram = shaderProgram.program;
	      this.uniformLocations = {};
	      this.attributeLocations = {};
	      this.glVertexBuffer = this.context.createBuffer();
	      this.initShaderLocations();
	    }

	    ShaderRenderer.prototype.shaderAttributeNames = function() {
	      return ["vertexLoc"];
	    };

	    ShaderRenderer.prototype.shaderUniformNames = function() {
	      return ["color", "vertexMatrix"];
	    };

	    ShaderRenderer.prototype.initShaderLocations = function() {
	      var j, k, len, len1, name, ref, ref1, results;
	      ref = this.shaderAttributeNames();
	      for (j = 0, len = ref.length; j < len; j++) {
	        name = ref[j];
	        this[name + "AttribLocation"] = this.context.getAttribLocation(this.glProgram, name);
	      }
	      ref1 = this.shaderUniformNames();
	      results = [];
	      for (k = 0, len1 = ref1.length; k < len1; k++) {
	        name = ref1[k];
	        results.push(this[name + "UniformLocation"] = this.context.getUniformLocation(this.glProgram, name));
	      }
	      return results;
	    };

	    ShaderRenderer.prototype.startTriangleStrip = function(vertexCount) {
	      this.drawMode = this.context.TRIANGLE_STRIP;
	      return this.reset(vertexCount);
	    };

	    ShaderRenderer.prototype.startTriangleFan = function(vertexCount) {
	      this.drawMode = this.context.TRIANGLE_FAN;
	      return this.reset(vertexCount);
	    };

	    ShaderRenderer.prototype.render = function() {
	      this.shaderProgram.use();
	      this.bindEverything();
	      return this.drawArrays();
	    };

	    ShaderRenderer.prototype.drawArrays = function() {
	      return this.context.drawArrays(this.drawMode, 0, this.vertexCount);
	    };

	    ShaderRenderer.prototype.renderTriangleFan = function(vertexCount, f) {
	      this.startTriangleFan(vertexCount);
	      f(this);
	      return this.render();
	    };

	    ShaderRenderer.prototype.renderTriangleStrip = function(vertexCount, f) {
	      this.startTriangleStrip(vertexCount);
	      f(this);
	      return this.render();
	    };

	    ShaderRenderer.prototype.renderRectangle = function(m, r, c, f) {
	      var i, va;
	      this.startTriangleFan(4);
	      this.color = c;
	      va = this.float32ArrayVertexData;
	      i = 0;
	      this.matrix = m;
	      va[0] = r.left;
	      va[1] = r.top;
	      va[2] = r.right;
	      va[3] = r.top;
	      va[4] = r.right;
	      va[5] = r.bottom;
	      va[6] = r.left;
	      va[7] = r.bottom;
	      if (f) {
	        f(this);
	      }
	      return this.render();
	    };

	    ShaderRenderer.prototype.bindUniformInt = function(uniformLocation, v) {
	      return this.context.uniform1i(uniformLocation, v);
	    };

	    ShaderRenderer.prototype.bindUniformFloat = function(uniformLocation, v) {
	      return this.context.uniform1f(uniformLocation, v);
	    };

	    ShaderRenderer.prototype.bindUniformPoint = function(uniformLocation, p) {
	      return this.context.uniform2f(uniformLocation, p.x, p.y);
	    };

	    ShaderRenderer.prototype.bindUniformColor = function(uniformLocation, c) {
	      if (typeof c === "number") {
	        return this.context.uniform4f(uniformLocation, c, c, c, c);
	      } else {
	        return this.context.uniform4f(uniformLocation, c.r, c.g, c.b, c.a);
	      }
	    };

	    ShaderRenderer.prototype.bindUniformVec2 = function(uniformLocation, a, b) {
	      return this.context.uniform4f(uniformLocation, a, b);
	    };

	    ShaderRenderer.prototype.bindUniformVec4 = function(uniformLocation, a, b, c, d) {
	      return this.context.uniform4f(uniformLocation, a, b, c, d);
	    };

	    ShaderRenderer.prototype.bindUniformMatrix = function(uniformLocation, m) {
	      m.fillFloat32Array(this.matrixData);
	      return this.context.uniformMatrix3fv(uniformLocation, false, this.matrixData);
	    };

	    ShaderRenderer.prototype.bindFloatArray = function(attribLocation, float32Array, floatsPerVector, glBuffer) {
	      var gl;
	      gl = this.context;
	      gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer);
	      gl.bufferData(gl.ARRAY_BUFFER, float32Array, gl.STATIC_DRAW);
	      gl.enableVertexAttribArray(attribLocation);
	      gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer);
	      return gl.vertexAttribPointer(attribLocation, floatsPerVector, gl.FLOAT, false, 0, 0);
	    };

	    ShaderRenderer.prototype.reset = function(vertexCount) {
	      if (!this.float32ArrayVertexData || this.float32ArrayVertexData.length < vertexCount * 2) {
	        this.float32ArrayVertexData = new Float32Array(vertexCount * 2);
	      }
	      this.vertexCount = vertexCount;
	      this.color = 1;
	      return this.matrixData || (this.matrixData = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 0]));
	    };

	    ShaderRenderer.prototype.bindEverything = function() {
	      this.bindVerticies();
	      this.bindGeometry();
	      return this.bindColor();
	    };

	    ShaderRenderer.prototype.bindVerticies = function() {
	      return this.bindFloatArray(this.vertexLocAttribLocation, this.float32ArrayVertexData, 2, this.glVertexBuffer);
	    };

	    ShaderRenderer.prototype.bindColor = function() {
	      return this.bindUniformColor(this.colorUniformLocation, this.color);
	    };

	    ShaderRenderer.prototype.bindGeometry = function() {
	      var drawMatrix, m;
	      drawMatrix = this.contextManager.renderTarget.drawMatrix;
	      m = this.matrix ? (!(this.matrix instanceof Matrix) ? this.matrix = matrix(this.matrix) : void 0, this.matrix.mul(drawMatrix)) : drawMatrix;
	      return this.bindUniformMatrix(this.vertexMatrixUniformLocation, m);
	    };

	    return ShaderRenderer;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(109), __webpack_require__(106), __webpack_require__(120)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, Webgl, ContextManager) {
	  var Color, Matrix, Point, Rectangle, color, matrix, point, rect;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  return Webgl.ShaderRendererTextured = (function(superClass) {
	    extend(ShaderRendererTextured, superClass);

	    function ShaderRendererTextured() {
	      ShaderRendererTextured.__super__.constructor.apply(this, arguments);
	      this.glTextureBuffer = this.context.createBuffer();
	    }

	    ShaderRendererTextured.prototype.addTextureLocation = function(loc) {
	      this.textureLocations || (this.textureLocations = []);
	      return loc.appendToVector(this.textureLocations);
	    };

	    ShaderRendererTextured.prototype.shaderAttributeNames = function() {
	      return ShaderRendererTextured.__super__.shaderAttributeNames.apply(this, arguments).concat(["textureLoc"]);
	    };

	    ShaderRendererTextured.prototype.shaderUniformNames = function() {
	      return ShaderRendererTextured.__super__.shaderUniformNames.apply(this, arguments).concat(["texture1"]);
	    };

	    ShaderRendererTextured.prototype.allocateTextureLocations = function(numLocations) {
	      return this.float32ArrayTextureData = new Float32Array(numLocations * 2);
	    };

	    ShaderRendererTextured.prototype.reset = function() {
	      ShaderRendererTextured.__super__.reset.apply(this, arguments);
	      this.float32ArrayTextureData = null;
	      this.textureLocations = null;
	      return this.texture = null;
	    };

	    ShaderRendererTextured.prototype.bindTexture = function() {
	      var gl;
	      gl = this.context;
	      gl.activeTexture(gl.TEXTURE0);
	      gl.bindTexture(gl.TEXTURE_2D, this.texture);
	      this.bindUniformInt(this.texture1UniformLocation, 0);
	      this.float32ArrayTextureData || (this.float32ArrayTextureData = new Float32Array(this.textureLocations));
	      return this.bindFloatArray(this.textureLocAttribLocation, this.float32ArrayTextureData, 2, this.glTextureBuffer);
	    };

	    ShaderRendererTextured.prototype.bindEverything = function() {
	      ShaderRendererTextured.__super__.bindEverything.apply(this, arguments);
	      return this.bindTexture();
	    };

	    return ShaderRendererTextured;

	  })(Webgl.ShaderRenderer);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(106), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Webgl, Foundation) {
	  var helpMessage;
	  helpMessage = "This web browser does not support Webgl, or it is disabled. We recommend using Chrome (http://www.google.com/chrome) or Firefox (http://www.mozilla.org/firefox). You might also try updating your video driver.";
	  return Webgl.Detector = (function(superClass) {
	    extend(Detector, superClass);

	    function Detector() {
	      return Detector.__super__.constructor.apply(this, arguments);
	    }

	    Detector.detect = function(onFailure) {
	      var canvas, context;
	      if (onFailure == null) {
	        onFailure = null;
	      }
	      if (!window.WebGLRenderingContext) {
	        this.log(helpMessage);
	        if (onFailure) {
	          onFailure(helpMessage);
	        }
	        return false;
	      }
	      canvas = document.createElement('canvas');
	      context = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
	      if (!context) {
	        this.log(helpMessage);
	        if (onFailure) {
	          onFailure(helpMessage);
	        }
	        return false;
	      }
	      return true;
	    };

	    return Detector;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(109);


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	var Events;

	module.exports = Events = __webpack_require__(131);

	Events.GestureRecognizer = __webpack_require__(132);

	Events.KeyEvent = __webpack_require__(134);

	Events.Pointer = __webpack_require__(133);

	Events.PointerEvent = __webpack_require__(146);

	Events.PointerEventManager = __webpack_require__(147);

	Events.finishLoad(["GestureRecognizer", "KeyEvent", "Pointer", "PointerEvent", "PointerEventManager"]);


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Events || (Engine.Events = (function(superClass) {
	  extend(Events, superClass);

	  function Events() {
	    return Events.__super__.constructor.apply(this, arguments);
	  }

	  Events.namespace = Engine;

	  Events.namespacePath = "Neptune.Art.Engine.Events";

	  return Events;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Events);


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(133)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Pointer) {
	  var BaseObject, GestureRecognizer, abs, clone, first, inspect, isFunction, isPlainObject, matrix, objectWithout, peek, point, pointerDeadZone, pointerDeadZoneSquared, rect, select;
	  inspect = Foundation.inspect, clone = Foundation.clone, peek = Foundation.peek, first = Foundation.first, BaseObject = Foundation.BaseObject, isPlainObject = Foundation.isPlainObject, clone = Foundation.clone, abs = Foundation.abs, isFunction = Foundation.isFunction, select = Foundation.select, objectWithout = Foundation.objectWithout;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  pointerDeadZone = Pointer.pointerDeadZone;
	  pointerDeadZoneSquared = pointerDeadZone * pointerDeadZone;
	  return GestureRecognizer = (function(superClass) {
	    var pointerHandlers;

	    extend(GestureRecognizer, superClass);

	    GestureRecognizer.createGestureRecognizer = function(o) {
	      var gr;
	      gr = new GestureRecognizer(o);
	      return gr.getPointerHandlers();
	    };

	    pointerHandlers = ["pointerDown", "pointerUp", "pointerMove", "pointerCancel"];

	    function GestureRecognizer(gestureRecognizers) {
	      this._nonGestureHandlers = select(gestureRecognizers, pointerHandlers);
	      this._gestureRecognizers = objectWithout(gestureRecognizers, pointerHandlers);
	      this._activeGesture = null;
	      this._lastActiveGesture = null;
	      this._startEvent = null;
	      GestureRecognizer.__super__.constructor.apply(this, arguments);
	      this.setupDefaultRecognizers();
	      this._startEvent = null;
	    }

	    GestureRecognizer.prototype.setupDefaultRecognizers = function() {
	      var k, ref, results, v;
	      ref = this._gestureRecognizers;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        switch (k) {
	          case "horizontal":
	            results.push(v.recognize || (v.recognize = function(e) {
	              var d;
	              d = e.delta;
	              return abs(d.y) < abs(d.x);
	            }));
	            break;
	          case "vertical":
	            results.push(v.recognize || (v.recognize = function(e) {
	              var d;
	              d = e.delta;
	              return abs(d.y) > abs(d.x);
	            }));
	            break;
	          default:
	            if (!isFunction(v.recognize)) {
	              throw new Error("'recognize' function required for recognizer '" + k + "'");
	            } else {
	              results.push(void 0);
	            }
	        }
	      }
	      return results;
	    };

	    GestureRecognizer.getter({
	      pointerHandlers: function() {
	        return {
	          pointerDown: (function(_this) {
	            return function(e) {
	              var base, ref;
	              if (typeof (base = _this._nonGestureHandlers).pointerDown === "function") {
	                base.pointerDown(e);
	              }
	              _this._startEvent = e.newEvent ? e.newEvent() : clone(e);
	              if ((ref = _this._lastActiveGesture) != null ? typeof ref.resume === "function" ? ref.resume(e) : void 0 : void 0) {
	                return _this._resumeGesture(e);
	              }
	            };
	          })(this),
	          pointerMove: (function(_this) {
	            return function(e) {
	              var ag, base, base1;
	              if (ag = _this._activeGesture) {
	                return typeof ag.move === "function" ? ag.move(e) : void 0;
	              } else {
	                if (_this._startEvent && !e.pointer.stayedWithinDeadzone) {
	                  _this._startGesture(e);
	                  return typeof (base = _this._nonGestureHandlers).pointerCancel === "function" ? base.pointerCancel(e) : void 0;
	                } else {
	                  return typeof (base1 = _this._nonGestureHandlers).pointerMove === "function" ? base1.pointerMove(e) : void 0;
	                }
	              }
	            };
	          })(this),
	          pointerUp: (function(_this) {
	            return function(e) {
	              var base, base1;
	              if (_this._activeGesture) {
	                if (typeof (base = _this._activeGesture).end === "function") {
	                  base.end(e);
	                }
	                return _this._activeGesture = null;
	              } else {
	                return typeof (base1 = _this._nonGestureHandlers).pointerUp === "function" ? base1.pointerUp(e) : void 0;
	              }
	            };
	          })(this),
	          pointerCancel: (function(_this) {
	            return function(e) {
	              var base, base1;
	              if (_this._activeGesture) {
	                if (typeof (base = _this._activeGesture).cancel === "function") {
	                  base.cancel(e);
	                }
	                _this._activeGesture = null;
	              } else {
	                if (typeof (base1 = _this._nonGestureHandlers).pointerCancel === "function") {
	                  base1.pointerCancel(e);
	                }
	              }
	              return _this._startEvent = null;
	            };
	          })(this)
	        };
	      }
	    });

	    GestureRecognizer.prototype._resumeGesture = function(e) {
	      var base, ref;
	      if ((ref = e.target) != null) {
	        if (typeof ref.capturePointerEvents === "function") {
	          ref.capturePointerEvents();
	        }
	      }
	      this._activeGesture = this._lastActiveGesture;
	      return typeof (base = this._activeGesture).begin === "function" ? base.begin(this._startEvent) : void 0;
	    };

	    GestureRecognizer.prototype._startGesture = function(e) {
	      var base, base1, k, ref, ref1, v;
	      ref = this._gestureRecognizers;
	      for (k in ref) {
	        v = ref[k];
	        if (v.recognize(e)) {
	          this._lastActiveGesture = this._activeGesture = v;
	          break;
	        }
	      }
	      if (this._activeGesture) {
	        if ((ref1 = e.target) != null) {
	          if (typeof ref1.capturePointerEvents === "function") {
	            ref1.capturePointerEvents();
	          }
	        }
	        if (typeof (base = this._activeGesture).begin === "function") {
	          base.begin(this._startEvent);
	        }
	        return typeof (base1 = this._activeGesture).move === "function" ? base1.move(e) : void 0;
	      } else {
	        return this._startEvent = null;
	      }
	    };

	    return GestureRecognizer;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic) {
	  var BaseObject, Pointer, clone, first, inspect, matrix, peek, point, rect;
	  inspect = Foundation.inspect, clone = Foundation.clone, peek = Foundation.peek, first = Foundation.first, BaseObject = Foundation.BaseObject;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  return Pointer = (function(superClass) {
	    var emptyObject, pointerDeadZone, pointerDeadZoneSquared;

	    extend(Pointer, superClass);

	    Pointer.pointerDeadZone = pointerDeadZone = 10;

	    Pointer.pointerDeadZoneSquared = pointerDeadZoneSquared = pointerDeadZone * pointerDeadZone;

	    function Pointer(id, location, lastLocation, firstLocation, stayedWithinDeadzone) {
	      if (stayedWithinDeadzone == null) {
	        stayedWithinDeadzone = true;
	      }
	      this.id = id;
	      this.location = location;
	      this.lastLocation = lastLocation || location;
	      this.firstLocation = firstLocation || location;
	      this.stayedWithinDeadzone = stayedWithinDeadzone;
	    }

	    emptyObject = {};

	    Pointer.prototype.newPointer = function(options) {
	      if (options == null) {
	        options = emptyObject;
	      }
	      return new Pointer(options.id || this.id, options.location || this.location, options.lastLocation || this.lastLocation, options.firstLocation || this.firstLocation, options.stayedWithinDeadzone || this.stayedWithinDeadzone);
	    };

	    Pointer.prototype.moved = function(newLocation) {
	      var stayedWithinDeadzone;
	      stayedWithinDeadzone = this.stayedWithinDeadzone && newLocation.distanceSquared(this.firstLocation) <= pointerDeadZoneSquared;
	      return new Pointer(this.id, newLocation, this.location, this.firstLocation, stayedWithinDeadzone);
	    };

	    Pointer.prototype.locationIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transform(this.location);
	      } else {
	        return this.location;
	      }
	    };

	    Pointer.prototype.lastLocationIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transform(this.lastLocation);
	      } else {
	        return this.lastLocation;
	      }
	    };

	    Pointer.prototype.firstLocationIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transform(this.firstLocation);
	      } else {
	        return this.firstLocation;
	      }
	    };

	    Pointer.prototype.deltaIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transformDifference(this.location, this.lastLocation);
	      } else {
	        return this.location.sub(this.lastLocation);
	      }
	    };

	    Pointer.prototype.totalDeltaIn = function(element) {
	      if (element) {
	        return element.absToElementMatrix.transformDifference(this.location, this.firstLocation);
	      } else {
	        return this.location.sub(this.firstLocation);
	      }
	    };

	    return Pointer;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(135)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Events) {
	  var Color, KeyEvent, Matrix, Point, Rectangle, clone, color, inspect, k, keyCodesToKeys, keysToKeyCodes, matrix, point, rect, v;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  inspect = Foundation.Inspect.inspect;
	  clone = Foundation.Clone.clone;
	  keysToKeyCodes = {
	    backspace: 8,
	    tab: 9,
	    enter: 13,
	    shift: 16,
	    ctrl: 17,
	    alt: 18,
	    pause_break: 19,
	    caps_lock: 20,
	    escape: 27,
	    page_up: 33,
	    page_down: 34,
	    end: 35,
	    home: 36,
	    left_arrow: 37,
	    up_arrow: 38,
	    right_arrow: 39,
	    down_arrow: 40,
	    insert: 45,
	    "delete": 46,
	    " ": 32,
	    "0": 48,
	    "1": 49,
	    "2": 50,
	    "3": 51,
	    "4": 52,
	    "5": 53,
	    "6": 54,
	    "7": 55,
	    "8": 56,
	    "9": 57,
	    a: 65,
	    b: 66,
	    c: 67,
	    d: 68,
	    e: 69,
	    f: 70,
	    g: 71,
	    h: 72,
	    i: 73,
	    j: 74,
	    k: 75,
	    l: 76,
	    m: 77,
	    n: 78,
	    o: 79,
	    p: 80,
	    q: 81,
	    r: 82,
	    s: 83,
	    t: 84,
	    u: 85,
	    v: 86,
	    w: 87,
	    x: 88,
	    y: 89,
	    z: 90,
	    left_window_key: 91,
	    right_window_key: 92,
	    select_key: 93,
	    numpad_0: 96,
	    numpad_1: 97,
	    numpad_2: 98,
	    numpad_3: 99,
	    numpad_4: 100,
	    numpad_5: 101,
	    numpad_6: 102,
	    numpad_7: 103,
	    numpad_8: 104,
	    numpad_9: 105,
	    multiply: 106,
	    add: 107,
	    subtract: 109,
	    decimal_point: 110,
	    divide: 111,
	    f1: 112,
	    f2: 113,
	    f3: 114,
	    f4: 115,
	    f5: 116,
	    f6: 117,
	    f7: 118,
	    f8: 119,
	    f9: 120,
	    f10: 121,
	    f11: 122,
	    f12: 123,
	    num_lock: 144,
	    scroll_lock: 145,
	    semi_colon: 186,
	    equal_sign: 187,
	    comma: 188,
	    dash: 189,
	    period: 190,
	    forward_slash: 191,
	    grave_accent: 192,
	    open_bracket: 219,
	    back_slash: 220,
	    close_braket: 221,
	    single_quote: 222
	  };
	  keyCodesToKeys = [];
	  for (k in keysToKeyCodes) {
	    v = keysToKeyCodes[k];
	    keyCodesToKeys[v] = k;
	  }
	  return KeyEvent = (function(superClass) {
	    extend(KeyEvent, superClass);

	    KeyEvent.keysToKeyCodes = keysToKeyCodes;

	    KeyEvent.keyCodesToKeys = keyCodesToKeys;

	    KeyEvent.keysDown = {};

	    KeyEvent.keysDown.length = 0;

	    function KeyEvent() {
	      KeyEvent.__super__.constructor.apply(this, arguments);
	      this.props.key = keyCodesToKeys[this.props.keyCode];
	      switch (this.type) {
	        case "keyDown":
	          if (!this.keysDown[this.key]) {
	            this.keysDown[this.key] = true;
	            this.keysDown.length++;
	          }
	          break;
	        case "keyUp":
	          if (this.keysDown[this.key]) {
	            this.keysDown[this.key] = false;
	            this.keysDown.length--;
	          }
	      }
	    }

	    KeyEvent.getter({
	      keysDown: function() {
	        return KeyEvent.keysDown;
	      }
	    });

	    return KeyEvent;

	  })(Events.Event);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(136);


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var Events;

	module.exports = Events = __webpack_require__(137);

	Events.EventEpoch = __webpack_require__(139);

	Events.EventManager = __webpack_require__(140);

	Events.EventQueue = __webpack_require__(142);

	Events.Event = __webpack_require__(141);

	Events.EventedObjectBase = __webpack_require__(143);

	Events.EventedObject = __webpack_require__(144);

	Events.EventedVariable = __webpack_require__(145);

	Events.finishLoad(["EventEpoch", "EventManager", "EventQueue", "Event", "EventedObjectBase", "EventedObject", "EventedVariable"]);


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(138);

	module.exports = Art.Events || (Art.Events = (function(superClass) {
	  extend(Events, superClass);

	  function Events() {
	    return Events.__super__.constructor.apply(this, arguments);
	  }

	  Events.namespace = Art;

	  Events.namespacePath = "Neptune.Art.Events";

	  return Events;

	})(Neptune.Base));

	Art.addNamespace(Art.Events);


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var Epoch, EventEpoch, log;
	  log = Foundation.log, Epoch = Foundation.Epoch;
	  return EventEpoch = (function(superClass) {
	    extend(EventEpoch, superClass);

	    function EventEpoch() {
	      return EventEpoch.__super__.constructor.apply(this, arguments);
	    }

	    EventEpoch.singletonClass();

	    EventEpoch.prototype.queue = function(event) {
	      return this.queueItem(event);
	    };

	    EventEpoch.prototype.logEvent = function(name, id) {};

	    return EventEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*

	TODO:
	  handlEvent alternate signature:
	    (type, functionReturningEventElement) ->

	  The function would only be invoked if there are actually event handlers for the specified type.
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(137), __webpack_require__(11), __webpack_require__(141)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Events, Foundation) {
	  var clone, inspect, isFunction, nextTick, rawErrorLog;
	  nextTick = Foundation.nextTick, isFunction = Foundation.isFunction, inspect = Foundation.inspect, clone = Foundation.clone;
	  rawErrorLog = Foundation.Log.rawErrorLog;
	  return Events.EventManager = (function(superClass) {
	    extend(EventManager, superClass);

	    function EventManager(parent) {
	      this.parent = parent;
	      this.eventHandlers = {};
	    }

	    EventManager.prototype.hasHandler = function(type) {
	      var handlers;
	      return !!((handlers = this.eventHandlers[type]) && handlers.length > 0);
	    };

	    EventManager.prototype.on = function(handlerMap) {
	      var action, base, results, type;
	      results = [];
	      for (type in handlerMap) {
	        action = handlerMap[type];
	        if (!(action)) {
	          continue;
	        }
	        if (!isFunction(action)) {
	          throw new Error("EventManager: action is not a function for " + (inspect(type)) + " event handler. (action: " + (inspect(action)) + ", parent: " + (inspect(this.parent)) + ")");
	        }
	        if ((base = this.eventHandlers)[type] == null) {
	          base[type] = [];
	        }
	        results.push(this.eventHandlers[type].push({
	          action: action,
	          oneTime: false
	        }));
	      }
	      return results;
	    };

	    EventManager.prototype.removeListeners = function(handlerMap) {
	      var action, beforeCount, count, handler, handlers, type;
	      count = 0;
	      for (type in handlerMap) {
	        action = handlerMap[type];
	        if (!(handlers = this.eventHandlers[type])) {
	          continue;
	        }
	        beforeCount = handlers.length;
	        this.eventHandlers[type] = (function() {
	          var i, len, results;
	          results = [];
	          for (i = 0, len = handlers.length; i < len; i++) {
	            handler = handlers[i];
	            if (handler.action !== action) {
	              results.push(handler);
	            }
	          }
	          return results;
	        })();
	        count = beforeCount - this.eventHandlers[type].length;
	      }
	      return count;
	    };

	    EventManager.prototype.onNext = function(handlerMap) {
	      var action, base, results, type;
	      results = [];
	      for (type in handlerMap) {
	        action = handlerMap[type];
	        if ((base = this.eventHandlers)[type] == null) {
	          base[type] = [];
	        }
	        results.push(this.eventHandlers[type].push({
	          action: action,
	          oneTime: true
	        }));
	      }
	      return results;
	    };

	    EventManager.prototype.countOneTimeHandlersFor = function(eventType) {
	      var count, handler, handlers, i, len;
	      count = 0;
	      if (handlers = this.eventHandlers[eventType]) {
	        for (i = 0, len = handlers.length; i < len; i++) {
	          handler = handlers[i];
	          if (handler.oneTime) {
	            count++;
	          }
	        }
	      }
	      return count;
	    };

	    EventManager.prototype.handleEvent = function(event) {
	      if (typeof event === "string") {
	        event = new Events.Event(event);
	      }
	      return this.sendToHandlers(event.type, event);
	    };

	    EventManager.prototype.handleEvents = function(events) {
	      var event, i, len, results;
	      results = [];
	      for (i = 0, len = events.length; i < len; i++) {
	        event = events[i];
	        results.push(this.handleEvent(event));
	      }
	      return results;
	    };

	    EventManager.prototype.sendToHandlers = function(eventType, event) {
	      var action, error, error1, firedOneTimeHandler, handler, handlers, i, len;
	      handlers = this.eventHandlers[eventType];
	      if (!(handlers && handlers.length > 0)) {
	        return;
	      }
	      firedOneTimeHandler = false;
	      for (i = 0, len = handlers.length; i < len; i++) {
	        handler = handlers[i];
	        try {
	          if (handler.oneTime) {
	            handler.remove = firedOneTimeHandler = true;
	          }
	          action = handler.action;
	          action(event);
	        } catch (error1) {
	          error = error1;
	          this.handleErrorInHandler(handler, event, error);
	        }
	      }
	      if (firedOneTimeHandler) {
	        return this.eventHandlers[event.type] = (function() {
	          var j, len1, ref, results;
	          ref = this.eventHandlers[eventType];
	          results = [];
	          for (j = 0, len1 = ref.length; j < len1; j++) {
	            handler = ref[j];
	            if (!handler.remove) {
	              results.push(handler);
	            }
	          }
	          return results;
	        }).call(this);
	      }
	    };

	    EventManager.prototype.handleErrorInHandler = function(handler, event, error) {
	      if (event.type === "eventException") {
	        rawErrorLog("exception in eventException handler.\nEvent:" + (inspect(event, 1)) + ".\n\nError:\n" + error.stack);
	        return Foundation.throwErrorOutOfStack(error);
	      } else if (this.eventHandlers["eventException"]) {
	        return this.handleEvent(new Events.Event("eventException", {
	          event: clone(event),
	          exception: error,
	          handler: handler
	        }));
	      } else {
	        rawErrorLog("exception in handler AND no eventException handler. Error:");
	        rawErrorLog(error);
	        rawErrorLog("Event: " + (inspect(event, 1)));
	        rawErrorLog("Stack:\n" + error.stack);
	        return Foundation.throwErrorOutOfStack(error);
	      }
	    };

	    return EventManager;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Event, Foundation, currentSecond, emptyProps,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	currentSecond = Foundation.currentSecond, BaseObject = Foundation.BaseObject;

	emptyProps = {};

	module.exports = Event = (function(superClass) {
	  extend(Event, superClass);

	  function Event(type, props, timeStamp) {
	    this.type = type;
	    this.props = props != null ? props : emptyProps;
	    this.timeStamp = timeStamp != null ? timeStamp : currentSecond();
	  }

	  return Event;

	})(BaseObject);


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(137), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Events, Foundation) {
	  return Events.EventQueue = (function(superClass) {
	    extend(EventQueue, superClass);

	    function EventQueue() {
	      this._length = 0;
	      this.nextToProcess = 0;
	      this.queue = new Array(128);
	    }

	    EventQueue.prototype.add = function(a) {
	      if (a instanceof Array) {
	        this.queue = this.queue.slice(0, this._length).concat(a);
	        return this._length += a.length;
	      } else {
	        return this.queue[this._length++] = a;
	      }
	    };

	    EventQueue.prototype.clear = function() {
	      return this.processAll((function(_this) {
	        return function() {};
	      })(this));
	    };

	    EventQueue.getter({
	      length: function() {
	        return this._length - this.nextToProcess;
	      },
	      isEmpty: function() {
	        return this._length === 0;
	      }
	    });

	    EventQueue.prototype.popAll = function() {
	      var result;
	      result = this.queue.slice(0, this._length);
	      this.clear();
	      return result;
	    };

	    EventQueue.prototype.processAll = function(f) {
	      var popped;
	      while (this.nextToProcess < this._length) {
	        popped = this.queue[this.nextToProcess];
	        this.queue[this.nextToProcess++] = null;
	        f(popped);
	      }
	      return this.nextToProcess = this._length = 0;
	    };

	    return EventQueue;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(139), __webpack_require__(141)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, EventEpoch, Event) {
	  var EventedObjectBase, eventEpoch, inspect, isFunction, isPlainObject, log;
	  isFunction = Foundation.isFunction, log = Foundation.log, isPlainObject = Foundation.isPlainObject, inspect = Foundation.inspect;
	  eventEpoch = EventEpoch.eventEpoch;

	  /*
	  to be used as a mixin via BaseObject's @include method
	  
	  If this class is included directly, you must also implement the methods
	    listed in "TO IMPLEMENT" below.
	   */
	  return EventedObjectBase = (function() {
	    var typeFromEventOrType;

	    function EventedObjectBase() {}

	    EventedObjectBase.typeFromEventOrType = typeFromEventOrType = function(eventOrType) {
	      return eventOrType && (eventOrType.type || eventOrType);
	    };


	    /*
	    Purpose:
	      handle event immediately
	      do some preprocessing on the event
	    
	    Inputs: see #event()'s inputs
	    
	    Output: true if the event was actually handled
	    
	    IMPORTANT: This should only be called during an eventEpoch.
	      This means:
	        Usually, just don't call this directly. Use @queueEvent.
	        If you need to call this directly, only do it from within an event handler.
	      Examples reasons to call directly:
	        - to do custom event routing
	        - send a new event triggered from the first
	     */

	    EventedObjectBase.prototype.handleEvent = function(eventOrType, eventPropertiesOrCreator) {
	      var e, error1, event, eventType;
	      eventType = typeFromEventOrType(eventOrType);
	      if (!(eventType && this._hasEventHandler(eventType))) {
	        return false;
	      }
	      event = eventOrType instanceof Event ? eventOrType : isFunction(eventPropertiesOrCreator) ? isPlainObject(e = eventPropertiesOrCreator()) ? new Event(eventType, e) : e : new Event(eventType, eventPropertiesOrCreator);
	      if (!event) {
	        return false;
	      }
	      event.target = this;
	      try {
	        this._sendToEventHandler(event);
	      } catch (error1) {
	        e = error1;
	        this._handleErrorInHandler(event, "unknown", e);
	      }
	      event.target = null;
	      return true;
	    };


	    /*
	    Inputs:
	      eventOrType can be:
	       * an instanceof Event or
	       * a string representing the "type" of the event
	          (a new Event will be created)
	    
	      eventPropertiesOrCreator can be:
	       * null: only if eventOrType is an instanceof Event
	       * Object: properties passed into: new Event eventOrType, eventPropertiesOrCreator
	       * Function: returns null (indicating a noop) or a new instanceof Event
	    
	    Output:
	      true:   The event was queued.
	      false:  There is no handler for the event. The event was ignored (discarded).
	     */

	    EventedObjectBase.prototype.queueEvent = function(eventOrType, eventPropertiesOrCreator) {
	      var eventType;
	      eventType = typeFromEventOrType(eventOrType);
	      if (eventType && this._hasEventHandler(eventType)) {
	        eventEpoch.queue((function(_this) {
	          return function() {
	            return _this.handleEvent(eventOrType, eventPropertiesOrCreator);
	          };
	        })(this));
	        return true;
	      } else {
	        return false;
	      }
	    };


	    /*
	    inputs: eventType is a string
	    outputs: true if there is a handler for the specified type
	     */

	    EventedObjectBase.prototype._hasEventHandler = function(eventType) {
	      throw new Error("must implement");
	    };


	    /*
	    inputs: an Event object with event.target set to @
	    output: ignored
	    
	    - Called exclusively from handleEvent. Don't call manually.
	    - This is where the event handler is actually called.
	    - Only called during an eventEpoch.
	    - Only called if @_hasEventHandler returned true for event.type
	     */

	    EventedObjectBase.prototype._sendToEventHandler = function(event) {
	      throw new Error("must implement");
	    };

	    EventedObjectBase.prototype._handleErrorInHandler = function(event, handler, error) {
	      console.log("EventedObjectBase: exception in handler. Error:", error);
	      console.log("Event: " + (inspect(event, 1)));
	      console.log("Handler:", handler);
	      console.log("Stack:", error.stack);
	      return Foundation.throwErrorOutOfStack(error);
	    };

	    return EventedObjectBase;

	  })();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(140), __webpack_require__(139), __webpack_require__(141), __webpack_require__(143)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, EventManager, EventEpoch, Event, EventedObjectBase) {
	  var EventedObject, eventEpoch, isFunction, isPlainObject, log;
	  isFunction = Foundation.isFunction, log = Foundation.log, isPlainObject = Foundation.isPlainObject;
	  eventEpoch = EventEpoch.eventEpoch;
	  return EventedObject = (function(superClass) {
	    extend(EventedObject, superClass);

	    function EventedObject() {
	      return EventedObject.__super__.constructor.apply(this, arguments);
	    }


	    /*
	    optional: call from your constructor to make your object more efficient
	    Explanation: Most optimized javascript engines like objects that declare all their fields
	      in the same order every time. In practice, this means do it in the constructor w/o conditionals.
	     */

	    EventedObject.prototype.initEventHandling = function() {
	      return this.eventManager = null;
	    };

	    EventedObject.prototype._sendToEventHandler = function(event) {
	      return this.eventManager.handleEvent(event);
	    };

	    EventedObject.prototype._hasEventHandler = function(eventType) {
	      var ref;
	      return (ref = this.eventManager) != null ? ref.hasHandler(eventType) : void 0;
	    };

	    EventedObject.prototype.clearEventHandlers = function() {
	      return this.eventManager = null;
	    };

	    EventedObject.prototype.removeListeners = function(handlerMap) {
	      var ref;
	      return (ref = this.eventManager) != null ? ref.removeListeners(handlerMap) : void 0;
	    };

	    EventedObject.prototype.preprocessEventHandlers = function(handlerMap) {
	      return handlerMap;
	    };

	    EventedObject.prototype.on = function(handlerMap) {
	      (this.eventManager || (this.eventManager = new EventManager(this))).on(handlerMap);
	      return this.preprocessEventHandlers(handlerMap);
	    };

	    EventedObject.prototype.onNext = function(handlerMap) {
	      return (this.eventManager || (this.eventManager = new EventManager(this))).onNext(handlerMap);
	    };

	    return EventedObject;

	  })(EventedObjectBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(137), __webpack_require__(11), __webpack_require__(144)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Events, Foundation, EventedObject) {
	  var eq;
	  eq = Foundation.Eq.eq;
	  return Events.EventedVariable = (function(superClass) {
	    extend(EventedVariable, superClass);

	    EventedVariable.include(EventedObject);

	    function EventedVariable(value) {
	      this._value = value;
	    }

	    EventedVariable.prototype.beforeFilter = function(f) {
	      return this.beforeFilter = f;
	    };

	    EventedVariable.getter({
	      value: function() {
	        return this._value;
	      }
	    });

	    EventedVariable.setter({
	      value: function(value) {
	        var oldValue;
	        oldValue = this.refresh(value);
	        if (!eq(oldValue, value)) {
	          this.queueEvent("change", {
	            value: value,
	            oldValue: oldValue
	          });
	        }
	        return oldValue;
	      }
	    });

	    EventedVariable.prototype.get = function() {
	      return this._value;
	    };

	    EventedVariable.prototype.set = function(value) {
	      var oldValue;
	      oldValue = this.refresh(value);
	      if (!eq(oldValue, value)) {
	        this.queueEvent("change", {
	          value: value,
	          oldValue: oldValue
	        });
	      }
	      return oldValue;
	    };

	    EventedVariable.prototype.refresh = function(value) {
	      var oldValue;
	      oldValue = this._value;
	      this._value = value;
	      if (!eq(oldValue, value)) {
	        this.queueEvent("refresh", {
	          value: value,
	          oldValue: oldValue
	        });
	      }
	      return oldValue;
	    };

	    return EventedVariable;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(93), __webpack_require__(11), __webpack_require__(135)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, Events) {
	  var PointerEvent, arrayize, clone, first, inspect, matrix, merge, peek, point, rect, transformedArray;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  inspect = Foundation.inspect, clone = Foundation.clone, peek = Foundation.peek, first = Foundation.first, merge = Foundation.merge;
	  arrayize = function(single, array, defaultArray) {
	    if (single) {
	      return [single];
	    } else {
	      return array || defaultArray || [];
	    }
	  };
	  transformedArray = function(arrayOfPoints, matrix) {
	    var i, len, p, results;
	    results = [];
	    for (i = 0, len = arrayOfPoints.length; i < len; i++) {
	      p = arrayOfPoints[i];
	      results.push(matrix.transform(p));
	    }
	    return results;
	  };
	  return PointerEvent = (function(superClass) {
	    var emptyObject;

	    extend(PointerEvent, superClass);

	    function PointerEvent(type, pointer, time) {
	      PointerEvent.__super__.constructor.call(this, type, null, time);
	      this.pointer = pointer;
	    }

	    emptyObject = {};

	    PointerEvent.prototype.newEvent = function(options) {
	      var e;
	      if (options == null) {
	        options = emptyObject;
	      }
	      e = new PointerEvent(options.type || this.type, options.pointer || this.pointer, options.time || this.time);
	      e.target = options.target || this.target;
	      return e;
	    };

	    PointerEvent.getter({
	      location: function() {
	        return this.pointer.locationIn(this.target);
	      },
	      firstLocation: function() {
	        return this.pointer.firstLocationIn(this.target);
	      },
	      lastLocation: function() {
	        return this.pointer.lastLocationIn(this.target);
	      },
	      absLocation: function() {
	        return this.pointer.location;
	      },
	      absFirstLocation: function() {
	        return this.pointer.firstLocation;
	      },
	      absLastLocation: function() {
	        return this.pointer.lastLocation;
	      },
	      parentLocation: function() {
	        return this.pointer.locationIn(this.target.parent);
	      },
	      parentParentLocation: function() {
	        return this.pointer.locationIn(this.target.parent.parent);
	      },
	      parentFirstLocation: function() {
	        return this.pointer.firstLocationIn(this.target.parent);
	      },
	      parentParentFirstLocation: function() {
	        return this.pointer.firstLocationIn(this.target.parent.parent);
	      },
	      parentLastLocation: function() {
	        return this.pointer.lastLocationIn(this.target.parent);
	      },
	      parentParentLastLocation: function() {
	        return this.pointer.lastLocationIn(this.target.parent.parent);
	      },
	      absDelta: function() {
	        return this.pointer.location.sub(this.pointer.lastLocation);
	      },
	      delta: function() {
	        return this.location.sub(this.lastLocation);
	      },
	      parentDelta: function() {
	        return this.pointer.deltaIn(this.target.parent);
	      },
	      parentParentDelta: function() {
	        return this.pointer.deltaIn(this.target.parent.parent);
	      },
	      absTotalDelta: function() {
	        return this.pointer.location.sub(this.pointer.firstLocation);
	      },
	      totalDelta: function() {
	        return this.location.sub(this.firstLocation);
	      },
	      totalParentDelta: function() {
	        return this.pointer.totalDeltaIn(this.target.parent);
	      },
	      totalParentParentDelta: function() {
	        return this.pointer.totalDeltaIn(this.target.parent.parent);
	      }
	    });

	    PointerEvent.prototype.toElementMatrix = function(element) {
	      return this.target.elementToElementMatrix(element);
	    };

	    PointerEvent.prototype.locationIn = function(element) {
	      return this.pointer.locationIn(element);
	    };

	    PointerEvent.prototype.lastLocationIn = function(element) {
	      return this.pointer.lastLocationIn(element);
	    };

	    PointerEvent.prototype.firstLocationIn = function(element) {
	      return this.pointer.firstLocationIn(element);
	    };

	    return PointerEvent;

	  })(Events.Event);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	PointerEventManager

	All Event Types:
	  pointerCancel
	  pointerMove
	  pointerUp
	  pointerDown
	  mouseMove
	  mouseIn
	  mouseOut
	  focus
	  blur

	  pointerClick
	  pointerUpInside
	  pointerUpOutside
	  pointerMoveIn
	  pointerMoveOut

	TODO:
	  Rename these events:

	    mouseMove => cursorMove
	    mouseIn   => cursorMoveIn
	    mouseOut  => cursorMoveOut

	DESIGN NOTES
	Purpose:
	  Support Touch and Mouse events.
	  Support a common set of events for the subset of Touch and Mouse semantics that overlap:
	    single-touch / single-mouse-button-down

	  Synthesize events:
	    pointerClick
	      triggered if active-locations went from 0 to non-0 and back to 0 without moving outside the pointerDeadZone
	    pointerUpInside / pointerUpOutside
	      just before the pointerUp event is sent:
	        if pointer is "pointInside" for the target element
	          send pointerUpInside
	        else
	          send pointerUpOutside
	    pointerMoveIn / pointerMoveOut
	      pointer's "pointInside" changed from false>>true for the target element
	        send pointerMovedIn
	      else
	        send pointerMovedOut

	Differences between Touch events and Mouse events
	  Touch Events
	    can have 0 or more "active" locations. Does not have "inactive" locations.
	    locations can be added or removed. A removed location is not "re-added", only "new" locations are added.
	  Mouse Events
	    can have 1 active or 1 "inactive" location
	    the "active" location has state:
	      what mouse buttons are down

	EVENT ORDER
	  Parents get events before children.
	  If a parent captures a pointer during an event, children will NOT see the event.

	TODO
	  updateMousePath should be called anytime Elements are added, removed or any other change that might effect the mousePath

	HOW IT WORKS
	  pointerDown, pointerUp and pointerMove events all happen when a pointer is being ACTIVE:
	    touchs are always "active"
	    mouse is "active" if one or more buttons are down (currently only left button is supported)

	  multi-touch:
	    Each active touch sends its own events. Ex:
	      these sequence of real-world events:
	        index-finger-touch-start
	        middle-finger-touch-start
	        hand-moves-and-so-do-both-fingers
	        remove-all-fingers
	      results in an event sequence like this:
	        touch_down id: 7
	        touch_down id: 3
	        touch_move id: 7
	        touch_move id: 3
	        touch_up   id: 7
	        touch_down id: 3

	      NOTE: the ids are abitrary, but consistent across events for a touch sequence
	      NOTE: Because of this, if you listen to "pointerMove" without inspecting the pointer's id,
	        you might get more move events than you are expecting.

	  mouseMove is sent every time the mouse moves regardless of button status
	    NOTE: mouseMove is never sent on a touch device.

	GUARANTEES
	  All pointer movement will send mouseMove events!
	    This isn't true with the raw DOM events. Mouse-Pointer up/down and touchEnd can all show locations different from the last move event.
	    This means:
	      On desktop, if you are tracking "null" move events (inactive pointer), then you'll be up-to-date with the pointer-location when a click happens.
	      On either desktop or touch devices, if you are tracking move events, the pointer's location won't have changed between the last mouseMove event and the pointerUp event.
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(93), __webpack_require__(11), __webpack_require__(135), __webpack_require__(133), __webpack_require__(146)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, Events, Pointer, PointerEvent) {
	  var EventEpoch, PointerEventManager, arrayWithoutValue, clone, eventEpoch, first, inspect, log, matrix, max, min, peek, point, rect, shallowClone, stableSort;
	  EventEpoch = Events.EventEpoch;
	  eventEpoch = EventEpoch.eventEpoch;
	  point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;
	  inspect = Foundation.inspect, clone = Foundation.clone, shallowClone = Foundation.shallowClone, peek = Foundation.peek, first = Foundation.first, min = Foundation.min, max = Foundation.max, arrayWithoutValue = Foundation.arrayWithoutValue, stableSort = Foundation.stableSort, log = Foundation.log;
	  return PointerEventManager = (function(superClass) {
	    var elementToRootPath, prioritySortElements, rootToElementPath, updatePath;

	    extend(PointerEventManager, superClass);

	    function PointerEventManager(options) {
	      if (options == null) {
	        options = {};
	      }
	      PointerEventManager.__super__.constructor.apply(this, arguments);
	      this.canvasElement = options.canvasElement;
	      this.mouse = new Pointer("mouse", point(-1));
	      this.activePointers = {};
	      this._numActivePointers = 0;
	      this.capturingElement = null;
	      this.currentMousePath = [];
	      this.currentFocusedPath = [];
	    }

	    PointerEventManager.getter({
	      numActivePointers: function() {
	        return this._numActivePointers;
	      },
	      hasMouseCursor: function() {
	        return true;
	      },
	      currentMousePathClassNames: function() {
	        var el, j, len, ref, results;
	        ref = this.currentMousePath;
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          el = ref[j];
	          results.push(el.classPathName);
	        }
	        return results;
	      }
	    });

	    PointerEventManager.prototype.capturePointerEvents = function(element) {
	      var elementsToCancel, name, pointer, ref;
	      elementsToCancel = arrayWithoutValue(this.currentFocusedPath, element);
	      ref = this.activePointers;
	      for (name in ref) {
	        pointer = ref[name];
	        this.queuePointerEventForElements(elementsToCancel, "pointerCancel", pointer);
	      }
	      return this.capturingElement = element;
	    };

	    PointerEventManager.prototype.pointerEventsCapturedBy = function(element) {
	      return element === this.capturingElement;
	    };

	    PointerEventManager.prototype.pointerElementPath = function(pointer) {
	      var element, newPath, root;
	      root = this.canvasElement;
	      if (!root.pointInside(pointer.location)) {
	        return [];
	      }
	      element = root;
	      newPath = [];
	      while (element) {
	        newPath.push(element);
	        element = element.childUnderPoint(pointer.locationIn(element));
	      }
	      return newPath;
	    };

	    PointerEventManager.prototype.queueEventForElements = function(elements, type, newEventFunction) {
	      var element, j, len, results;
	      results = [];
	      for (j = 0, len = elements.length; j < len; j++) {
	        element = elements[j];
	        results.push(element.queueEvent(type, newEventFunction));
	      }
	      return results;
	    };

	    PointerEventManager.prototype.queuePointerEventForElement = function(element, type, pointer, timeStampInPerformanceSeconds) {
	      return element.queueEvent(type, (function(_this) {
	        return function() {
	          if (!_this.capturingElement || type === "pointerCancel" || element === _this.capturingElement) {
	            return new PointerEvent(type, pointer, timeStampInPerformanceSeconds);
	          }
	        };
	      })(this));
	    };


	    /*
	    SBD NOTE 2016: This method of sorting priority is global and breaks the "parents encapsulate children"
	    Breaking that rule makes Elements/Components less modular. A Component (subranch of the AIM tree) could
	    move within the tree and have its own behavior or the behavior of ancesors change somewhat unpredictably.
	    
	    Is there a better way??? We need to better understand the use-cases. Mostly it has to do with gestures.
	    Sometimes we want the child to have a chance to capture a gesture first, if it decides to, and then let
	    the parent have a default gesture of the child declines.
	    
	    Idea: allow the parent to invert its own priority. It can set itself to have lower priority than its children.
	      This meets the encapsulation requirement.
	      It does limit us to only putting the parent before all children or after all children for events.
	        Do we need a way to put a parent in the middle of its children event-wise?
	     */

	    PointerEventManager.prioritySortElements = prioritySortElements = function(elements) {
	      return stableSort(elements, function(a, b) {
	        return b._pointerEventPriority - a._pointerEventPriority;
	      });
	    };

	    PointerEventManager.prototype.queuePointerEventForElements = function(elements, type, pointer, timeStampInPerformanceSeconds) {
	      var element, j, len, results;
	      elements = prioritySortElements(elements.slice());
	      results = [];
	      for (j = 0, len = elements.length; j < len; j++) {
	        element = elements[j];
	        results.push(this.queuePointerEventForElement(element, type, pointer, timeStampInPerformanceSeconds));
	      }
	      return results;
	    };

	    PointerEventManager.prototype.queuePointerEvents = function(type, pointer, timeStampInPerformanceSeconds) {
	      return this.forEachReceivingElement((function(_this) {
	        return function(e) {
	          return _this.queuePointerEventForElement(e, type, pointer, timeStampInPerformanceSeconds);
	        };
	      })(this));
	    };

	    PointerEventManager.prototype.forEachReceivingElement = function(f) {
	      var e, j, len, ref, results;
	      if (e = this.capturingElement) {
	        return f(e);
	      } else {
	        ref = prioritySortElements(this.currentFocusedPath);
	        results = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          e = ref[j];
	          results.push(f(e));
	        }
	        return results;
	      }
	    };

	    PointerEventManager.prototype.queueMouseEvents = function(type, pointer, timeStampInPerformanceSeconds) {
	      return this.queuePointerEventForElements(this.currentMousePath, type, pointer, timeStampInPerformanceSeconds);
	    };

	    PointerEventManager.prototype.queueKeyEvents = function(type, newEventFunction) {
	      return this.queueEventForElements(this.currentFocusedPath, type, newEventFunction);
	    };

	    PointerEventManager.elementToRootPath = elementToRootPath = function(element) {
	      var path;
	      path = [];
	      while (element) {
	        path.push(element);
	        element = element.parent;
	      }
	      return path;
	    };

	    PointerEventManager.rootToElementPath = rootToElementPath = function(element) {
	      return elementToRootPath(element).reverse();
	    };

	    PointerEventManager.updatePath = updatePath = function(oldPath, newPath, removedElementsAction, addedElementsAction, onAnyChange) {
	      var i, j, maxLen, minLen, ref;
	      minLen = min(oldPath.length, newPath.length);
	      maxLen = max(oldPath.length, newPath.length);
	      for (i = j = 0, ref = minLen - 1; j <= ref; i = j += 1) {
	        if (oldPath[i] !== newPath[i]) {
	          removedElementsAction(oldPath.slice(i));
	          addedElementsAction(newPath.slice(i));
	          if (onAnyChange) {
	            onAnyChange(newPath);
	          }
	          return newPath;
	        }
	      }
	      if (minLen < oldPath.length) {
	        removedElementsAction(oldPath.slice(minLen));
	      }
	      if (minLen < newPath.length) {
	        addedElementsAction(newPath.slice(minLen));
	      }
	      if (onAnyChange && minLen !== maxLen) {
	        onAnyChange(newPath);
	      }
	      return newPath;
	    };

	    PointerEventManager.prototype.updateCursor = function(path) {
	      var c, cursor, el, j, len;
	      cursor = "default";
	      for (j = 0, len = path.length; j < len; j++) {
	        el = path[j];
	        if (c = el.cursor) {
	          cursor = c;
	        }
	      }
	      return this.canvasElement.cssCursor = cursor;
	    };

	    PointerEventManager.prototype.queueOutEvents = function(pointer, elements) {
	      return this.queuePointerEventForElements(elements, "mouseOut", pointer);
	    };

	    PointerEventManager.prototype.queueInEvents = function(pointer, elements) {
	      return this.queuePointerEventForElements(elements, "mouseIn", pointer);
	    };

	    PointerEventManager.prototype.queueBlurEvents = function(pointer, elements) {
	      return this.queuePointerEventForElements(elements, "blur", pointer);
	    };

	    PointerEventManager.prototype.queueFocusEvents = function(pointer, elements) {
	      return this.queuePointerEventForElements(elements, "focus", pointer);
	    };

	    PointerEventManager.prototype.isFocused = function(element) {
	      return this.currentFocusedPath.indexOf(element) >= 0;
	    };

	    PointerEventManager.prototype.focus = function(pointer, element) {
	      return this.currentFocusedPath = updatePath(this.currentFocusedPath, rootToElementPath(element), (function(_this) {
	        return function(oldElements) {
	          return _this.queueBlurEvents(pointer, oldElements);
	        };
	      })(this), (function(_this) {
	        return function(newElements) {
	          return _this.queueFocusEvents(pointer, newElements);
	        };
	      })(this));
	    };

	    PointerEventManager.prototype.updateMousePath = function() {
	      var pointer;
	      pointer = this.mouse;
	      if (!(this._numActivePointers === 0 && this.getHasMouseCursor())) {
	        return;
	      }
	      return this.currentMousePath = updatePath(this.currentMousePath, this.pointerElementPath(pointer), (function(_this) {
	        return function(oldElements) {
	          return _this.queueOutEvents(pointer, oldElements);
	        };
	      })(this), (function(_this) {
	        return function(newElements) {
	          return _this.queueInEvents(pointer, newElements);
	        };
	      })(this), (function(_this) {
	        return function(newPath) {
	          return _this.updateCursor(newPath);
	        };
	      })(this));
	    };

	    PointerEventManager.prototype.pointerDown = function(id, location, timeStampInPerformanceSeconds) {
	      var pointer;
	      eventEpoch.logEvent("pointerDown", id);
	      if (this.activePointers[id]) {
	        console.error("pointerDown(id:" + (inspect(id)) + ", location:" + (inspect(location)) + "): already have an active pointer for that id");
	      } else {
	        this._numActivePointers++;
	      }
	      pointer = this.activePointers[id] = new Pointer(id, location);
	      if (this._numActivePointers === 1) {
	        this.focus(pointer, peek(this.pointerElementPath(pointer)));
	      }
	      return this.queuePointerEvents("pointerDown", pointer, timeStampInPerformanceSeconds);
	    };

	    PointerEventManager.prototype.queuePointerUpInAndOutsideEvents = function(pointer, timeStampInPerformanceSeconds) {
	      return this.forEachReceivingElement((function(_this) {
	        return function(element) {
	          var locationInParentSpace, type;
	          locationInParentSpace = pointer.locationIn(element.parent);
	          type = element.pointInside(locationInParentSpace) ? "pointerUpInside" : "pointerUpOutside";
	          return _this.queuePointerEventForElement(element, type, pointer, timeStampInPerformanceSeconds);
	        };
	      })(this));
	    };

	    PointerEventManager.prototype.queuePointerMoveInAndOutEvents = function(pointer, timeStampInPerformanceSeconds) {
	      var isInsideParent, wasInsideParent;
	      isInsideParent = true;
	      wasInsideParent = true;
	      return this.forEachReceivingElement((function(_this) {
	        return function(element) {
	          var isInside, lastLocationInParentSpace, locationInParentSpace, type, wasInside;
	          lastLocationInParentSpace = pointer.lastLocationIn(element.parent);
	          locationInParentSpace = pointer.locationIn(element.parent);
	          wasInside = wasInsideParent && element.pointInside(lastLocationInParentSpace);
	          isInside = isInsideParent && element.pointInside(locationInParentSpace);
	          if (isInside !== wasInside) {
	            type = isInside ? "pointerMoveIn" : "pointerMoveOut";
	            _this.queuePointerEventForElement(element, type, pointer, timeStampInPerformanceSeconds);
	          }
	          isInsideParent = isInside;
	          return wasInsideParent = wasInside;
	        };
	      })(this));
	    };

	    PointerEventManager.prototype.pointerUp = function(id, timeStampInPerformanceSeconds) {
	      var pointer;
	      eventEpoch.logEvent("pointerUp", id);
	      if (!(pointer = this.activePointers[id])) {
	        return console.error("pointerUp(" + id + "): no active pointer for that id");
	      }
	      this._numActivePointers--;
	      delete this.activePointers[id];
	      this.queuePointerUpInAndOutsideEvents(pointer, timeStampInPerformanceSeconds);
	      this.queuePointerEvents("pointerUp", pointer, timeStampInPerformanceSeconds);
	      if (pointer.stayedWithinDeadzone) {
	        this.queuePointerEvents("pointerClick", pointer, timeStampInPerformanceSeconds);
	        eventEpoch.flushEpochNow();
	      }
	      if (this.capturingElement && this._numActivePointers === 0) {
	        return this.capturingElement = null;
	      }
	    };

	    PointerEventManager.prototype.pointerCancel = function(id, timeStampInPerformanceSeconds) {
	      var pointer;
	      eventEpoch.logEvent("pointerCancel", id);
	      if (!(pointer = this.activePointers[id])) {
	        return console.error("pointerCancel(" + id + "): no active pointer for that id");
	      }
	      this._numActivePointers--;
	      delete this.activePointers[id];
	      this.queuePointerEvents("pointerCancel", pointer, timeStampInPerformanceSeconds);
	      if (this.capturingElement && this._numActivePointers === 0) {
	        return this.capturingElement = null;
	      }
	    };

	    PointerEventManager.prototype.pointerMove = function(id, location, timeStampInPerformanceSeconds) {
	      var pointer;
	      eventEpoch.logEvent("pointerMove", id);
	      if (!(pointer = this.activePointers[id])) {
	        return console.error("pointerMove(" + id + ", " + location + "): no active pointer for that id");
	      }
	      if (!!pointer.location.eq(location)) {
	        return;
	      }
	      this.activePointers[id] = pointer = pointer.moved(location);
	      this.queuePointerMoveInAndOutEvents(pointer, timeStampInPerformanceSeconds);
	      return this.queuePointerEvents("pointerMove", pointer, timeStampInPerformanceSeconds);
	    };

	    PointerEventManager.prototype.mouseDown = function(location, timeStampInPerformanceSeconds) {
	      return this.pointerDown("mousePointer", location, timeStampInPerformanceSeconds);
	    };

	    PointerEventManager.prototype.mouseUp = function(timeStampInPerformanceSeconds) {
	      this.pointerUp("mousePointer", timeStampInPerformanceSeconds);
	      return this.updateMousePath();
	    };

	    PointerEventManager.prototype.mouseMove = function(location, timeStampInPerformanceSeconds) {
	      if (!!this.mouse.location.eq(location)) {
	        return;
	      }
	      this.mouse = this.mouse.moved(location);
	      this.updateMousePath();
	      if (this._numActivePointers > 0) {
	        this.pointerMove("mousePointer", location, timeStampInPerformanceSeconds);
	      }
	      return this.queueMouseEvents("mouseMove", this.mouse);
	    };

	    return PointerEventManager;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	var Animator, Atomic, Canvas, DrawCacheManager, DrawEpoch, Element, ElementBase, Foundation, GlobalEpochCycle, Join, Layout, Map, Matrix, Point, PointLayout, PointLayoutBase, Promise, Rectangle, StateEpoch, Unique, arrayWithoutValue, cacheAggressively, clone, compact, compactFlatten, createWithPostCreate, currentSecond, defaultSize, drawCacheManager, drawEpoch, floatEq, floatEq0, floor, globalEpochCycle, identityMatrix, insert, inspect, isFunction, isNumber, isPlainArray, isPlainObject, isPoint, isString, keepIfRubyTrue, log, matrix, max, merge, mergeInto, min, minimumOrderedOverlappingMerge, modulo, nonStatePropertyKeyTest, perimeter0, plainObjectsDeepEq, point, point0, point1, present, rect, remove, repeat, rubyTrue, shallowEq, stateEpoch, stats, time, truncateLayoutCoordinate, zeroedStats,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Atomic = __webpack_require__(93);

	Foundation = __webpack_require__(11);

	Canvas = __webpack_require__(129);

	Animator = __webpack_require__(149);

	Layout = __webpack_require__(151);

	ElementBase = __webpack_require__(159);

	StateEpoch = __webpack_require__(162);

	DrawEpoch = __webpack_require__(169);

	GlobalEpochCycle = __webpack_require__(168);

	DrawCacheManager = __webpack_require__(170);

	point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, Matrix = Atomic.Matrix, matrix = Atomic.matrix, identityMatrix = Atomic.identityMatrix, point0 = Atomic.point0, point1 = Atomic.point1, perimeter0 = Atomic.perimeter0, isPoint = Atomic.isPoint;

	floor = Math.floor;

	globalEpochCycle = GlobalEpochCycle.globalEpochCycle;

	drawCacheManager = DrawCacheManager.drawCacheManager;

	PointLayout = Layout.PointLayout, PointLayoutBase = Layout.PointLayoutBase;

	truncateLayoutCoordinate = function(v) {
	  return floor(v + 1 / 256);
	};

	inspect = Foundation.inspect, clone = Foundation.clone, time = Foundation.time, Map = Foundation.Map, plainObjectsDeepEq = Foundation.plainObjectsDeepEq, shallowEq = Foundation.shallowEq, Unique = Foundation.Unique, compact = Foundation.compact, compactFlatten = Foundation.compactFlatten, keepIfRubyTrue = Foundation.keepIfRubyTrue, log = Foundation.log, insert = Foundation.insert, remove = Foundation.remove, merge = Foundation.merge, max = Foundation.max, min = Foundation.min, arrayWithoutValue = Foundation.arrayWithoutValue, minimumOrderedOverlappingMerge = Foundation.minimumOrderedOverlappingMerge, isPlainObject = Foundation.isPlainObject, isPlainArray = Foundation.isPlainArray, isNumber = Foundation.isNumber, isString = Foundation.isString, isFunction = Foundation.isFunction, mergeInto = Foundation.mergeInto, floatEq = Foundation.floatEq, floatEq0 = Foundation.floatEq0, Join = Foundation.Join, rubyTrue = Foundation.rubyTrue, createWithPostCreate = Foundation.createWithPostCreate, currentSecond = Foundation.currentSecond, repeat = Foundation.repeat, present = Foundation.present, Promise = Foundation.Promise, modulo = Foundation.modulo;

	cacheAggressively = false;

	stats = clone(zeroedStats = {
	  stagingBitmapsCreated: 0,
	  elementsDrawn: 0
	});

	defaultSize = point(100);

	stateEpoch = StateEpoch.stateEpoch;

	drawEpoch = DrawEpoch.drawEpoch;

	nonStatePropertyKeyTest = ElementBase.nonStatePropertyKeyTest;

	module.exports = createWithPostCreate(Element = (function(superClass) {
	  var childrenWithout, drawCachingEnabled, initialChildren;

	  extend(Element, superClass);

	  Element.drawCachingEnabled = drawCachingEnabled = true;

	  Element.registerWithElementFactory = function() {
	    return true;
	  };

	  Element.stats = stats;

	  Element.resetStats = function() {
	    return mergeInto(stats, zeroedStats);
	  };

	  Element.created = 0;

	  Element.createdByType = {};

	  Element.resetCreated = function() {
	    Element.created = 0;
	    return Element.createdByType = {};
	  };

	  function Element(options, children) {
	    var childrenArray, i, j, ref;
	    Element.created++;
	    Element.__super__.constructor.call(this, options);
	    this.initFields();
	    this._propertiesInitialized = false;
	    if (arguments.length === 2 && children && children.constructor === Array) {
	      if (children.length > 0) {
	        this.setChildren(children);
	      }
	    } else if (arguments.length > 1) {
	      childrenArray = new Array(arguments.length - 1);
	      for (i = j = 1, ref = arguments.length; j < ref; i = j += 1) {
	        childrenArray[i - 1] = arguments[i];
	      }
	      this.setChildren(childrenArray);
	    }
	    this._propertiesInitialized = true;
	  }

	  Element.prototype.initFields = function() {
	    this._initDrawCache();
	    this._initTemporaryFields();
	    this._initComputedFields();
	    this._activeAnimator = null;
	    this._animatingOut = false;
	    return this._locationLayoutDisabled = false;
	  };

	  Element.prototype._initTemporaryFields = function() {
	    this._currentDrawTarget = null;
	    this._currentToTargetMatrix = null;
	    this._lastParentSize = null;
	    return this._bitmapFactory = null;
	  };

	  Element.prototype._initComputedFields = function() {
	    this._elementSpaceDrawArea = null;
	    this._rootElement = this;
	    this._elementToAbsMatrix = null;
	    this._absToElementMatrix = null;
	    return this._parentToElementMatrix = null;
	  };

	  Element.layoutProperty = function(map) {
	    var options, prop, results1;
	    results1 = [];
	    for (prop in map) {
	      options = map[prop];
	      options.layoutProperty = true;
	      results1.push(this._defineElementProperty(prop, options));
	    }
	    return results1;
	  };

	  Element.drawProperty = function(map) {
	    var options, prop, results1;
	    results1 = [];
	    for (prop in map) {
	      options = map[prop];
	      options.drawProperty = true;
	      results1.push(this._defineElementProperty(prop, options));
	    }
	    return results1;
	  };

	  Element.drawLayoutProperty = function(map) {
	    var options, prop, results1;
	    results1 = [];
	    for (prop in map) {
	      options = map[prop];
	      options.layoutProperty = true;
	      options.drawProperty = true;
	      results1.push(this._defineElementProperty(prop, options));
	    }
	    return results1;
	  };

	  Element.drawAreaProperty = function(map) {
	    var options, prop, results1;
	    results1 = [];
	    for (prop in map) {
	      options = map[prop];
	      options.drawAreaProperty = true;
	      options.drawProperty = true;
	      results1.push(this._defineElementProperty(prop, options));
	    }
	    return results1;
	  };

	  Element.prototype._layoutPropertyChanged = function() {
	    return this._elementChanged(true);
	  };

	  Element.prototype._drawPropertyChanged = function() {
	    return this._elementChanged(false, true, false);
	  };

	  Element.prototype._drawAreaPropertyChanged = function() {
	    return this._elementChanged(false, true, true);
	  };

	  Element.getter({
	    absToElementMatrix: function() {
	      return this._absToElementMatrix || (this._absToElementMatrix = this._parent ? this._parent.getAbsToElementMatrix().mul(this.getParentToElementMatrix()) : this.getParentToElementMatrix());
	    },
	    parentToElementMatrix: function() {
	      return this._parentToElementMatrix || (this._parentToElementMatrix = this._elementToParentMatrix.inv);
	    },
	    elementToDocumentMatrix: function() {
	      return this.getElementToAbsMatrix().mul(this.getCanvasElement()._elementToDocumentMatrix);
	    },
	    documentToElementMatrix: function() {
	      return this.getCanvasElement()._documentToElementMatrix.mul(this.getAbsToElementMatrix());
	    },
	    parentSpaceDrawArea: function() {
	      return this._elementToParentMatrix.transformBoundingRect(this.getElementSpaceDrawArea());
	    },
	    elementSpaceDrawArea: function() {
	      return this._elementSpaceDrawArea || (this._elementSpaceDrawArea = this._computeElementSpaceDrawArea());
	    },
	    absOpacity: function() {
	      var opacity, parent;
	      opacity = this.getVisible() ? this.getOpacity() : 0;
	      if (parent = this.getParent()) {
	        opacity *= parent.getAbsOpacity();
	      }
	      return opacity;
	    },
	    isChanging: function() {
	      return this.__stateChangeQueued;
	    },
	    rootElement: function() {
	      return this._rootElement || (this._rootElement = this._parent ? this._parent.getRootElement() : this);
	    },
	    bitmapFactory: function() {
	      var ref;
	      return this._bitmapFactory || ((ref = this.getCanvasElement()) != null ? ref.bitmapFactory : void 0) || Canvas.Bitmap;
	    },
	    devicePixelsPerPoint: function() {
	      return this.getRootElement()._devicePixelsPerPoint || 1;
	    },
	    canvasElement: function() {
	      var re;
	      re = this.getRootElement();
	      if (re !== this) {
	        return re.getCanvasElement();
	      } else {
	        return null;
	      }
	    }
	  });

	  Element.prototype.transformToParentSpace = function(p) {
	    return this._elementToParentMatrix.transform(p);
	  };

	  Element.prototype.transformFromParentSpace = function(p) {
	    return this._elementToParentMatrix.inverseTransform(p);
	  };

	  Element.prototype._clearRootElement = function() {
	    var child, j, len, oldRootElement, ref, results1;
	    if (oldRootElement = this._rootElement) {
	      this._rootElement = null;
	      this.queueEvent("rootElementChanged", (function(_this) {
	        return function() {
	          return {
	            oldRootElement: oldRootElement,
	            rootElement: _this.getRootElement()
	          };
	        };
	      })(this));
	      ref = this._children;
	      results1 = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        results1.push(child._clearRootElement());
	      }
	      return results1;
	    }
	  };

	  Element.prototype.preprocessEventHandlers = function(handlerMap) {
	    var k, v;
	    for (k in handlerMap) {
	      v = handlerMap[k];
	      if (k === "rootElementChanged") {
	        this.getRootElement();
	      }
	    }
	    return handlerMap;
	  };

	  Element.setter({
	    absToElementMatrix: function(aToE) {
	      return this.setElementToAbsMatrix(aToE.invert());
	    },
	    parentToElementMatrix: function(pToE) {
	      return this.setElementToParentMatrix(pToE.invert());
	    }
	  });

	  Element.layoutProperty({
	    size: {
	      "default": {
	        ps: 1
	      },
	      preprocess: function(v, oldValue) {
	        if (v instanceof PointLayoutBase) {
	          return v;
	        } else {
	          return new PointLayout(v, oldValue);
	        }
	      }
	    },

	    /*
	    TODO: Update StateEpochLayout to use: childrenSizePreprocessor
	    
	    How do we want to handle currentPadding?
	      - is it always set; gut: yes
	      - should childrenSizePreprocessor be responsible for including padding?
	      - should we check before calling childrenSizePreprocessor? If it is length 4,
	        then padding is added after?
	    
	      - I kinda want to NOT include currentPadding, at least not most the time.
	        99% of the time it is going to be the exact same calulation:
	    
	        if currentPadding
	          right += currentPadding.getWidth()
	          bottom += currentPadding.getHeight()
	    
	        which, if applied after, would look like this:
	    
	          childrenSizePreprocessor(...).add currentPadding.getWidth(), currentPadding.getHeight()
	           * note, this only creates a second point if there is non-zero padding.
	    
	    childrenSizePreprocessor:
	      default: (left, top, right, bottom) -> point right, bottom
	      validate: (v) -> isFunction v
	     */
	    location: {
	      "default": 0,
	      preprocess: function(v, oldValue) {
	        if (v instanceof PointLayoutBase) {
	          return v;
	        } else {
	          return new PointLayout(v, oldValue);
	        }
	      },
	      postSetter: function() {
	        return this._locationLayoutDisabled = false;
	      }
	    },
	    scale: {
	      "default": 1,
	      preprocess: function(s) {
	        return point(s);
	      },
	      postSetter: function() {
	        return this._locationLayoutDisabled = false;
	      }
	    },
	    angle: {
	      "default": 0,
	      postSetter: function() {
	        return this._locationLayoutDisabled = false;
	      }
	    },
	    childrenLayout: {
	      "default": null,
	      validate: function(v) {
	        return v === null || v === "flow" || v === "column" || v === "row";
	      }
	    },
	    childrenGrid: {
	      "default": null,
	      validate: function(v) {
	        return v === null || isString(v) && v.match(/^[ a-zA-Z]+$/);
	      }
	    },
	    childrenAlignment: {
	      "default": point0,
	      preprocess: function(v) {
	        return point(v);
	      }
	    },
	    axis: {
	      "default": point0,
	      preprocess: function(v) {
	        return point(v);
	      }
	    },
	    inFlow: {
	      "default": true,
	      preprocess: function(v) {
	        return !!v;
	      }
	    },
	    padding: {
	      "default": 0,
	      validate: function(v) {
	        if (v === false || v === void 0 || v === null) {
	          return true;
	        } else if (isPlainArray(v)) {
	          return v.length === 2 || v.length === 4;
	        } else {
	          return isNumber(v) || isFunction(v) || isPlainObject(v);
	        }
	      }
	    },
	    margin: {
	      "default": 0,
	      validate: function(v) {
	        if (v === false || v === void 0 || v === null) {
	          return true;
	        } else if (isPlainArray(v)) {
	          return v.length === 2 || v.length === 4;
	        } else {
	          return isNumber(v) || isFunction(v) || isPlainObject(v);
	        }
	      }
	    }
	  });

	  Element.concreteProperty({
	    currentSize: {
	      "default": defaultSize,
	      setter: function(_new, _old) {
	        return _old;
	      }
	    },
	    currentPadding: {
	      "default": perimeter0,
	      setter: function(_new, _old) {
	        return _old;
	      }
	    },
	    currentMargin: {
	      "default": perimeter0,
	      setter: function(_new, _old) {
	        return _old;
	      }
	    }
	  });

	  Element.virtualProperty({
	    currentLocationX: function(pending) {
	      var a, p, s, state;
	      state = this.getState(pending);
	      s = state._currentSize;
	      a = state._axis;
	      p = state._currentPadding;
	      return state._elementToParentMatrix.transformX(s.x * a.x - p.left, s.y * a.y - p.top);
	    },
	    currentLocationY: function(pending) {
	      var a, p, s, state;
	      state = this.getState(pending);
	      s = state._currentSize;
	      a = state._axis;
	      p = state._currentPadding;
	      return state._elementToParentMatrix.transformY(s.x * a.x - p.left, s.y * a.y - p.top);
	    },
	    currentLocation: function(pending, elementToParentMatrix) {
	      var a, p, s, state;
	      state = this.getState(pending);
	      s = state._currentSize;
	      a = state._axis;
	      p = state._currentPadding;
	      elementToParentMatrix || (elementToParentMatrix = state._elementToParentMatrix);
	      return elementToParentMatrix.transform(s.x * a.x - p.left, s.y * a.y - p.top);
	    },
	    layout: {
	      getter: function() {
	        throw new Error("get layout is depricated");
	      },
	      setter: function() {
	        throw new Error("set layout is depricated");
	      }
	    },
	    elementToAbsMatrix: {
	      getter: function(pending) {
	        var state;
	        state = this.getState(pending);
	        return state._elementToAbsMatrix || (state._elementToAbsMatrix = state._parent ? state._elementToParentMatrix.mul(state._parent.getElementToAbsMatrix()) : state._elementToParentMatrix);
	      },
	      setter: function(eToA) {
	        return this.setElementToParentMatrix(this._parent ? eToA.mul(this._parent.getAbsToElementMatrix()) : eToA);
	      }
	    }
	  });

	  Element.getter({
	    currentElementToParentMatrix: function(pending, withLocation, withScale) {
	      if (withLocation || withScale) {
	        withLocation || (withLocation = this.getCurrentLocation(pending));
	        return this._getElementToParentMatrixForXY(pending, withLocation.x, withLocation.y, withScale);
	      } else {
	        return this.getState(pending)._elementToParentMatrix;
	      }
	    }
	  });

	  Element.concreteProperty({
	    cursor: {
	      "default": null,
	      validate: function(v) {
	        return v === null || typeof v === "string";
	      }
	    },
	    elementToParentMatrix: {
	      "default": Matrix.identityMatrix,
	      preprocess: function(v) {
	        return matrix(v);
	      },
	      setter: function(v) {
	        this._locationLayoutDisabled = true;
	        return matrix(v);
	      }
	    },
	    parent: {
	      "default": null,
	      setter: function(p) {
	        if (p) {
	          p.addChild(this);
	        } else {
	          this.removeFromParent();
	        }
	        return p;
	      }
	    },
	    children: {
	      "default": initialChildren = [],
	      setter: function(newChildren, oldChildren) {
	        var child, childRemovedAnimation, childrenHaveRemovedAnimations, firstTimeSettingChildren, j, keepAllChildren, keepOldChildren, len, len1, len2, len3, len4, n, oldParent, q, r, t;
	        this.__drawPropertiesChanged = true;
	        newChildren = compactFlatten(newChildren, keepIfRubyTrue);
	        firstTimeSettingChildren = oldChildren === initialChildren;
	        if (!(childrenHaveRemovedAnimations = childRemovedAnimation = this.getPendingChildRemovedAnimation())) {
	          for (j = 0, len = oldChildren.length; j < len; j++) {
	            child = oldChildren[j];
	            if (!(child.getPendingRemovedAnimation())) {
	              continue;
	            }
	            childrenHaveRemovedAnimations = true;
	            break;
	          }
	        }
	        if (childrenHaveRemovedAnimations) {
	          keepOldChildren = [];
	          for (n = 0, len1 = oldChildren.length; n < len1; n++) {
	            child = oldChildren[n];
	            if (child._animatingOut === "done") {
	              child._animatingOut = false;
	            } else if (childRemovedAnimation || child.getPendingRemovedAnimation() || indexOf.call(newChildren, child) >= 0) {
	              keepOldChildren.push(child);
	            }
	          }
	          keepAllChildren = minimumOrderedOverlappingMerge(keepOldChildren, newChildren);
	          for (q = 0, len2 = keepAllChildren.length; q < len2; q++) {
	            child = keepAllChildren[q];
	            if (indexOf.call(newChildren, child) < 0) {
	              (function(child) {
	                var animation;
	                if (!child._animatingOut && (animation = childRemovedAnimation || child.getPendingRemovedAnimation())) {
	                  child.setAnimate(merge(animation, {
	                    on: {
	                      done: (function(_this) {
	                        return function() {
	                          child._animatingOut = "done";
	                          return child.removeFromParent();
	                        };
	                      })(this)
	                    }
	                  }));
	                  return child._animatingOut = true;
	                }
	              })(child);
	            }
	          }
	          newChildren = keepAllChildren;
	        }
	        for (r = 0, len3 = oldChildren.length; r < len3; r++) {
	          child = oldChildren[r];
	          if (indexOf.call(newChildren, child) < 0) {
	            child._setParentOnly(null);
	          }
	        }
	        for (t = 0, len4 = newChildren.length; t < len4; t++) {
	          child = newChildren[t];
	          if (!((oldParent = child.getPendingParent()) !== this)) {
	            continue;
	          }
	          if (oldParent != null) {
	            oldParent._setChildrenOnly(oldParent.pendingChildrenWithout(child));
	          }
	          child._setParentOnly(this);
	          if (!firstTimeSettingChildren) {
	            this.startChildAddedAnimation(child);
	          }
	        }
	        return newChildren;
	      }
	    }
	  });


	  /*
	  Apply f to each child
	  return: this
	  
	  SBD NOTE: 2015-11-5 We should start using this for all child iteration.
	    It will allow us to implement Spans in the future.
	  
	     * basic span sketch:
	    for child in @_children
	      if isSpan child
	        child.eachChild f
	      else
	        f child
	  
	     * span sketch with span-properties:
	    class ElementBase
	      eachChild: (f, spanProps) ->
	        for child in @_children
	          if isSpan child
	            child.eachChild f, spanProps
	          else
	            f child, spanProps
	  
	    class Span extends ElementBase
	      eachChild: (f, spanProps) ->
	        if @props
	          spanProps = if spanProps
	            merge spanProps, @props
	          else
	            @props
	        super f, spanProps
	   */

	  Element.prototype.eachChild = function(f) {
	    var child, j, len, ref;
	    ref = this._children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      child = ref[j];
	      f(child);
	    }
	    return this;
	  };

	  Element.getter({
	    area: function() {
	      throw new Error("depricated - use logicalArea");
	    },
	    logicalArea: function() {
	      var p, size;
	      p = this.getCurrentPadding();
	      size = this._currentSize;
	      return new Rectangle(-p.left, -p.top, size.x, size.y);
	    },
	    paddedWidth: function() {
	      return this._currentSize.x - this.getCurrentPadding().getWidth();
	    },
	    paddedHeight: function() {
	      return this._currentSize.y - this.getCurrentPadding().getHeight();
	    },
	    paddedSize: function() {
	      var p, size;
	      p = this.getCurrentPadding();
	      size = this._currentSize;
	      return point(size.x - p.getWidth(), size.y - p.getHeight());
	    },
	    paddedArea: function() {
	      var p, size;
	      p = this.getCurrentPadding();
	      size = this._currentSize;
	      return new Rectangle(0, 0, size.x - p.getWidth(), size.y - p.getHeight());
	    }
	  });

	  Element.drawAreaProperty({
	    clip: {
	      "default": false,
	      preprocess: function(v) {
	        return !!v;
	      }
	    }
	  });

	  Element.drawLayoutProperty({
	    visible: {
	      "default": true,
	      preprocess: function(v) {
	        return !!v;
	      }
	    }
	  });

	  Element.concreteProperty({
	    opacity: {
	      "default": 1,
	      validate: function(v) {
	        return typeof v === "number";
	      }
	    },
	    compositeMode: {
	      "default": "normal",
	      validate: function(v) {
	        return typeof v === "string";
	      }
	    },
	    pointerEventPriority: {
	      "default": 0,
	      preprocess: function(v) {
	        return v | 0;
	      }
	    },
	    userProperties: {
	      "default": null,
	      preprocess: function(v, oldValue) {
	        return merge(oldValue, v);
	      }
	    },
	    childAddedAnimation: {
	      "default": null,
	      validate: function(v) {
	        return (v == null) || isPlainObject(v);
	      }
	    },
	    childRemovedAnimation: {
	      "default": null,
	      validate: function(v) {
	        return (v == null) || isPlainObject(v);
	      }
	    },
	    addedAnimation: {
	      "default": null,
	      validate: function(v) {
	        return (v == null) || isPlainObject(v);
	      }
	    },
	    removedAnimation: {
	      "default": null,
	      validate: function(v) {
	        return (v == null) || isPlainObject(v);
	      }
	    },
	    receivePointerEvents: {
	      "default": "inLogicalArea",
	      validate: function(v) {
	        return v === "never" || v === "inLogicalArea" || v === "inPaddedArea" || v === "passToChildren";
	      }
	    }
	  });

	  Element.concreteProperty({
	    cacheDraw: {
	      "default": false,
	      validate: function(v) {
	        return v === false || v === true || v === "locked" || v === "always" || v === "auto";
	      },
	      preprocess: function(v) {
	        if (v === true) {
	          return "auto";
	        } else {
	          return v;
	        }
	      },
	      description: "'auto', true: this element will be cached if it is rendered multiple times and isn't changing 'always': this element will always be cached 'locked': it will be cached once and no matter what changes, the old drawCache will be used for drawing. NOTE: If the element's internal draw properties change, _drawCacheBitmapInvalid is set to true, but the old drawCache is still used. NOTE: If it was 'locked' and then cacheDraw is changed to not 'locked' and not false, and _drawCacheBitmapInvalid is true, the cache will be regenerated."
	    }
	  });

	  Element.virtualProperty({
	    invisible: {
	      getter: function(pending) {
	        return this.getState(pending)._visible;
	      },
	      setter: function(v) {
	        return this.setVisible(!v);
	      }
	    },
	    isMask: {
	      getter: function(pending) {
	        return this.getState(pending)._compositeMode === "alphamask";
	      },
	      setter: function(v) {
	        return this.setCompositeMode(v ? "alphamask" : "normal");
	      }
	    },
	    opacityPercent: function(pending) {
	      var state;
	      state = this.getState(pending);
	      return state._opacity * 100 | 0;
	    },
	    hasMask: function(pending) {
	      var child, j, len, ref, state;
	      state = this.getState(pending);
	      ref = state._children;
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        if (child.isMask) {
	          return true;
	        }
	      }
	      return false;
	    },
	    firstMask: function(pending) {
	      var child, j, len, ref, state;
	      state = this.getState(pending);
	      ref = state._children;
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        if (child.isMask) {
	          return child;
	        }
	      }
	    },
	    sizeAffectsLocation: function(pending) {
	      var state;
	      state = this.getState(pending);
	      return state._axis.x !== 0 || state._axis.y !== 0;
	    },
	    absoluteAxis: function(pending) {
	      var state;
	      state = this.getState(pending);
	      return state._currentSize.mul(state._axis);
	    },
	    sizeForChildren: function(pending) {
	      var state;
	      state = this.getState(pending);
	      return state._currentPadding.subtractedFromSize(state._currentSize);
	    },
	    parentSize: function() {
	      throw new Error("parentSize depricated");
	    },
	    parentSizeForChildren: function(pending) {
	      var ref;
	      return ((ref = this.getState(pending)._parent) != null ? ref.getSizeForChildren(pending) : void 0) || defaultSize;
	    },
	    nextSibling: {
	      getter: function(pending) {
	        var parent;
	        parent = this.getState(pending)._parent;
	        return [parent, (parent != null ? parent.getChildren(pending)[parent.getChildIndex(this, pending) + 1] : void 0) || null];
	      },
	      setter: function(siblingOrPair) {
	        return this.placeRelativeToSibling(siblingOrPair, 0);
	      }
	    },
	    prevSibling: {
	      getter: function(pending) {
	        var parent;
	        parent = this.getState(pending)._parent;
	        return [parent, (parent != null ? parent.getChildren(pending)[parent.getChildIndex(this, pending) - 1] : void 0) || null];
	      },
	      setter: function(siblingOrPair) {
	        return this.placeRelativeToSibling(siblingOrPair, 1);
	      }
	    },
	    maxXInParentSpace: function(pending) {
	      var _currentPadding, _currentSize, _elementToParentMatrix, bottom, left, padding, ref, right, top;
	      ref = this.getState(pending), _currentPadding = ref._currentPadding, _currentSize = ref._currentSize, _elementToParentMatrix = ref._elementToParentMatrix;
	      padding = _currentPadding;
	      left = -padding.left;
	      top = -padding.top;
	      right = _currentSize.x + left;
	      bottom = _currentSize.y + top;
	      return max((_elementToParentMatrix.transformX(left, top), _elementToParentMatrix.transformX(left, bottom), _elementToParentMatrix.transformX(right, top), _elementToParentMatrix.transformX(right, bottom)));
	    },
	    maxYInParentSpace: function(pending) {
	      var _currentPadding, _currentSize, _elementToParentMatrix, bottom, left, padding, ref, right, top;
	      ref = this.getState(pending), _currentPadding = ref._currentPadding, _currentSize = ref._currentSize, _elementToParentMatrix = ref._elementToParentMatrix;
	      padding = _currentPadding;
	      left = -padding.left;
	      top = -padding.top;
	      right = _currentSize.x + left;
	      bottom = _currentSize.y + top;
	      return max((_elementToParentMatrix.transformY(left, top), _elementToParentMatrix.transformY(left, bottom), _elementToParentMatrix.transformY(right, top), _elementToParentMatrix.transformY(right, bottom)));
	    },
	    widthInParentSpace: function(pending) {
	      var a, b, bottom, c, d, left, padding, right, state, top;
	      state = this.getState(pending);
	      padding = state._currentPadding;
	      left = -padding.left;
	      top = -padding.top;
	      right = state._currentSize.x + left;
	      bottom = state._currentSize.y + top;
	      a = state._elementToParentMatrix.transformX(left, top);
	      b = state._elementToParentMatrix.transformX(left, bottom);
	      c = state._elementToParentMatrix.transformX(right, top);
	      d = state._elementToParentMatrix.transformX(right, bottom);
	      return max(a, b, c, d) - min(a, b, c, d);
	    },
	    heightInParentSpace: function(pending) {
	      var a, b, bottom, c, d, left, padding, right, state, top;
	      state = this.getState(pending);
	      padding = state._currentPadding;
	      left = -padding.left;
	      top = -padding.top;
	      right = state._currentSize.x + left;
	      bottom = state._currentSize.y + top;
	      a = state._elementToParentMatrix.transformY(left, top);
	      b = state._elementToParentMatrix.transformY(left, bottom);
	      c = state._elementToParentMatrix.transformY(right, top);
	      d = state._elementToParentMatrix.transformY(right, bottom);
	      return max(a, b, c, d) - min(a, b, c, d);
	    },
	    layoutLocationParentCircular: function(pending) {
	      var ref, state;
	      state = this.getState(pending);
	      return !!state._location.layoutIsCircular((ref = state._parent) != null ? ref.getState(pending)._size : void 0);
	    },
	    layoutSizeParentCircular: function(pending) {
	      var ref, state;
	      state = this.getState(pending);
	      return !!state._size.layoutIsCircular((ref = state._parent) != null ? ref.getState(pending)._size : void 0);
	    },
	    layoutMovesChildren: function(pending) {
	      return !!(this.getState(pending))._childrenLayout;
	    },
	    animate: {
	      "default": null,
	      getter: function(pending) {
	        return this._activeAnimator;
	      },
	      setter: function(options) {
	        if (this._animatingOut) {
	          return;
	        }
	        this.finishAnimations();
	        return stateEpoch.onNextReady((function(_this) {
	          return function() {
	            if (options) {
	              return new Animator(_this, options);
	            }
	          };
	        })(this));
	      }
	    },
	    baseDrawArea: function(pending) {
	      var _currentPadding, _currentSize, h, ref, w, x, y;
	      ref = this.getState(pending), _currentPadding = ref._currentPadding, _currentSize = ref._currentSize;
	      x = _currentSize.x, y = _currentSize.y;
	      w = _currentPadding.w, h = _currentPadding.h;
	      return rect(0, 0, x - w, y - h);
	    }
	  });

	  Element.getter({
	    allChildrenAreUpLayout: function() {
	      return false;
	    }
	  });


	  /*
	  INFO
	   */

	  Element.getter({
	    inspectTree: function() {
	      var c;
	      return [
	        this.getInspectedName(), (function() {
	          var j, len, ref, results1;
	          ref = this._children;
	          results1 = [];
	          for (j = 0, len = ref.length; j < len; j++) {
	            c = ref[j];
	            results1.push(c.inspectTree);
	          }
	          return results1;
	        }).call(this)
	      ];
	    },
	    inspectProps: function() {
	      var attr, props;
	      props = [];
	      if (this._axis && !this.axis.eq(point())) {
	        props.push("axis");
	      }
	      if (!this.scale.eq(point(1, 1))) {
	        props.push("scale");
	      }
	      if (this._currentSize) {
	        props.push("currentSize");
	      }
	      if (!this.getCurrentLocation().eq(point0)) {
	        props.push("currentLocation");
	      }
	      if (this._compositeMode && this._compositeMode !== "normal") {
	        props.push("compositeMode");
	      }
	      if ((this._opacity != null) && this._opacity < 1) {
	        props.push("opacity");
	      }
	      props = (function() {
	        var j, len, results1;
	        results1 = [];
	        for (j = 0, len = props.length; j < len; j++) {
	          attr = props[j];
	          results1.push(attr + ":" + this[attr]);
	        }
	        return results1;
	      }).call(this);
	      if ((this._visible != null) && !this._visible) {
	        props.push("invisible");
	      }
	      if (this._children && this._useStagingBitmap()) {
	        props.push("staged");
	      }
	      return props;
	    },
	    coreProps: function() {
	      var j, len, prop, properties, ret;
	      properties = [this._axis && !this.axis.eq(point()) ? "axis" : void 0, !this.location.eq(point0) ? "location" : void 0, this._currentSize ? "size" : void 0, !floatEq0(this.angle) ? "angle" : void 0, !this.scale.eq(point(1, 1)) ? "scale" : void 0, this._compositeMode && this._compositeMode !== "normal" ? "compositeMode" : void 0, (this._opacity != null) && this._opacity < 1 ? "opacity" : void 0, this._invisible ? "invisible" : void 0, this._layout ? "layout" : void 0];
	      ret = {};
	      for (j = 0, len = properties.length; j < len; j++) {
	        prop = properties[j];
	        if (prop) {
	          ret[prop] = this[prop];
	        }
	      }
	      return ret;
	    },
	    requiresParentStagingBitmap: function() {
	      switch (this._compositeMode) {
	        case "alphamask":
	        case "target_alphamask":
	        case "destover":
	        case "sourcein":
	        case "inverse_alphamask":
	          return true;
	        case "targetAlphamask":
	        case "destOver":
	        case "sourceIn":
	        case "inverseAlphamask":
	          return true;
	        case "add":
	        case "normal":
	          return false;
	        default:
	          throw new Error("unknown compositeMode: " + this._compositeMode);
	      }
	    },
	    firstChildRequiringParentStagingBitmap: function() {
	      var child, j, len, ref;
	      ref = this._children;
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        if (child.getRequiresParentStagingBitmap()) {
	          return child;
	        }
	      }
	    },
	    childRequiresParentStagingBitmap: function() {
	      return !!this.getFirstChildRequiringParentStagingBitmap();
	    }
	  });

	  Element.prototype.inspectParentStructure = function(elementPath) {
	    if (elementPath == null) {
	      elementPath = this.elementPath;
	    }
	    if (elementPath.length === 1) {
	      return [elementPath[0].inspectedName, elementPath[0].coreProps];
	    } else {
	      return [elementPath[0].inspectedName, elementPath[0].coreProps, this.inspectParentStructure(elementPath.slice(1))];
	    }
	  };

	  Element.prototype.inspectChildrenStructure = function() {
	    var child;
	    return [this.inspectedName, this.coreProps].concat((function() {
	      var j, len, ref, results1;
	      ref = this._children;
	      results1 = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        results1.push(child.inspectChildrenStructure());
	      }
	      return results1;
	    }).call(this));
	  };

	  Element.prototype.inspectRender = function(toBitmapOptions, callback) {
	    var childArea;
	    childArea = toBitmapOptions.area || "parentLogicalArea";
	    return this.onNextReady((function(_this) {
	      return function() {
	        var child, fn, i, j, joiner, len, ref;
	        joiner = new Join;
	        joiner["do"](function(done) {
	          return _this.toBitmap(merge(toBitmapOptions, {
	            area: "logicalArea"
	          }), function(bitmap) {
	            var outPut;
	            outPut = {};
	            outPut[_this.inspectedName] = [_this.inspectedName, bitmap];
	            return done(outPut);
	          });
	        });
	        ref = _this.children;
	        fn = function(child, i) {
	          return joiner["do"](function(done) {
	            return child.toBitmap(merge(toBitmapOptions, {
	              area: childArea
	            }), function(bitmap) {
	              var ret;
	              ret = {};
	              ret["child" + i] = [child.inspectedName, bitmap];
	              return done(ret);
	            });
	          });
	        };
	        for (i = j = 0, len = ref.length; j < len; i = ++j) {
	          child = ref[i];
	          fn(child, i);
	        }
	        return joiner.join(function(results) {
	          return callback(merge(results));
	        });
	      };
	    })(this));
	  };

	  Element.prototype.logInspectRender = function(toBitmapOptions) {
	    if (toBitmapOptions == null) {
	      toBitmapOptions = {};
	    }
	    toBitmapOptions.pixelsPerPoint || (toBitmapOptions.pixelsPerPoint = this.devicePixelsPerPoint);
	    return this.inspectRender(toBitmapOptions, (function(_this) {
	      return function(results) {
	        return _this.log(results);
	      };
	    })(this));
	  };

	  Element.prototype.inspectLocal = function() {
	    return this.getInspectedName() + " " + this.inspectProps.join(", ");
	  };

	  Element.prototype.inspect = function(inspector) {
	    var inspected;
	    inspected = this.inspectLocal();
	    if (inspector != null) {
	      if (typeof inspector.put === "function") {
	        inspector.put(inspected);
	      }
	    }
	    return inspected;
	  };

	  Element.prototype.inspect2 = function() {
	    return this.inspectedName;
	  };

	  Element.prototype.toVisualStructure = function(callback) {};

	  Element.prototype.abortAnimations = function() {
	    if (this._activeAnimator) {
	      return this._activeAnimator.abort();
	    }
	  };

	  Element.prototype.finishAnimations = function() {
	    if (this._activeAnimator) {
	      return this._activeAnimator.finish();
	    }
	  };

	  Element.prototype.startChildAddedAnimation = function(child) {
	    var animation;
	    if (animation = child.getPendingAddedAnimation() || (this._propertiesInitialized && this.getPendingChildAddedAnimation())) {
	      return child.animate = animation;
	    }
	  };

	  Element.prototype._useStagingBitmap = function() {
	    return (this.getHasChildren() || this.getIsMask()) && (this._compositeMode !== "normal" || this._opacity < 1 || this.getChildRequiresParentStagingBitmap());
	  };

	  Element.prototype._drawChildren = function(target, elementToTargetMatrix, usingStagingBitmap) {
	    var child, j, len, ref;
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      child = ref[j];
	      if (child.visible) {
	        child.draw(target, child.elementToTargetMatrix(elementToTargetMatrix));
	      }
	    }
	    return this.children;
	  };

	  Element.prototype._renderStagingBitmap = function(targetSpaceDrawArea, elementToTargetMatrix, stagingBitmap) {
	    targetSpaceDrawArea = targetSpaceDrawArea.roundOut();
	    if (!targetSpaceDrawArea.getLocationIsZero()) {
	      elementToTargetMatrix = elementToTargetMatrix.translateXY(-targetSpaceDrawArea.x, -targetSpaceDrawArea.y);
	    }
	    stats.stagingBitmapsCreated++;
	    stagingBitmap || (stagingBitmap = this.bitmapFactory.newBitmap(targetSpaceDrawArea.size));
	    this._currentDrawTarget = stagingBitmap;
	    this._currentToTargetMatrix = elementToTargetMatrix;
	    if (this.getHasCustomClipping()) {
	      this._clipDraw(null, stagingBitmap, elementToTargetMatrix);
	    } else {
	      this._drawChildren(stagingBitmap, elementToTargetMatrix, true);
	    }
	    return stagingBitmap;
	  };

	  Element.prototype._accountForOverdraw = function(proposedTargetSpaceDrawArea, elementToTargetMatrix) {
	    var child, j, len, ref;
	    ref = this.children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      child = ref[j];
	      if (child.overDraw) {
	        proposedTargetSpaceDrawArea = child.overDraw(proposedTargetSpaceDrawArea, elementToTargetMatrix);
	      }
	    }
	    return proposedTargetSpaceDrawArea;
	  };

	  Element.prototype._drawWithStagingBitmap = function(targetSpaceDrawArea, target, elementToTargetMatrix) {
	    var stagingBitmap;
	    targetSpaceDrawArea = this._accountForOverdraw(targetSpaceDrawArea, elementToTargetMatrix);
	    stagingBitmap = this._renderStagingBitmap(targetSpaceDrawArea, elementToTargetMatrix);
	    return target.drawBitmap(targetSpaceDrawArea.locationMatrix, stagingBitmap, {
	      compositeMode: this._compositeMode,
	      opacity: this.opacity
	    });
	  };

	  Element.prototype._clippedDrawWithStagingBitmapInElementSpace = function(target, elementToTargetMatrix) {
	    var m, s, stagingBitmap;
	    s = elementToTargetMatrix.getExactScale();
	    stagingBitmap = this._renderStagingBitmap(rect(0, 0, this._currentSize.x * s.x, this._currentSize.y * s.y), m = Matrix.scale(s));
	    return target.drawBitmap(m.inv.mul(elementToTargetMatrix), stagingBitmap, {
	      compositeMode: this._compositeMode,
	      opacity: this.opacity
	    });
	  };

	  Element.prototype._fullDraw = function(targetSpaceDrawArea, target, elementToTargetMatrix) {
	    if (this._clip) {
	      return this._clipDraw(targetSpaceDrawArea, target, elementToTargetMatrix);
	    } else if (this._useStagingBitmap()) {
	      return this._drawWithStagingBitmap(targetSpaceDrawArea, target, elementToTargetMatrix);
	    } else {
	      return this._drawChildren(target, elementToTargetMatrix);
	    }
	  };

	  Element.prototype._clipDraw = function(clipArea, target, elementToTargetMatrix) {
	    if (!elementToTargetMatrix.getIsTranslateAndScaleOnly() || this._useStagingBitmap()) {
	      return this._clippedDrawWithStagingBitmapInElementSpace(target, elementToTargetMatrix);
	    } else {
	      return target.clippedTo(clipArea, (function(_this) {
	        return function() {
	          return _this._drawChildren(target, elementToTargetMatrix);
	        };
	      })(this));
	    }
	  };

	  Element.getter({
	    hasCustomClipping: function() {
	      return false;
	    }
	  });

	  Element.prototype.draw = function(target, elementToTargetMatrix) {
	    var targetSpaceDrawArea;
	    stats.elementsDrawn++;
	    try {
	      if (this.opacity < 1 / 256) {
	        return;
	      }
	      this._currentDrawTarget = target;
	      this._currentToTargetMatrix = elementToTargetMatrix;
	      targetSpaceDrawArea = this.drawAreaIn(elementToTargetMatrix).intersection(target.getClippingArea());
	      if (targetSpaceDrawArea.area > 0) {
	        return this._cachedFullDraw(targetSpaceDrawArea, target, elementToTargetMatrix);
	      }
	    } finally {
	      this._currentDrawTarget = this._currentToTargetMatrix = null;
	    }
	  };

	  Element.prototype.preCache = function() {
	    var child, j, len, ref, sum;
	    sum = 0;
	    if (this.getCacheDraw()) {
	      if (this._drawCacheBitmap) {

	      } else {
	        this._generateDrawCache();
	        sum++;
	      }
	    } else {
	      ref = this.getChildren();
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        sum += child.preCache();
	      }
	    }
	    return sum;
	  };

	  Element.prototype.whenCached = function(callback) {
	    return this.getCanvasElement().queueDrawEpochPreprocessor((function(_this) {
	      return function() {
	        _this.preCache();
	        return drawEpoch.onNextReady(callback);
	      };
	    })(this));
	  };

	  Element.prototype._initDrawCache = function() {
	    this._drawCacheBitmap = null;
	    this._drawCacheBitmapInvalid = false;
	    this._elementDrawChangedThisFrame = true;
	    this._drawCacheToElementMatrix = null;
	    this._uncachableDrawCount = 0;
	    return this._cachableDrawCount = 0;
	  };

	  Element.prototype._drawPropertiesChanged = function() {
	    if (this._drawCacheBitmap) {
	      this._clearDrawCache();
	    }
	    return this._elementDrawChangedThisFrame = true;
	  };

	  Element.prototype._elementToParentMatrixChanged = function(oldElementToParentMatrix) {};

	  Element.prototype._needsRedrawing = function(descendant) {
	    var ref;
	    if (descendant == null) {
	      descendant = this;
	    }
	    if (this._drawCacheBitmap) {
	      this._clearDrawCache();
	    }
	    this._elementDrawChangedThisFrame = true;
	    if (this.getPendingVisible() && this.getPendingOpacity() > 1 / 512) {
	      return (ref = this.getPendingParent()) != null ? ref._needsRedrawing(descendant) : void 0;
	    }
	  };


	  /*
	  
	  When clearing drawCaching for this branch of the AIM, we stop recursing
	  down a sub-branch when we hit an existing drawCache. When a drawCache is
	  created, all its children's drawCaches are removed. Therefor when a
	  drawCache exists, all children are drawCache free.
	   */

	  Element.prototype.__clearDrawCacheCallbackFromDrawCacheManager = function() {
	    return this._drawCacheBitmap = null;
	  };

	  Element.prototype._clearDrawCache = function(force) {
	    if (this._cacheDraw === "locked") {
	      this._drawCacheBitmapInvalid = true;
	      return;
	    }
	    if (this._drawCacheBitmap) {
	      drawCacheManager.doneWithCacheBitmap(this);
	    }
	    return null;
	  };

	  Element.prototype._releaseAllCacheBitmaps = function() {
	    var child, count, j, len, ref;
	    count = 0;
	    if (this._drawCacheBitmap) {
	      drawCacheManager.doneWithCacheBitmap(this);
	      count++;
	    }
	    ref = this._children;
	    for (j = 0, len = ref.length; j < len; j++) {
	      child = ref[j];
	      count += child._releaseAllCacheBitmaps();
	    }
	    return count;
	  };

	  Element._drawCachingEnabled = drawCachingEnabled;

	  Element.prototype._generateDrawCache = function() {
	    var _drawCachingEnabled, cacheDrawArea, drawArea, pixelsPerPoint;
	    globalEpochCycle.logEvent("generateDrawCache", "same-id");
	    drawArea = this.getElementSpaceDrawArea().roundOut();
	    if (drawArea.getArea() <= 0) {
	      return;
	    }
	    pixelsPerPoint = this.getDevicePixelsPerPoint();
	    cacheDrawArea = drawArea.mul(pixelsPerPoint);
	    if (cacheDrawArea.size.area > 2048 * 768 * 2) {
	      return;
	    }
	    this._clearDrawCache();
	    this._drawCacheToElementMatrix = Matrix.translateXY(-drawArea.x, -drawArea.y).scale(pixelsPerPoint).inv;
	    if (!cacheAggressively) {
	      _drawCachingEnabled = Element._drawCachingEnabled;
	      Element._drawCachingEnabled = false;
	    }
	    this._drawCacheBitmap = this._renderStagingBitmap(cacheDrawArea, Matrix.scale(pixelsPerPoint), drawCacheManager.allocateCacheBitmap(this, cacheDrawArea.size));
	    this._drawCacheBitmapInvalid = false;
	    if (!cacheAggressively) {
	      return Element._drawCachingEnabled = _drawCachingEnabled;
	    }
	  };


	  /*
	  TODO:
	  
	    Support for "pixel-exact-caching":
	  
	      If @_useStagingBitmap() is true, we should cache even if _cacheDraw is false.
	  
	      NOTE: cached bitmaps are automatically released and recycled as needed, so over-caching
	        is only a question of overhead. In the case where we are going to generate
	        a staging bitmap ANYWAY, there IS no overhead - just keep the results around in case
	        we need it next time.
	  
	      HOWEVER, this is currently a problem because _generateDrawCache always generates
	      a cache bitmap at a fixed scale - the devicePixelsPerPoint.
	  
	      This can be very wrong. Example: With the Flashy Text-renderer in the Kimi-editor the rendered
	      resolution becomes rediculously low - 1/10th the desired resolution or so.
	  
	      So, we need the option to always cache in such a way that is pixel-exact with would would
	      have been output without caching. If the the draw-matrix changes in anyway other than whole
	      pixel translations then the cache should be invalidated and redrawn.
	  
	      We still want the current mode, which renders the draw-cache at the element's logical size
	      multipled by the devicePixelsPerPoint. This is faster, and often not a quality concern.
	  
	      Additional options:
	        We may add another option which lets of add a "cache-at" scale factor to force lower or
	        higher resolution caching.
	  
	        In the old C++ Art.Engine we had a global "fast" mode where caches were not invalidated under
	        any draw-matrix changes until fast-mode was turned off, then a final redraw pass was made
	        where pixel-inexact caches were invalidated and redrawn. This allowed good user interactivity
	        followed by maximum quality renders. This was handy for the more general-purpose Kimi-editor,
	        for for the current purpose-built kimi-editor, it isn't needed.
	   */

	  Element.prototype._generateDrawCacheIfNeeded = function() {
	    var _cacheDraw;
	    _cacheDraw = this._cacheDraw;
	    if (_cacheDraw && this._useStagingBitmap() && this._elementDrawChangedThisFrame) {
	      this._elementDrawChangedThisFrame = false;
	      this._generateDrawCache();
	      return true;
	    } else if (!_cacheDraw) {
	      if (this._drawCacheBitmap) {
	        this._clearDrawCache();
	      }
	      return false;
	    } else if (_cacheDraw === 'locked' && this._drawCacheBitmap) {
	      return false;
	    } else if (this._elementDrawChangedThisFrame && _cacheDraw === "auto") {
	      this._uncachableDrawCount++;
	      this._elementDrawChangedThisFrame = false;
	      return false;
	    } else {
	      this._cachableDrawCount++;
	      if ((!this._drawCacheBitmap || this._drawCacheBitmapInvalid) && Element._drawCachingEnabled && this.getCacheable() && (_cacheDraw !== "auto" || this._cachableDrawCount >= this._uncachableDrawCount)) {
	        this._generateDrawCache();
	        return true;
	      }
	    }
	  };

	  Element.prototype._cachedFullDraw = function(targetSpaceDrawArea, target, elementToTargetMatrix) {
	    var drawCacheToTargetMatrix;
	    this._generateDrawCacheIfNeeded();
	    if (this._drawCacheBitmap) {
	      drawCacheManager.useDrawCache(this);
	      drawCacheToTargetMatrix = this._drawCacheToElementMatrix.mul(elementToTargetMatrix);
	      return target.drawBitmap(drawCacheToTargetMatrix, this._drawCacheBitmap, {
	        opacity: this.opacity,
	        compositeMode: this.compositeMode
	      });
	    } else {
	      return this._fullDraw(targetSpaceDrawArea, target, elementToTargetMatrix);
	    }
	  };

	  Element.getter({
	    cacheable: function() {
	      return true;
	    }
	  });


	  /*
	  Creates and returns an bitmap with the current element drawn on it
	  options: [defaults]
	    backgroundColor: [transparent]  #
	    area: ["drawArea"]
	      "logicalArea"         means => drawArea: @logicalArea,                  elementToDrawAreaMatrix: identityMatrix
	      "paddedArea"          means => drawArea: @paddedArea,                   elementToDrawAreaMatrix: identityMatrix
	      "drawArea"            means => drawArea: @elementSpaceDrawArea,         elementToDrawAreaMatrix: identityMatrix
	      "parentLogicalArea"   means => drawArea: @parent.logicalArea,           elementToDrawAreaMatrix: @elementToParentMatrix
	      "parentPaddedArea"    means => drawArea: @parent.paddedArea,            elementToDrawAreaMatrix: @elementToParentMatrix
	      "parentDrawArea"      means => drawArea: @parent.elementSpaceDrawArea,  elementToDrawAreaMatrix: @elementToParentMatrix
	      "targetDrawArea"    to be used with custom elementToDrawAreaMatrix - sets drawArea to include @elementSpaceDrawArea in the specificed target-space
	    size: [drawArea.size]     # Bitmap size. Will be multiplied by pixelsPerPoint for the final size.
	    mode: ["fit"], "zoom"     # determines how the requested drawArea is scaled to fit the bitmap size
	    pixelsPerPoint: [1]       # Ex: set to "2" for "retina" images [default = 1]
	    elementToDrawAreaMatrix:  # the draw matrix [see area's defaults]
	    drawArea: [see area]      # the area to capture in drawArea-space (overrides area's drawArea)
	    bitmapFactory: [null]     # overrides default bitmapFactory
	  
	  OUT promise.then ({bitmap, elementToBitmapMatrix}) ->
	   */

	  Element.prototype.toBitmap = function(options, callback) {
	    if (options == null) {
	      options = {};
	    }
	    if (callback) {
	      console.error("callback DEPRICATED; toBitmap returns Promise now");
	    }
	    if (options.elementSpaceDrawArea) {
	      throw new Error("elementSpaceDrawArea option depricated");
	    }
	    return new Promise((function(_this) {
	      return function(resolve) {
	        return stateEpoch.onNextReady(function() {
	          var results;
	          resolve(results = _this.toBitmapSync(options));
	          return typeof callback === "function" ? callback(results.bitmap, results.elementToBitmapMatrix) : void 0;
	        });
	      };
	    })(this));
	  };

	  Element.prototype.toBitmapSync = function(options) {
	    var areaOptions, backgroundColor, bitmap, bitmapFactory, drawArea, elementToBitmapMatrix, elementToDrawAreaMatrix, mode, oldBitmapFactory, pixelsPerPoint, ratio, scale, size;
	    if (options == null) {
	      options = {};
	    }
	    if (options.elementToDrawAreaMatrix && !options.area) {
	      options.area = "targetDrawArea";
	    }
	    areaOptions = (function() {
	      switch (options.area || "drawArea") {
	        case "logicalArea":
	          return {
	            drawArea: this.logicalArea,
	            elementToDrawAreaMatrix: identityMatrix
	          };
	        case "paddedArea":
	          return {
	            drawArea: this.paddedArea,
	            elementToDrawAreaMatrix: identityMatrix
	          };
	        case "drawArea":
	          return {
	            drawArea: this.elementSpaceDrawArea,
	            elementToDrawAreaMatrix: identityMatrix
	          };
	        case "parentLogicalArea":
	          return {
	            drawArea: this.parent.logicalArea,
	            elementToDrawAreaMatrix: this.elementToParentMatrix
	          };
	        case "parentPaddedArea":
	          return {
	            drawArea: this.parent.paddedArea,
	            elementToDrawAreaMatrix: this.elementToParentMatrix
	          };
	        case "parentDrawArea":
	          return {
	            drawArea: this.parent.elementSpaceDrawArea,
	            elementToDrawAreaMatrix: this.elementToParentMatrix
	          };
	        case "targetDrawArea":
	          return {
	            drawArea: this.drawAreaIn(options.elementToDrawAreaMatrix || identityMatrix),
	            elementToDrawAreaMatrix: identityMatrix
	          };
	        default:
	          throw new Error("invalid area option: " + options.area);
	      }
	    }).call(this);
	    options = merge(areaOptions, options);
	    drawArea = options.drawArea, elementToDrawAreaMatrix = options.elementToDrawAreaMatrix, size = options.size, mode = options.mode, bitmapFactory = options.bitmapFactory, pixelsPerPoint = options.pixelsPerPoint, backgroundColor = options.backgroundColor;
	    pixelsPerPoint || (pixelsPerPoint = 1);
	    mode || (mode = "fit");
	    size = point(size || drawArea.size).mul(pixelsPerPoint).ceil();
	    ratio = size.div(drawArea.size);
	    if (mode === "zoom") {
	      scale = ratio.max();
	    } else {
	      scale = ratio.min();
	      size = drawArea.size.mul(scale).ceil();
	    }
	    elementToBitmapMatrix = elementToDrawAreaMatrix.mul(Matrix.translate(drawArea.cc.neg).scale(scale).translate(size.cc));
	    oldBitmapFactory = this._bitmapFactory;
	    this._bitmapFactory = bitmapFactory || this.bitmapFactory;
	    bitmap = this.bitmapFactory.newBitmap(size);
	    bitmap.pixelsPerPoint = pixelsPerPoint;
	    if (backgroundColor) {
	      bitmap.clear(backgroundColor);
	    }
	    this.draw(bitmap, elementToBitmapMatrix);
	    this._bitmapFactory = oldBitmapFactory;
	    return {
	      bitmap: bitmap,
	      elementToBitmapMatrix: elementToBitmapMatrix
	    };
	  };

	  Element.prototype.logBitmap = function(options) {
	    if (options == null) {
	      options = {};
	    }
	    options.pixelsPerPoint || (options.pixelsPerPoint = this.devicePixelsPerPoint);
	    return this.toBitmap(options).then((function(_this) {
	      return function(arg) {
	        var bitmap;
	        bitmap = arg.bitmap;
	        return _this.log({
	          size: _this.currentSize,
	          location: _this.currentLocation,
	          size: _this.size,
	          location: _this.location,
	          elementToParentMatrix: _this.elementToParentMatrix,
	          bitmap: bitmap
	        });
	      };
	    })(this));
	  };

	  Element.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	    if (options == null) {
	      options = {};
	    }
	  };

	  Element.prototype.strokeShape = function(target, elementToTargetMatrix, options) {
	    if (options == null) {
	      options = {};
	    }
	  };

	  Element.prototype.compositingChanged = function() {
	    return this.getOpacityChanged() || this.getCompositeModeChanged();
	  };

	  Element.getter({
	    redrawRequired: function() {
	      var _pendingState;
	      _pendingState = this._pendingState;
	      return this.__drawPropertiesChanged || (this._opacity !== _pendingState._opacity) || (this._compositeMode !== _pendingState._compositeMode) || (this._parent !== _pendingState._parent) || (!this._currentSize.eq(_pendingState._currentSize)) || (!this._elementToParentMatrix.eq(_pendingState._elementToParentMatrix));
	    }
	  });

	  Element.prototype._setChildrenOnly = function(c) {
	    this._pendingState._children = c;
	    this._elementChanged();
	    return c;
	  };

	  Element.prototype._setParentOnly = function(p) {
	    this._pendingState._parent = p;
	    this._elementChanged();
	    return p;
	  };

	  Element.prototype._setLocationFromLayout = function(l) {
	    return this._setLocationFromLayoutXY(l.x, l.y);
	  };

	  Element.prototype._getElementToParentMatrixForXY = function(pending, x, y, withScale) {
	    var _angle, _axis, _currentPadding, _currentSize, _elementToParentMatrix, _scale, axis, axisXInElementSpace, axisYInElementSpace, currentX, currentY, left, ref, size, top;
	    ref = this.getState(pending), _currentPadding = ref._currentPadding, _currentSize = ref._currentSize, _axis = ref._axis, _scale = ref._scale, _angle = ref._angle, _elementToParentMatrix = ref._elementToParentMatrix;
	    if (withScale != null) {
	      _scale = point(withScale);
	    }
	    left = _currentPadding.left, top = _currentPadding.top;
	    size = _currentSize;
	    axis = _axis;
	    axisXInElementSpace = axis.x * size.x - left;
	    axisYInElementSpace = axis.y * size.y - top;
	    if (this._locationLayoutDisabled) {
	      currentX = _elementToParentMatrix.transformX(axisXInElementSpace, axisYInElementSpace);
	      currentY = _elementToParentMatrix.transformY(axisXInElementSpace, axisYInElementSpace);
	      return _elementToParentMatrix.translate(x - currentX, y - currentY);
	    } else {
	      return (new Matrix).translateXY(-axisXInElementSpace, -axisYInElementSpace, true).scale(_scale, true).rotate(_angle, true).translateXY(x, y, true);
	    }
	  };

	  Element.prototype._setLocationFromLayoutXY = function(x, y) {
	    var e2p;
	    if (this._locationLayoutDisabled) {
	      return;
	    }
	    e2p = this._getElementToParentMatrixForXY(true, x, y);
	    if (!this._pendingState._elementToParentMatrix.eq(e2p)) {
	      this._pendingState._elementToParentMatrix = e2p;
	      this._elementChanged();
	    }
	    return this;
	  };

	  Element.prototype._sizeDirectlyEffectsDrawing = function() {
	    var c;
	    return ((c = this.getPendingChildren()) && c.length === 0) || this.getPendingClip();
	  };

	  Element.prototype._setSizeFromLayout = function(s) {
	    var x, y;
	    x = s.x, y = s.y;
	    if (!s.eq(this.getPendingCurrentSize())) {
	      this._pendingState._currentSize = s;
	      if (this._sizeDirectlyEffectsDrawing()) {
	        this.__drawPropertiesChanged = true;
	      }
	      this._elementChanged();
	      return s;
	    }
	  };

	  Element.prototype._setPaddingFromLayout = function(p) {
	    this._pendingState._currentPadding = p;
	    this._elementChanged();
	    return p;
	  };

	  Element.prototype._setMarginFromLayout = function(m) {
	    this._pendingState._currentMargin = m;
	    this._elementChanged();
	    return m;
	  };

	  Element.prototype._setElementToParentMatrixWithoutChangingLocation = function(m) {
	    var ax, axis, ay, o, size, x1, x2, y1, y2;
	    o = this._pendingState;
	    size = o._currentSize;
	    axis = o._axis;
	    ax = size.x * axis.x;
	    ay = size.y * axis.y;
	    x1 = o._elementToParentMatrix.transformX(ax, ay);
	    y1 = o._elementToParentMatrix.transformY(ax, ay);
	    x2 = m.transformX(ax, ay);
	    y2 = m.transformY(ax, ay);
	    return this.setElementToParentMatrix(m.translateXY(x1 - x2, y1 - y2));
	  };

	  Element.prototype.elementToElementMatrix = function(o) {
	    if (o === this) {
	      return matrix();
	    } else {
	      return this.getElementToAbsMatrix().mul(o.getAbsToElementMatrix());
	    }
	  };

	  Element.prototype.elementToTargetMatrix = function(parentToTargetMatrix) {
	    return this._elementToParentMatrix.mul(parentToTargetMatrix);
	  };


	  /*
	  returns:
	    if ancestor is not an actual ancestor to v
	      @elementToAbsMatrix.transform v
	    else
	      ancestor.absToElementMatrix.transform @elementToAbsMatrix.transform v
	  performance:
	    only creates one object, the returned point, no matter how far away the ancestor is.
	   */

	  Element.prototype.transformToAncestorSpace = function(v, ancestor) {
	    var element, x, x1, y, y1;
	    x = v.x, y = v.y;
	    element = this;
	    while (element) {
	      x1 = element._elementToParentMatrix.transformX(x, y);
	      y1 = element._elementToParentMatrix.transformY(x, y);
	      x = x1;
	      y = y1;
	      element = element.parent;
	      if (element === ancestor) {
	        return point(x, y);
	      }
	    }
	    return null;
	  };

	  Element.prototype.transformToAncestorSpaceX = function(v, ancestor) {
	    var element, x, y;
	    if (isPoint(v)) {
	      x = v.x, y = v.y;
	    } else {
	      x = v;
	      y = 0;
	    }
	    element = this;
	    while (element) {
	      x = element._elementToParentMatrix.transformX(x, y);
	      y = element._elementToParentMatrix.transformY(x, y);
	      element = element.parent;
	      if (element === ancestor) {
	        return x;
	      }
	    }
	    return null;
	  };

	  Element.prototype.transformToAncestorSpaceY = function(v, ancestor) {
	    var element, x, y;
	    if (isPoint(v)) {
	      x = v.x, y = v.y;
	    } else {
	      x = 0;
	      y = v;
	    }
	    element = this;
	    while (element) {
	      x = element._elementToParentMatrix.transformX(x, y);
	      y = element._elementToParentMatrix.transformY(x, y);
	      element = element.parent;
	      if (element === ancestor) {
	        return y;
	      }
	    }
	    return null;
	  };

	  Element.prototype.pointInsideChildren = function(p) {
	    return !!(this._visible && !!this.childUnderPoint(this.getParentToElementMatrix().transform(p)));
	  };

	  Element.prototype.pointInside = function(p) {
	    var h, p2EM, padding, size, w, x, y;
	    return this._visible && !this.getIsMask() && (function() {
	      switch (this._receivePointerEvents) {
	        case "never":
	          return false;
	        case "passToChildren":
	          return this.pointInsideChildren(p);
	        case "inPaddedArea":
	          p2EM = this.getParentToElementMatrix();
	          size = this._currentSize;
	          padding = this._currentPadding;
	          x = p2EM.transformX(p.x, p.y);
	          y = p2EM.transformY(p.x, p.y);
	          w = size.x - padding.getWidth();
	          h = size.y - padding.getHeight();
	          return x >= 0 && y >= 0 && x < w && y < h;
	        case "inLogicalArea":
	          p2EM = this.getParentToElementMatrix();
	          size = this._currentSize;
	          padding = this._currentPadding;
	          x = p2EM.transformX(p.x, p.y);
	          y = p2EM.transformY(p.x, p.y);
	          x += padding.left;
	          y += padding.top;
	          w = size.x;
	          h = size.y;
	          return x >= 0 && y >= 0 && x < w && y < h;
	      }
	    }).call(this);
	  };

	  Element.prototype.childUnderPoint = function(pointInElementSpace) {
	    var child, j, ref;
	    ref = this._children;
	    for (j = ref.length - 1; j >= 0; j += -1) {
	      child = ref[j];
	      if (child.pointInside(pointInElementSpace)) {
	        return child;
	      }
	    }
	    return false;
	  };

	  Element.prototype.drawAreaIn = function(elementToTargetMatrix) {
	    return elementToTargetMatrix.transformBoundingRect(this.getElementSpaceDrawArea());
	  };

	  Element.prototype._computeElementSpaceDrawArea = function(upToChild) {
	    var child, children, elementSpaceChildDrawArea, elementSpaceDrawArea, j, len;
	    if ((children = this.getPendingChildren()).length > 0 && !this.getPendingClip()) {
	      elementSpaceDrawArea = rect();
	      for (j = 0, len = children.length; j < len; j++) {
	        child = children[j];
	        if (child === upToChild) {
	          break;
	        }
	        elementSpaceChildDrawArea = child.getParentSpaceDrawArea();
	        switch (child.compositeMode) {
	          case "alphamask":
	            elementSpaceChildDrawArea.intersectInto(elementSpaceDrawArea);
	            break;
	          case "sourcein":
	          case "target_alphamask":
	          case "inverse_alphamask":
	          case "sourceIn":
	          case "targetAlphamask":
	          case "inverseAlphamask":
	            null;
	            break;
	          case "normal":
	          case "add":
	          case "destover":
	          case "replace":
	          case "destOver":
	            elementSpaceChildDrawArea.unionInto(elementSpaceDrawArea);
	            break;
	          default:
	            throw new Error("unknown compositeMode:" + child.compositeMode);
	        }
	      }
	      return elementSpaceDrawArea;
	    } else {

	      /*
	      TODO: should we find out if we even actually need "pending"?
	      
	      Someday parent layout will have the option to be relative to children's draw area.
	      Probably also the case that children could be relative to parent's draw area.
	      
	      USE-CASE: Imikimi's Font effects - fills need to, say, cover all of an outline
	        which requires them to cover the outline's drawarea
	       */
	      return this.getPendingBaseDrawArea();
	    }
	  };

	  Element.prototype._drawAreaChanged = function() {
	    var p;
	    if (this._elementSpaceDrawArea) {
	      this._elementSpaceDrawArea = null;
	      if (p = this.getPendingParent()) {
	        return p._childsDrawAreaChanged();
	      }
	    }
	  };

	  Element.prototype._childsDrawAreaChanged = function() {
	    if (!this.getPendingClip()) {
	      return this._drawAreaChanged();
	    }
	  };

	  Element.prototype.getChildIndex = function(child, pending) {
	    return this.getChildren(pending).indexOf(child);
	  };

	  Element.prototype.find = function(pattern, arg, matches) {
	    var child, findAll, functionResult, j, len, matchFound, ref, ref1, usedFunction, verbose;
	    ref = arg != null ? arg : {}, findAll = ref.findAll, verbose = ref.verbose;
	    if (matches == null) {
	      matches = [];
	    }
	    matchFound = (usedFunction = isFunction(pattern)) ? !!(functionResult = pattern(this)) : (this.pathStringWithNames + ":" + this.objectId).match(pattern);
	    if (matchFound) {
	      if (verbose) {
	        this.log(usedFunction ? {
	          found: this.inspectedNameWithoutIds,
	          functionResult: functionResult
	        } : {
	          found: this.inspectedNameWithoutIds,
	          pattern: pattern,
	          matched: this.pathStringWithNames
	        });
	      }
	      matches.push(this);
	    }
	    if (!matchFound || findAll) {
	      ref1 = this._children;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        child = ref1[j];
	        child.find(pattern, arguments[1], matches);
	      }
	    }
	    return matches;
	  };

	  Element.getter({
	    elementPath: function() {
	      if (this.parent) {
	        return this.parent.elementPath + " > " + this.classPathNameAndId;
	      } else {
	        return this.classPathNameAndId;
	      }
	    },
	    elementPathWithoutIds: function() {
	      if (this.parent) {
	        return this.parent.elementPath + " > " + this.classPathNameAndId;
	      } else {
	        return this.classPathNameAndId;
	      }
	    },
	    topMostParent: function() {
	      if (this._parent) {
	        return this._parent.topMostParent || this._parent;
	      } else {
	        return null;
	      }
	    },
	    hasChildren: function() {
	      return this._children.length > 0;
	    },
	    reverseChildren: function() {
	      return this._children.slice().reverse();
	    },
	    childrenMap: function() {
	      return (new Map).tap((function(_this) {
	        return function(map) {
	          var child, j, len, ref, results1;
	          ref = _this._children;
	          results1 = [];
	          for (j = 0, len = ref.length; j < len; j++) {
	            child = ref[j];
	            results1.push(map.set(child, true));
	          }
	          return results1;
	        };
	      })(this));
	    },
	    elementPath: function() {
	      var elementPath;
	      if (this.parent) {
	        elementPath = this.parent.elementPath;
	        elementPath.push(this);
	        return elementPath;
	      } else {
	        return [this];
	      }
	    },
	    pathIdString: function() {
	      var p;
	      return ((function() {
	        var j, len, ref, results1;
	        ref = this.elementPath;
	        results1 = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          p = ref[j];
	          results1.push(p.className + p.objectId);
	        }
	        return results1;
	      }).call(this)).join('/');
	    },
	    pathString: function() {
	      var p;
	      return ((function() {
	        var j, len, ref, results1;
	        ref = this.elementPath;
	        results1 = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          p = ref[j];
	          results1.push(p.className);
	        }
	        return results1;
	      }).call(this)).join('/');
	    },
	    pathStringWithNames: function() {
	      var p;
	      return ((function() {
	        var j, len, ref, results1;
	        ref = this.elementPath;
	        results1 = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          p = ref[j];
	          results1.push(p.inspectedNameWithoutIds);
	        }
	        return results1;
	      }).call(this)).join('/');
	    },
	    fullPathString: function() {
	      var p;
	      return ((function() {
	        var j, len, ref, results1;
	        ref = this.elementPath;
	        results1 = [];
	        for (j = 0, len = ref.length; j < len; j++) {
	          p = ref[j];
	          results1.push(p.classPathNameAndId);
	        }
	        return results1;
	      }).call(this)).join('/');
	    },
	    childrenInspectedNames: function() {
	      var c, j, len, ref, results1;
	      ref = this._children;
	      results1 = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        c = ref[j];
	        results1.push(c.inspectedName);
	      }
	      return results1;
	    }
	  });

	  childrenWithout = function(children, child) {
	    var index;
	    children = children.slice();
	    if ((index = children.indexOf(child)) >= 0) {
	      remove(children, index, 1);
	    }
	    return children;
	  };

	  Element.prototype.childrenWithout = function(child) {
	    return childrenWithout(this._children, child);
	  };

	  Element.prototype.pendingChildrenWithout = function(child) {
	    return childrenWithout(this.getPendingChildren(), child);
	  };

	  Element.prototype.insertChild = function(child, index) {
	    var children;
	    children = this.pendingChildrenWithout(child);
	    if (index < 0) {
	      index = children.length + 1 + index;
	    }
	    this.setChildren(insert(children, index, child));
	    return child;
	  };

	  Element.prototype.addChild = function(child) {
	    return this.insertChild(child, -1);
	  };

	  Element.prototype.addChildBelow = function(child, belowChild) {
	    var children;
	    if (!(belowChild !== child && indexOf.call(this.getPendingChildren(), belowChild) >= 0)) {
	      return this.insertChild(child, 0);
	    }
	    children = this.pendingChildrenWithout(child);
	    this.setChildren(insert(children, children.indexOf(belowChild), child));
	    return child;
	  };

	  Element.prototype.addChildAbove = function(child, aboveChild) {
	    var children;
	    if (!(aboveChild !== child && indexOf.call(this.getPendingChildren(), aboveChild) >= 0)) {
	      return this.insertChild(child, -1);
	    }
	    children = this.pendingChildrenWithout(child);
	    this.setChildren(insert(children, children.indexOf(aboveChild) + 1, child));
	    return child;
	  };

	  Element.prototype.addBelow = function(sibling) {
	    return sibling.getPendingParent().addChildBelow(this, sibling);
	  };

	  Element.prototype.addAbove = function(sibling) {
	    return sibling.getPendingParent().addChildAbove(this, sibling);
	  };

	  Element.prototype.addChildBelowMask = function(child) {
	    return this.addChildBelow(child, this.getPendingFirstMask());
	  };

	  Element.prototype.placeRelativeToSibling = function(siblingOrPair, offset) {
	    var children, parent, sibling;
	    if (siblingOrPair && siblingOrPair.constructor === Array) {
	      if (siblingOrPair.length !== 2) {
	        throw new Error("If array is provided, it must be formated: [parent, sibling]");
	      }
	      parent = siblingOrPair[0], sibling = siblingOrPair[1];
	      if (sibling && sibling.getPendingParent() !== parent) {
	        throw new Error("Sibling's current parent does not match specified parent. Did the sibling move?");
	      }
	    } else {
	      sibling = siblingOrPair;
	      parent = (sibling != null ? sibling.getPendingParent() : void 0) || this.getPendingParent();
	    }
	    if (!parent) {
	      if (!sibling) {
	        return this.setParent(null);
	      } else {
	        throw new Error("Can't place next to sibling. Sibling is an orphan.");
	      }
	    }
	    children = parent.pendingChildrenWithout(this);
	    return parent.setChildren(insert(children, children.indexOf(sibling) + offset, this));
	  };

	  Element.prototype.removeChild = function(child) {
	    if (!child) {
	      return;
	    }
	    this.setChildren(this.pendingChildrenWithout(child));
	    return child;
	  };

	  Element.prototype.releaseChildren = function() {
	    return this.setChildren([]);
	  };

	  Element.prototype.removeFromParent = function() {
	    var p, ref;
	    if ((ref = (p = this.getPendingParent())) != null) {
	      ref.removeChild(this);
	    }
	    return p;
	  };

	  Element.prototype.moveChildToFront = function(child) {
	    return this.insertChild(child, -1);
	  };

	  Element.prototype.moveChildToBack = function(child) {
	    return this.insertChild(child, 0);
	  };

	  Element.prototype.moveToFront = function() {
	    var ref;
	    return (ref = this.getPendingParent()) != null ? ref.insertChild(this, -1) : void 0;
	  };

	  Element.prototype.moveToBack = function() {
	    var ref;
	    return (ref = this.getPendingParent()) != null ? ref.insertChild(this, 0) : void 0;
	  };

	  Element.prototype.moveBelow = function(sibling) {
	    var ref;
	    return sibling != null ? (ref = sibling.getPendingParent()) != null ? ref.addChildBelow(this, sibling) : void 0 : void 0;
	  };

	  Element.prototype.moveBelowMask = function() {
	    var ref;
	    return (ref = this.getPendingParent()) != null ? ref.addChildBelowMask(this) : void 0;
	  };

	  Element.prototype._sizeChanged = function(newSize, oldSize) {
	    return this.queueEvent("sizeChanged", {
	      oldSize: oldSize,
	      size: newSize
	    });
	  };

	  Element.prototype._applyStateChanges = function() {
	    var oldElementToParentMatrix, releaseCount;
	    if (this.getCurrentSizeChanged()) {
	      this._sizeChanged(this._pendingState._currentSize, this._currentSize);
	    }
	    if (this.getElementToParentMatrixChanged()) {
	      oldElementToParentMatrix = this._elementToParentMatrix;
	    }
	    Element.__super__._applyStateChanges.apply(this, arguments);
	    if (this.__drawAreaChanged) {
	      this._drawAreaChanged();
	    }
	    if (this.__drawPropertiesChanged) {
	      this._drawPropertiesChanged();
	    }
	    if (oldElementToParentMatrix) {
	      this._elementToParentMatrixChanged(oldElementToParentMatrix);
	    }
	    this.__drawAreaChanged = false;
	    this.__redrawRequired = false;
	    this.__drawPropertiesChanged = false;
	    this.__layoutPropertiesChanged = false;
	    if (!this._parent) {
	      return releaseCount = this._releaseAllCacheBitmaps();
	    }
	  };

	  Element.prototype._layoutPropertiesChanged = function() {};

	  Element.prototype._updateDrawArea = function() {};

	  Element.prototype._layoutSize = function(parentSize, childrenSize) {
	    return this.getPendingSize().layout(parentSize, childrenSize);
	  };

	  Element.prototype._layoutLocation = function(parentSize) {
	    return this.getPendingLocation().layout(parentSize);
	  };

	  Element.prototype._layoutLocationX = function(parentSize) {
	    return this.getPendingLocation().layoutX(parentSize);
	  };

	  Element.prototype._layoutLocationY = function(parentSize) {
	    return this.getPendingLocation().layoutY(parentSize);
	  };

	  Element.prototype._sizeForChildren = function(size) {
	    return this.getPendingCurrentPadding().subtractedFromSize(size);
	  };

	  Element.prototype.depth = function() {
	    if (this.parent) {
	      return this.parent.depth() + 1;
	    } else {
	      return 1;
	    }
	  };

	  Element.getter({
	    focused: function() {
	      var c;
	      return (c = this.getCanvasElement()) && c.isFocused(this);
	    }
	  });

	  Element.prototype.focus = function() {
	    var ref;
	    return (ref = this.getCanvasElement()) != null ? ref.focusElement(this) : void 0;
	  };

	  Element.prototype.blur = function() {
	    var ref;
	    if (!this.focused) {
	      return;
	    }
	    return (ref = this.getCanvasElement()) != null ? ref.focusElement(this.parent) : void 0;
	  };

	  Element.prototype.capturePointerEvents = function() {
	    var ref;
	    return (ref = this.getCanvasElement()) != null ? ref.capturePointerEvents(this) : void 0;
	  };

	  Element.getter({
	    pointerEventsCaptured: function() {
	      var ref;
	      return (ref = this.getCanvasElement()) != null ? ref.pointerEventsCapturedBy(this) : void 0;
	    }
	  });

	  return Element;

	})(ElementBase));


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	Useful ideas about optimizing animations and garbage collection: http://blog.artillery.com/2012/10/browser-garbage-collection-and-framerate.html

	See Foundation.Transaction for most constructor options.

	from-values are either explicitly specified in the constructor, or any other properties defined
	  in the constructor will have their from-values saved during construction.

	The animation is automatically started on construction UNLESS there are no to-values.
	If there are no to-values specified, then you must manually, later, call "start". At that point, all to-values
	are set to the current values.
	 */
	var Animator, BaseObject, Color, EasingFunctions, Event, EventEpoch, EventedObject, Matrix, Point, Rectangle, Transaction, color, currentSecond, eventEpoch, inspect, inspectLean, log, matrix, max, min, point, rect, ref, ref1, ref2,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(11), currentSecond = ref.currentSecond, min = ref.min, max = ref.max, Transaction = ref.Transaction, inspect = ref.inspect, inspectLean = ref.inspectLean, log = ref.log, BaseObject = ref.BaseObject;

	ref1 = __webpack_require__(93), color = ref1.color, Color = ref1.Color, point = ref1.point, Point = ref1.Point, rect = ref1.rect, Rectangle = ref1.Rectangle, matrix = ref1.matrix, Matrix = ref1.Matrix;

	ref2 = __webpack_require__(135), Event = ref2.Event, EventEpoch = ref2.EventEpoch, EventedObject = ref2.EventedObject;

	EasingFunctions = __webpack_require__(150);

	eventEpoch = EventEpoch.eventEpoch;

	module.exports = Animator = (function(superClass) {
	  extend(Animator, superClass);

	  Animator.include(EventedObject);

	  Animator.animate = function(objects, options) {
	    return new Animator(objects, options);
	  };

	  function Animator(objects, options) {
	    if (options == null) {
	      options = {};
	    }
	    Animator.__super__.constructor.apply(this, arguments);
	    this.transaction = new Transaction(objects, options);
	    this.fixedStep = options.fixedStep;
	    if (this.fixedStep && this.fixedStep <= 0) {
	      throw new Error("fixedStep must be > 0");
	    }
	    this.duration = options.duration || 0.25;
	    this.f = options.f;
	    if (!this.f) {
	      this.f = EasingFunctions[this.fName = "easeInQuad"];
	    } else if (typeof this.f === "string") {
	      this.fName = this.f;
	      this.f = EasingFunctions[this.f];
	    } else {
	      this.fName = "custom";
	    }
	    if (options.on) {
	      this.on(options.on);
	    }
	    this.then = options.then;
	    this.start();
	  }

	  Animator.prototype.inspect = function(inspector) {
	    inspector.put(this.classPathName);
	    inspector.put(" duration: " + this.duration + ", function: " + this.fName);
	    if (this.activated) {
	      inspector.put(", activated, frames: " + this.frames + ", pos: " + this.pos);
	    }
	    if (this.aborted) {
	      inspector.put(", aborted");
	    }
	    if (this.deactivated) {
	      inspector.put(", deactivated");
	    }
	    return this.transaction.inspectParts(inspector);
	  };

	  Animator.prototype.abort = function() {
	    if (!this.aborted) {
	      eventEpoch.logEvent("animationAborted", this.getObjectId());
	      this.aborted = true;
	      this.deactivateAnimation();
	      return this.queueEvent("abort");
	    }
	  };

	  Animator.prototype.start = function() {
	    this.transaction.saveFromValues();
	    this.transaction.saveToValues();
	    this.transaction.optimize();
	    this.updateValues(0);
	    this.activateAnimation();
	    this.frames = 0;
	    return eventEpoch.queue((function(_this) {
	      return function() {
	        if (_this.deactivated) {
	          return;
	        }
	        _this.updateValues(0);
	        eventEpoch.logEvent("animation", _this.getObjectId());
	        _this.startTime = currentSecond();
	        _this.queueEvent("start");
	        return eventEpoch.queue(function() {
	          return _this.advance();
	        });
	      };
	    })(this));
	  };

	  Animator.prototype.finish = function() {
	    this.updateValues(1);
	    return this.done();
	  };

	  Animator.getter({
	    pos: function() {
	      if (this.fixedStep) {
	        return this.frames * this.fixedStep;
	      } else {
	        return (this.now - this.startTime) / this.duration;
	      }
	    },
	    objects: function() {
	      return this.transaction.objects;
	    }
	  });

	  Animator.prototype.activateAnimation = function() {
	    var animatedObject, i, len, ref3, results;
	    if (this.activated) {
	      return;
	    }
	    this.activated = true;
	    ref3 = this.objects;
	    results = [];
	    for (i = 0, len = ref3.length; i < len; i++) {
	      animatedObject = ref3[i];
	      if (animatedObject._activeAnimator) {
	        animatedObject._activeAnimator.abort();
	      }
	      results.push(animatedObject._activeAnimator = this);
	    }
	    return results;
	  };

	  Animator.prototype.deactivateAnimation = function() {
	    var animatedObject, i, len, ref3, results;
	    if (this.deactivated) {
	      return;
	    }
	    this.deactivated = true;
	    ref3 = this.objects;
	    results = [];
	    for (i = 0, len = ref3.length; i < len; i++) {
	      animatedObject = ref3[i];
	      if (animatedObject._activeAnimator !== this) {
	        this.log("INTERNAL WARNING - animatedObject._activeAnimator should == @");
	        this.log("  animatedObject: (" + (inspect(animatedObject, 1)));
	        this.log("  animatedObject._activeAnimator: (" + (inspect(animatedObject._activeAnimator, 1)));
	        this.log("  @: (" + (inspect(this, 1)));
	      }
	      results.push(delete animatedObject._activeAnimator);
	    }
	    return results;
	  };

	  Animator.prototype.advance = function() {
	    var pos;
	    if (this.aborted || this.deactivated) {
	      return;
	    }
	    this.frames++;
	    this.now = currentSecond();
	    pos = this.pos;
	    if (pos < 1) {
	      this.updateValues(this.f(pos));
	      return eventEpoch.queue((function(_this) {
	        return function() {
	          return _this.advance();
	        };
	      })(this));
	    } else {
	      this.updateValues(1);
	      return this.done();
	    }
	  };

	  Animator.prototype.done = function() {
	    if (this.aborted) {
	      return;
	    }
	    eventEpoch.logEvent("animation", this.getObjectId());
	    this.deactivateAnimation();
	    this.queueEvent("done");
	    return this.nextAnimation();
	  };

	  Animator.prototype.nextAnimation = function() {
	    var objects;
	    if (!this.then) {
	      return;
	    }
	    objects = this.then.objects || this.then.object || this.objects;
	    return new Animator(objects, this.then);
	  };

	  Animator.prototype.updateValues = function(p) {
	    this.transaction.interpolate(p);
	    return this.queueEvent("update", {
	      p: p
	    });
	  };

	  return Animator;

	})(BaseObject);


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = ((function(_this) {
	  return function() {
	    var EasingFunctions;
	    return EasingFunctions = (function() {
	      function EasingFunctions() {}

	      EasingFunctions.linear = function(t) {
	        return t;
	      };

	      EasingFunctions.easeOutQuad = function(t) {
	        return t * t;
	      };

	      EasingFunctions.easeInQuad = function(t) {
	        return -t * (t - 2);
	      };

	      EasingFunctions.easeBothQuad = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutQuad(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInQuad(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutCubic = function(t) {
	        return t * t * t;
	      };

	      EasingFunctions.easeInCubic = function(t) {
	        return (t = t - 1) * t * t + 1;
	      };

	      EasingFunctions.easeBothCubic = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutCubic(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInCubic(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutQuart = function(t) {
	        return t * t * t * t;
	      };

	      EasingFunctions.easeInQuart = function(t) {
	        return -((t = t - 1) * t * t * t - 1);
	      };

	      EasingFunctions.easeBothQuart = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutQuart(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInQuart(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutQuint = function(t) {
	        return 1 * t * t * t * t * t;
	      };

	      EasingFunctions.easeInQuint = function(t) {
	        return 1 * ((t = t - 1) * t * t * t * t + 1);
	      };

	      EasingFunctions.easeBothQuint = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutQuint(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInQuint(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutSine = function(t) {
	        return -Math.cos(t * Math.PI / 2) + 1;
	      };

	      EasingFunctions.easeInSine = function(t) {
	        return Math.sin(t * Math.PI / 2);
	      };

	      EasingFunctions.easeBothSine = function(t) {
	        return -.5 * (Math.cos(Math.PI * t) - 1);
	      };

	      EasingFunctions.easeOutExp = function(t) {
	        if (t <= 0) {
	          return 0;
	        } else {
	          return Math.pow(2, 10 * (t - 1));
	        }
	      };

	      EasingFunctions.easeInExp = function(t) {
	        if (t >= 1) {
	          return 1;
	        } else {
	          return -Math.pow(2, -10 * t) + 1;
	        }
	      };

	      EasingFunctions.easeBothExp = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutExp(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInExp(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutCirc = function(t) {
	        return -(Math.sqrt(1 - t * t) - 1);
	      };

	      EasingFunctions.easeInCirc = function(t) {
	        return Math.sqrt(1 - (t -= 1) * t);
	      };

	      EasingFunctions.easeBothCirc = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutCirc(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInCirc(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutElastic = function(t) {
	        var p, s;
	        if (t <= 0) {
	          return 0;
	        }
	        if (t >= 1) {
	          return 1;
	        }
	        p = .3;
	        s = p / 4;
	        t -= 1;
	        return -Math.pow(2, 10 * t) * Math.sin((t - s) * (2 * Math.PI) / p);
	      };

	      EasingFunctions.easeInElastic = function(t) {
	        var p, s;
	        if (t <= 0) {
	          return 0;
	        }
	        if (t >= 1) {
	          return 1;
	        }
	        p = .3;
	        s = p / 4;
	        return Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
	      };

	      EasingFunctions.easeBothElastic = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutElastic(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInElastic(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutBack = function(t, s) {
	        if (s == null) {
	          s = 1.70158;
	        }
	        return t * t * ((s + 1) * t - s);
	      };

	      EasingFunctions.easeInBack = function(t, s) {
	        if (s == null) {
	          s = 1.70158;
	        }
	        return (t = t - 1) * t * ((s + 1) * t + s) + 1;
	      };

	      EasingFunctions.easeBothBack = function(t, s) {
	        if (t < .5) {
	          return EasingFunctions.easeOutBack(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInBack(t * 2 - 1) * .5 + .5;
	        }
	      };

	      EasingFunctions.easeOutBounce = function(t) {
	        return 1 - EasingFunctions.easeInBounce(1 - t);
	      };

	      EasingFunctions.easeInBounce = function(t) {
	        if (t < 1 / 2.75) {
	          return 7.5625 * t * t;
	        } else if (t < 2 / 2.75) {
	          return 7.5625 * (t -= 1.5 / 2.75) * t + .75;
	        } else if (t < 2.5 / 2.75) {
	          return 7.5625 * (t -= 2.25 / 2.75) * t + .9375;
	        } else {
	          return 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	        }
	      };

	      EasingFunctions.easeBothBounce = function(t) {
	        if (t < .5) {
	          return EasingFunctions.easeOutBounce(t * 2) * .5;
	        } else {
	          return EasingFunctions.easeInBounce(t * 2 - 1) * .5 + .5;
	        }
	      };

	      return EasingFunctions;

	    })();
	  };
	})(this)), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var Layout;

	module.exports = Layout = __webpack_require__(152);

	Layout.InterpolatedLayout = __webpack_require__(153);

	Layout.InterpolatedPointLayout = __webpack_require__(155);

	Layout.LayoutBase = __webpack_require__(154);

	Layout.LinearLayout = __webpack_require__(157);

	Layout.PointLayout = __webpack_require__(158);

	Layout.PointLayoutBase = __webpack_require__(156);

	Layout.finishLoad(["InterpolatedLayout", "InterpolatedPointLayout", "LayoutBase", "LinearLayout", "PointLayout", "PointLayoutBase"]);


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Layout || (Engine.Layout = (function(superClass) {
	  extend(Layout, superClass);

	  function Layout() {
	    return Layout.__super__.constructor.apply(this, arguments);
	  }

	  Layout.namespace = Engine;

	  Layout.namespacePath = "Neptune.Art.Engine.Layout";

	  return Layout;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Layout);


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(154)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, LayoutBase) {
	  var Matrix, Point, Rectangle, clone, compact, flatten, inspect, inspectLean, isPlainObject, log, matrix, max, min, point, point0, rect, rubyOr, time;
	  rubyOr = Foundation.Ruby.or;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  point0 = Point.point0;
	  inspectLean = Foundation.inspectLean, max = Foundation.max, log = Foundation.log, flatten = Foundation.flatten, compact = Foundation.compact, time = Foundation.time, clone = Foundation.clone, inspect = Foundation.inspect, min = Foundation.min, max = Foundation.max, flatten = Foundation.flatten, isPlainObject = Foundation.isPlainObject;
	  return LayoutBase.InterpolatedLayout = (function(superClass) {
	    extend(InterpolatedLayout, superClass);

	    function InterpolatedLayout(layout1, layout2, p) {
	      this.layout1 = layout1;
	      this.layout2 = layout2;
	      this.p = p;
	      this._hasXLayout = this.layout1.getHasXLayout() || this.layout2.getHasXLayout();
	      this._hasYLayout = this.layout1.getHasYLayout() || this.layout2.getHasYLayout();
	      this._hasWLayout = this.layout1.getHasWLayout() || this.layout2.getHasWLayout();
	      this._hasHLayout = this.layout1.getHasHLayout() || this.layout2.getHasHLayout();
	      this._sizeChildRelative = this.layout1.getSizeChildRelative() || this.layout2.getSizeChildRelative();
	      this._locationParentRelative = this.layout1.getLocationParentRelative() || this.layout2.getLocationParentRelative();
	      this._sizeParentRelative = this.layout1.getSizeParentRelative() || this.layout2.getSizeParentRelative();
	      this._options = layout2.mergeOptions(layout1);
	      InterpolatedLayout.__super__.constructor.apply(this, arguments);
	    }

	    InterpolatedLayout.prototype.toString = function(showBracketedIfNotPresent) {
	      return ("(" + (this.layout1.toString(showBracketedIfNotPresent)) + " * " + (1 - this.p) + " + ") + ((this.layout2.toString(showBracketedIfNotPresent)) + " * " + this.p + ")");
	    };

	    InterpolatedLayout.prototype.inspect = function(inspector) {
	      var v;
	      v = this.inspect2();
	      if (inspector) {
	        inspector.put(v);
	      }
	      return v;
	    };

	    InterpolatedLayout.prototype.inspect2 = function() {
	      return this.toString();
	    };

	    InterpolatedLayout.getter({
	      x: function() {
	        return this.layout1.getX() + this.layout2.getX();
	      },
	      y: function() {
	        return this.layout1.getY() + this.layout2.getY();
	      },
	      w: function() {
	        return this.layout1.getW() + this.layout2.getW();
	      },
	      h: function() {
	        return this.layout1.getH() + this.layout2.getH();
	      },
	      xw: function() {
	        return this.layout1.getXw() + this.layout2.getXw();
	      },
	      xh: function() {
	        return this.layout1.getXh() + this.layout2.getXh();
	      },
	      yh: function() {
	        return this.layout1.getYh() + this.layout2.getYh();
	      },
	      yw: function() {
	        return this.layout1.getYw() + this.layout2.getYw();
	      },
	      ww: function() {
	        return this.layout1.getWw() + this.layout2.getWw();
	      },
	      wh: function() {
	        return this.layout1.getWh() + this.layout2.getWh();
	      },
	      hh: function() {
	        return this.layout1.getHh() + this.layout2.getHh();
	      },
	      hw: function() {
	        return this.layout1.getHw() + this.layout2.getHw();
	      },
	      wcw: function() {
	        return this.layout1.getWcw() + this.layout2.getWcw();
	      },
	      wch: function() {
	        return this.layout1.getWch() + this.layout2.getWch();
	      },
	      hch: function() {
	        return this.layout1.getHch() + this.layout2.getHch();
	      },
	      hcw: function() {
	        return this.layout1.getHcw() + this.layout2.getHcw();
	      }
	    });

	    InterpolatedLayout.prototype.mergeOptions = function(previousOptions) {
	      return this._options.mergeOptions(previousOptions);
	    };

	    InterpolatedLayout.prototype.interpolate1D = function(hasFrom, hasTo, from, to) {
	      if (hasFrom) {
	        if (hasTo) {
	          return (to - from) * this.p + from;
	        } else {
	          return from;
	        }
	      } else {
	        return to;
	      }
	    };

	    InterpolatedLayout.prototype.transformLocationX = function(parentSize) {
	      return this.interpolate1D(this.layout1.getHasXLayout(), this.layout2.getHasXLayout(), this.layout1.transformLocationX(parentSize), this.layout2.transformLocationX(parentSize));
	    };

	    InterpolatedLayout.prototype.transformLocationY = function(parentSize) {
	      return this.interpolate1D(this.layout1.getHasYLayout(), this.layout2.getHasYLayout(), this.layout1.transformLocationY(parentSize), this.layout2.transformLocationY(parentSize));
	    };

	    InterpolatedLayout.prototype.transformLocation = function(parentSize) {
	      return point(this.transformLocationX(parentSize), this.transformLocationY(parentSize));
	    };

	    InterpolatedLayout.prototype.transformSizeX = function(parentSize, childrenSize) {
	      return this.interpolate1D(this.layout1.getHasWLayout(), this.layout2.getHasWLayout(), this.layout1.transformSizeX(parentSize, childrenSize), this.layout2.transformSizeX(parentSize, childrenSize));
	    };

	    InterpolatedLayout.prototype.transformSizeY = function(parentSize, childrenSize) {
	      return this.interpolate1D(this.layout1.getHasHLayout(), this.layout2.getHasHLayout(), this.layout1.transformSizeY(parentSize, childrenSize), this.layout2.transformSizeY(parentSize, childrenSize));
	    };

	    InterpolatedLayout.prototype.transformSize = function(parentSize, childrenSize) {
	      if (childrenSize == null) {
	        childrenSize = point0;
	      }
	      return point(this.transformSizeX(parentSize, childrenSize), this.transformSizeY(parentSize, childrenSize));
	    };

	    return InterpolatedLayout;

	  })(LayoutBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic) {
	  var BaseObject, LayoutBase, isFunction, isPlainObject, log, nearInfinity, nearInfinityResult, point;
	  BaseObject = Foundation.BaseObject, isPlainObject = Foundation.isPlainObject, log = Foundation.log, isFunction = Foundation.isFunction, nearInfinity = Foundation.nearInfinity, nearInfinityResult = Foundation.nearInfinityResult;
	  point = Atomic.point;
	  return LayoutBase = (function(superClass) {
	    var nearInfinitePoint;

	    extend(LayoutBase, superClass);

	    LayoutBase.nearInfinity = nearInfinity;

	    LayoutBase.nearInfinityResult = nearInfinityResult;

	    LayoutBase.nearInfinitePoint = nearInfinitePoint = point(nearInfinity);

	    LayoutBase.nearInfiniteSize = nearInfinitePoint;

	    LayoutBase.InterpolatedLayout = null;

	    LayoutBase.LinearLayout = null;

	    LayoutBase.mergeLayouts = function(newLayout, oldLayout, forceFull) {
	      if (isPlainObject(newLayout)) {
	        return new LayoutBase.LinearLayout(newLayout, oldLayout, forceFull);
	      } else if (!newLayout || newLayout.getHasFullLayout() || !oldLayout) {
	        return newLayout;
	      } else if (newLayout instanceof LayoutBase.LinearLayout) {
	        return new LayoutBase.LinearLayout(newLayout.options, oldLayout, forceFull);
	      } else {
	        console.error({
	          newLayout: newLayout,
	          oldLayout: oldLayout
	        });
	        throw new Error("mergeLayout requires newLayout to be: null, a plain object, instanceof LinearLayout or newLayout.hasFullLayout == true");
	      }
	    };

	    LayoutBase.getter("options\nsizeChildRelative\nlocationParentRelative\nsizeParentRelative\nwidthParentRelative\nheightParentRelative\nhasXLayout\nhasYLayout\nhasWLayout\nhasHLayout\nhasFullLayout");

	    LayoutBase.getter({
	      parentRelative: function() {
	        return this._locationParentRelative || this._sizeParentRelative;
	      }
	    });

	    function LayoutBase() {
	      LayoutBase.__super__.constructor.apply(this, arguments);
	      this._hasFullLayout = this._hasXLayout && this._hasYLayout && this._hasWLayout && this._hasHLayout;
	    }

	    LayoutBase.prototype.sizeLayoutCircular = function(parentLayout) {
	      var hch, hcw, hh, hw, wch, wcw, wh, ww;
	      if (!(this._sizeParentRelative && (parentLayout != null ? parentLayout._sizeChildRelative : void 0))) {
	        return false;
	      }
	      ww = this.getWw();
	      hh = this.getHh();
	      hw = this.getHw();
	      wh = this.getWh();
	      wcw = parentLayout.getWcw();
	      hch = parentLayout.getHch();
	      wch = parentLayout.getWch();
	      hcw = parentLayout.getHcw();
	      return !!((ww && wcw) || (hh && hch) || (hw && wch) || (wh && hcw) || (wh && hch && hw && wcw) || (ww && wch && hh && hcw));
	    };

	    LayoutBase.prototype.locationLayoutCircular = function(parentLayout) {
	      var hch, hcw, wch, wcw, xh, xw, yh, yw;
	      if (!(this._locationParentRelative && (parentLayout != null ? parentLayout._sizeChildRelative : void 0))) {
	        return false;
	      }
	      xw = this.getXw();
	      yh = this.getYh();
	      yw = this.getYw();
	      xh = this.getXh();
	      wcw = parentLayout.getWcw();
	      hch = parentLayout.getHch();
	      wch = parentLayout.getWch();
	      hcw = parentLayout.getHcw();
	      return !!((xw && wcw) || (yh && hch) || (yw && wch) || (xh && hcw) || (xh && hch && yw && wcw) || (xw && wch && yh && hcw));
	    };

	    LayoutBase.prototype.areaLayoutCircular = function(parentLayout) {
	      var hch, hcw, hh, hw, wch, wcw, wh, ww;
	      if (!((this._locationParentRelative || this._sizeParentRelative) && (parentLayout != null ? parentLayout._sizeChildRelative : void 0))) {
	        return false;
	      }
	      ww = this.getWw() || this.getXw();
	      hh = this.getHh() || this.getYh();
	      hw = this.getHw() || this.getXw();
	      wh = this.getWh() || this.getYh();
	      wcw = parentLayout.getWcw();
	      hch = parentLayout.getHch();
	      wch = parentLayout.getWch();
	      hcw = parentLayout.getHcw();
	      return !!((ww && wcw) || (hh && hch) || (hw && wch) || (wh && hcw) || (wh && hch && hw && wcw) || (ww && wch && hh && hcw));
	    };

	    LayoutBase.prototype.interpolate = function(toLayout, p) {
	      if (p === 0) {
	        return this;
	      } else if (p === 1) {
	        return toLayout;
	      } else {
	        return new LayoutBase.InterpolatedLayout(this, toLayout, p);
	      }
	    };

	    return LayoutBase;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, InterpolatedPointLayout, PointLayoutBase, log,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	PointLayoutBase = __webpack_require__(156);

	log = Foundation.log;

	module.exports = InterpolatedPointLayout = (function(superClass) {
	  var interpolate1D;

	  extend(InterpolatedPointLayout, superClass);

	  PointLayoutBase.InterpolatedPointLayout = InterpolatedPointLayout;

	  function InterpolatedPointLayout(layout1, layout2, p) {
	    InterpolatedPointLayout.__super__.constructor.apply(this, arguments);
	    this.layout1 = layout1;
	    this.layout2 = layout2;
	    this.p = p;
	    this._hasXLayout = this.layout1._hasXLayout || !this.layout2._hasXLayout;
	    this._hasYLayout = this.layout1._hasYLayout || !this.layout2._hasYLayout;
	    this._xRelativeToParentW = this.layout1._xRelativeToParentW || this.layout2._xRelativeToParentW;
	    this._xRelativeToParentH = this.layout1._xRelativeToParentH || this.layout2._xRelativeToParentH;
	    this._yRelativeToParentW = this.layout1._yRelativeToParentW || this.layout2._yRelativeToParentW;
	    this._yRelativeToParentH = this.layout1._yRelativeToParentH || this.layout2._yRelativeToParentH;
	    this._xRelativeToChildrenW = this.layout1._xRelativeToChildrenW || this.layout2._xRelativeToChildrenW;
	    this._xRelativeToChildrenH = this.layout1._xRelativeToChildrenH || this.layout2._xRelativeToChildrenH;
	    this._yRelativeToChildrenW = this.layout1._yRelativeToChildrenW || this.layout2._yRelativeToChildrenW;
	    this._yRelativeToChildrenH = this.layout1._yRelativeToChildrenH || this.layout2._yRelativeToChildrenH;
	    this.layoutX = function(ps, cs) {
	      return interpolate1D(p, layout1._hasXLayout, layout2._hasXLayout, layout1.layoutX(ps, cs), layout2.layoutX(ps, cs));
	    };
	    this.layoutY = function(ps, cs) {
	      return interpolate1D(p, layout1._hasYLayout, layout2._hasYLayout, layout1.layoutY(ps, cs), layout2.layoutY(ps, cs));
	    };
	  }

	  InterpolatedPointLayout.prototype.toString = function() {
	    return "InterpolatedPointLayout(from: (" + (this.layout1.toStringLean()) + "), to: (" + (this.layout2.toStringLean()) + "), " + (this.p * 100 | 0) + "%)";
	  };

	  InterpolatedPointLayout.getter({
	    inspectedString: function() {
	      return this.toString();
	    }
	  });

	  InterpolatedPointLayout.prototype.inspect = function(inspector) {
	    var v;
	    v = this.inspect2();
	    if (inspector != null) {
	      inspector.put(v);
	    }
	    return v;
	  };

	  InterpolatedPointLayout.prototype.inspect2 = function() {
	    return this.toString();
	  };

	  InterpolatedPointLayout.interpolate1D = interpolate1D = function(p, hasFrom, hasTo, from, to) {
	    if (hasFrom) {
	      if (hasTo) {
	        return (to - from) * p + from;
	      } else {
	        return from;
	      }
	    } else {
	      return to;
	    }
	  };

	  return InterpolatedPointLayout;

	})(PointLayoutBase);


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(93), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation) {
	  var BaseObject, Point, PointLayoutBase, inspect, isFunction, isNumber, isPlainObject, log, nearInfinity, nearInfinityResult, point, point0;
	  point = Atomic.point, Point = Atomic.Point;
	  point0 = Point.point0;
	  BaseObject = Foundation.BaseObject, log = Foundation.log, inspect = Foundation.inspect, isFunction = Foundation.isFunction, isNumber = Foundation.isNumber, isPlainObject = Foundation.isPlainObject, nearInfinity = Foundation.nearInfinity, nearInfinityResult = Foundation.nearInfinityResult;
	  return PointLayoutBase = (function(superClass) {
	    var isChildrenHRelative, isChildrenWRelative, isParentHRelative, isParentWRelative, nearInfinityPoint, nearInfinityPointX, nearInfinityPointY;

	    extend(PointLayoutBase, superClass);

	    function PointLayoutBase(a, previousLayout) {
	      this._xRelativeToParentW = this._xRelativeToParentH = this._yRelativeToParentW = this._yRelativeToParentH = this._xRelativeToChildrenW = this._xRelativeToChildrenH = this._yRelativeToChildrenW = this._yRelativeToChildrenH = false;
	      this._hasXLayout = this._hasYLayout = false;
	      this.layoutX = this.layoutY = function() {
	        return 0;
	      };
	      this.layout = function(ps, cs) {
	        return point(this.layoutX(ps, cs), this.layoutY(ps, cs));
	      };
	    }

	    PointLayoutBase.prototype.interpolate = function(toLayout, p) {
	      if (p === 0) {
	        return this;
	      } else if (p === 1) {
	        return toLayout;
	      } else {
	        return new PointLayoutBase.InterpolatedPointLayout(this, toLayout, p);
	      }
	    };

	    PointLayoutBase.getter({
	      inspectedString: function() {
	        return this.toString();
	      }
	    });

	    PointLayoutBase.prototype.inspect = function(inspector) {
	      var v;
	      v = this.inspect2();
	      if (inspector != null) {
	        inspector.put(v);
	      }
	      return v;
	    };

	    PointLayoutBase.prototype.inspect2 = function() {
	      return this.toString();
	    };

	    PointLayoutBase.getter("xRelativeToParentW\nxRelativeToParentH\nyRelativeToParentW\nyRelativeToParentH\nxRelativeToChildrenW\nxRelativeToChildrenH\nyRelativeToChildrenW\nyRelativeToChildrenH\nhasXLayout\nhasYLayout");

	    PointLayoutBase.getter({
	      hasFullLayout: function() {
	        return this._hasXLayout && this._hasYLayout;
	      },
	      hasLayout: function() {
	        return this._hasXLayout || this._hasYLayout;
	      },
	      parentRelative: function() {
	        return this._xRelativeToParentH || this._xRelativeToParentW || this._yRelativeToParentH || this._yRelativeToParentW;
	      },
	      childrenRelative: function() {
	        return this._xRelativeToChildrenH || this._xRelativeToChildrenW || this._yRelativeToChildrenH || this._yRelativeToChildrenW;
	      },
	      xParentRelative: function() {
	        return this._xRelativeToParentH || this._xRelativeToParentW;
	      },
	      yParentRelative: function() {
	        return this._yRelativeToParentH || this._yRelativeToParentW;
	      },
	      xChildrenRelative: function() {
	        return this._xRelativeToChildrenH || this._xRelativeToChildrenW;
	      },
	      yChildrenRelative: function() {
	        return this._yRelativeToChildrenH || this._yRelativeToChildrenW;
	      }
	    });

	    PointLayoutBase.prototype.layoutIsCircular = function(parentLayout) {
	      var result, xcx, xcy, xpx, xpy, ycx, ycy, ypx, ypy;
	      if (!parentLayout) {
	        return false;
	      }
	      xpx = this._xRelativeToParentW;
	      xpy = this._xRelativeToParentH;
	      ypx = this._yRelativeToParentW;
	      ypy = this._yRelativeToParentH;
	      xcx = parentLayout.getXRelativeToChildrenW();
	      xcy = parentLayout.getXRelativeToChildrenH();
	      ycx = parentLayout.getYRelativeToChildrenW();
	      ycy = parentLayout.getYRelativeToChildrenH();
	      result = !!((xpx && xcx) || (xpy && ycx) || (ypy && ycy) || (ypx && xcy) || (xpy && ycy && ypx && xcy) || (xpx && xcy && ypy && ycx));
	      return result;
	    };

	    nearInfinityPoint = point(nearInfinity, nearInfinity);

	    nearInfinityPointX = point0.withX(nearInfinity);

	    nearInfinityPointY = point0.withY(nearInfinity);

	    PointLayoutBase.isParentWRelative = isParentWRelative = function(f, baseline, baselinePoint, testPoint) {
	      return f(testPoint, baselinePoint) !== baseline;
	    };

	    PointLayoutBase.isParentHRelative = isParentHRelative = function(f, baseline, baselinePoint, testPoint) {
	      return f(testPoint, baselinePoint) !== baseline;
	    };

	    PointLayoutBase.isChildrenWRelative = isChildrenWRelative = function(f, baseline, baselinePoint, testPoint) {
	      return f(baselinePoint, testPoint) !== baseline;
	    };

	    PointLayoutBase.isChildrenHRelative = isChildrenHRelative = function(f, baseline, baselinePoint, testPoint) {
	      return f(baselinePoint, testPoint) !== baseline;
	    };

	    PointLayoutBase.prototype._detectXRelativity = function() {
	      var layoutBaseline, layoutLength, nearInfinityBaseline;
	      this._xRelativeToParentW = this._xRelativeToParentH = this._xRelativeToChildrenW = this._xRelativeToChildrenH = false;
	      layoutLength = this.layoutX.length;
	      layoutBaseline = this.layoutX(point0, point0);
	      nearInfinityBaseline = this.layoutX(nearInfinityPoint, nearInfinityPoint);
	      if (layoutLength > 0) {
	        this._xRelativeToParentW = isParentWRelative(this.layoutX, layoutBaseline, point0, nearInfinityPointX) || isParentWRelative(this.layoutX, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointY);
	        this._xRelativeToParentH = isParentHRelative(this.layoutX, layoutBaseline, point0, nearInfinityPointY) || isParentHRelative(this.layoutX, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointX);
	        if (layoutLength === 1 && !this._xRelativeToParentW && !this._xRelativeToParentH) {
	          console.warn(this + ": horizontal/x/w layout function has 1 input, which suggests it should be parent-relative, but it doesn't appear to be. \n\nResolution: If the input is unused, remove it. Otherwise, alter your function to respond differently for parent-sizes of 0 and children-sizes of near-infinity.");
	        }
	      }
	      if (layoutLength > 1) {
	        this._xRelativeToChildrenW = isChildrenWRelative(this.layoutX, layoutBaseline, point0, nearInfinityPointX) || isChildrenWRelative(this.layoutX, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointY);
	        this._xRelativeToChildrenH = isChildrenHRelative(this.layoutX, layoutBaseline, point0, nearInfinityPointY) || isChildrenHRelative(this.layoutX, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointX);
	        if (!(this._xRelativeToChildrenW || this._xRelativeToChildrenH)) {
	          return console.warn(this + ": horizontal/x/w layout function has 2 inputs, which suggests it should be child-relative, but it doesn't appear to be. \n\nResolution: If the second input is unused, remove it. Otherwise, alter your function to respond differently for children-sizes of 0 vs near-infinity when parent-size is 0.");
	        }
	      }
	    };

	    PointLayoutBase.prototype._detectYRelativity = function() {
	      var layoutBaseline, layoutLength, nearInfinityBaseline;
	      this._yRelativeToParentW = this._yRelativeToParentH = this._yRelativeToChildrenW = this._yRelativeToChildrenH = false;
	      layoutLength = this.layoutY.length;
	      layoutBaseline = this.layoutY(point0, point0);
	      nearInfinityBaseline = this.layoutY(nearInfinityPoint, nearInfinityPoint);
	      if (layoutLength > 0) {
	        this._yRelativeToParentW = isParentWRelative(this.layoutY, layoutBaseline, point0, nearInfinityPointX) || isParentWRelative(this.layoutY, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointY);
	        this._yRelativeToParentH = isParentHRelative(this.layoutY, layoutBaseline, point0, nearInfinityPointY) || isParentHRelative(this.layoutY, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointX);
	        if (layoutLength === 1 && !this._yRelativeToParentW && !this._yRelativeToParentH) {
	          console.warn(this + ": vertical/y/h layout function has 1 input, which suggests it should be parent-relative, but it doesn't appear to be. \n\nResolution: If the input is unused, remove it. Otherwise, alter your function to respond differently for parent-sizes of 0 and children-sizes of near-infinity.");
	        }
	      }
	      if (layoutLength > 1) {
	        this._yRelativeToChildrenW = isChildrenWRelative(this.layoutY, layoutBaseline, point0, nearInfinityPointX) || isChildrenWRelative(this.layoutY, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointY);
	        this._yRelativeToChildrenH = isChildrenHRelative(this.layoutY, layoutBaseline, point0, nearInfinityPointY) || isChildrenHRelative(this.layoutY, nearInfinityBaseline, nearInfinityPoint, nearInfinityPointX);
	        if (!(this._yRelativeToChildrenW || this._yRelativeToChildrenH)) {
	          return console.warn(this + ": vertical/y/h layout function has 2 inputs, which suggests it should be child-relative, but it doesn't appear to be. \n\nResolution: If the second input is unused, remove it. Otherwise, alter your function to respond differently for children-sizes of 0 vs near-infinity when parent-size is 0.");
	        }
	      }
	    };

	    PointLayoutBase.prototype._detectRelativity = function() {
	      this._detectXRelativity();
	      return this._detectYRelativity();
	    };

	    return PointLayoutBase;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(93), __webpack_require__(11), __webpack_require__(154)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, LayoutBase) {
	  var Point, Rectangle, clone, compact, copyProps, expandPairOptions, flatten, hasOneOrMoreProps, inspect, inspectLean, isPlainObject, log, max, min, nearInfinity, needsMerging, pairSets, pairsExpansionMap, point, point0, propSets, propsAffecting, rect, rubyOr, time;
	  rubyOr = Foundation.Ruby.or;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle;
	  point0 = Point.point0;
	  inspectLean = Foundation.inspectLean, max = Foundation.max, log = Foundation.log, flatten = Foundation.flatten, compact = Foundation.compact, time = Foundation.time, clone = Foundation.clone, inspect = Foundation.inspect, min = Foundation.min, max = Foundation.max, flatten = Foundation.flatten, isPlainObject = Foundation.isPlainObject;
	  nearInfinity = LayoutBase.nearInfinity;
	  propsAffecting = {
	    x: ["x", "xw", "xh"],
	    y: ["y", "yw", "yh"],
	    w: ["w", "ww", "wh", "wcw", "wch"],
	    h: ["h", "hw", "hh", "hcw", "hch"]
	  };
	  propSets = {
	    sizeParentRelative: ["ww", "wh", "hw", "hh"],
	    widthParentRelative: ["ww", "wh"],
	    heightParentRelative: ["hw", "hh"],
	    locationParentRelative: ["xw", "xh", "yw", "yh"],
	    sizeChildRelative: ["wcw", "wch", "hcw", "hch"]
	  };
	  hasOneOrMoreProps = function(options, props) {
	    var i, len, prop;
	    for (i = 0, len = props.length; i < len; i++) {
	      prop = props[i];
	      if (typeof options[prop] === "number") {
	        return true;
	      }
	    }
	    return false;
	  };
	  copyProps = function(to, from, props) {
	    var i, len, prop, v;
	    for (i = 0, len = props.length; i < len; i++) {
	      prop = props[i];
	      if ((v = from[prop]) != null) {
	        to[prop] = v;
	      }
	    }
	    return to;
	  };
	  pairSets = {
	    s: ["s", "ss", "scs", "ssh"],
	    l: ["l", "ls", "lsh"]
	  };
	  pairsExpansionMap = {
	    s: ["w", "h"],
	    ss: ["ww", "hh"],
	    ssh: ["wh", "hw"],
	    scs: ["wcw", "hch"],
	    l: ["x", "y"],
	    ls: ["xw", "yh"],
	    lsh: ["xh", "yw"]
	  };
	  expandPairOptions = function(options) {
	    var newOptions, ref, srcProp, srcValue, toX, toY, x, y;
	    newOptions = null;
	    for (srcProp in pairsExpansionMap) {
	      ref = pairsExpansionMap[srcProp], toX = ref[0], toY = ref[1];
	      if (typeof (srcValue = options[srcProp]) !== null && srcValue !== void 0) {
	        newOptions || (newOptions = clone(options));
	        if (typeof srcValue === "number") {
	          x = y = srcValue;
	        } else {
	          x = srcValue.x, y = srcValue.y;
	        }
	        if (newOptions[toX] == null) {
	          newOptions[toX] = x;
	        }
	        if (newOptions[toY] == null) {
	          newOptions[toY] = y;
	        }
	        delete newOptions[srcProp];
	      }
	    }
	    return newOptions || options;
	  };
	  needsMerging = function(options, oldOptions) {
	    var propSet, propSetName;
	    for (propSetName in propsAffecting) {
	      propSet = propsAffecting[propSetName];
	      if (hasOneOrMoreProps(options, propSet) !== hasOneOrMoreProps(oldOptions, propSet)) {
	        return true;
	      }
	    }
	    return false;
	  };
	  return LayoutBase.LinearLayout = (function(superClass) {
	    var bracketUnless, mergeOptions;

	    extend(LinearLayout, superClass);

	    LinearLayout.mergeOptions = mergeOptions = function(options, oldOptions) {
	      var newOptions, propSet, propSetName, settingOptions;
	      options = options ? options.getOptions ? options.getOptions() : expandPairOptions(options) : void 0;
	      oldOptions = oldOptions ? oldOptions.getOptions ? oldOptions.getOptions() : expandPairOptions(oldOptions) : void 0;
	      if (!(options && oldOptions)) {
	        return options || oldOptions;
	      }
	      if (!needsMerging(options, oldOptions)) {
	        return options;
	      }
	      newOptions = {};
	      for (propSetName in propsAffecting) {
	        propSet = propsAffecting[propSetName];
	        settingOptions = hasOneOrMoreProps(options, propSet) ? options : oldOptions;
	        copyProps(newOptions, settingOptions, propSet);
	      }
	      if (options.min || oldOptions.min) {
	        newOptions.min = mergeOptions(options.min, oldOptions.min);
	      }
	      if (options.max || oldOptions.max) {
	        newOptions.max = mergeOptions(options.max, oldOptions.max);
	      }
	      return newOptions;
	    };

	    function LinearLayout(options, previousOptions, forceHasAllLayout) {
	      var maxOptions, minOptions;
	      if (options == null) {
	        options = {};
	      }
	      this._sizeSx = this._sizeSy = 1;
	      this._sizeShx = this._sizeShy = 0;
	      this._sizeTx = this._sizeTy = 0;
	      this._locationSx = 0;
	      this._locationSy = 0;
	      this._locationShx = 0;
	      this._locationShy = 0;
	      this._locationTx = 0;
	      this._locationTy = 0;
	      this._maxLayout = null;
	      this._minLayout = null;
	      this._wcw = this._hcw = this._wch = this._hch = 0;
	      this._options = options = mergeOptions(options, previousOptions);
	      this._hasXLayout = forceHasAllLayout || hasOneOrMoreProps(options, propsAffecting.x);
	      this._hasYLayout = forceHasAllLayout || hasOneOrMoreProps(options, propsAffecting.y);
	      this._hasWLayout = forceHasAllLayout || hasOneOrMoreProps(options, propsAffecting.w);
	      this._hasHLayout = forceHasAllLayout || hasOneOrMoreProps(options, propsAffecting.h);
	      this._sizeChildRelative = hasOneOrMoreProps(options, propSets.sizeChildRelative);
	      this._locationParentRelative = hasOneOrMoreProps(options, propSets.locationParentRelative);
	      this._sizeParentRelative = hasOneOrMoreProps(options, propSets.sizeParentRelative);
	      this._widthParentRelative = hasOneOrMoreProps(options, propSets.widthParentRelative);
	      this._heightParentRelative = hasOneOrMoreProps(options, propSets.heightParentRelative);
	      this.layout(this._options = options);
	      if (maxOptions = options.max) {
	        maxOptions = expandPairOptions(maxOptions);
	        this._maxLayout = new LinearLayout(maxOptions);
	      }
	      if (minOptions = options.min) {
	        minOptions = expandPairOptions(minOptions);
	        this._minLayout = new LinearLayout(minOptions);
	      }
	      LinearLayout.__super__.constructor.apply(this, arguments);
	    }

	    LinearLayout.prototype.mergeOptions = function(previousOptions) {
	      return mergeOptions(this, previousOptions);
	    };

	    LinearLayout.prototype.eq = function(ll) {
	      return this._locationSx === ll._locationSx && this._locationSy === ll._locationSy && this._locationShx === ll._locationShx && this._locationShy === ll._locationShy && this._locationTx === ll._locationTx && this._locationTy === ll._locationTy && this._sizeSx === ll._sizeSx && this._sizeSy === ll._sizeSy && this._sizeShx === ll._sizeShx && this._sizeShy === ll._sizeShy && this._sizeTx === ll._sizeTx && this._sizeTy === ll._sizeTy && this._wcw === ll._wcw && this._wch === ll._wch && this._hcw === ll._hcw && this._hch === ll._hch;
	    };

	    LinearLayout.prototype.layoutFromElement = function(o) {
	      var location, size;
	      if (o == null) {
	        o = this;
	      }
	      size = o.size, location = o.location;
	      this._sizeTx = size.x;
	      this._sizeTy = size.y;
	      this._sizeSx = this._sizeSy = 0;
	      this._sizeShx = this._sizeShy = 0;
	      this._locationTx = location.x;
	      this._locationTy = location.y;
	      this._locationSx = this._locationSy = 0;
	      return this._locationShx = this._locationShy = 0;
	    };

	    bracketUnless = function(bracketUnless, show, string) {
	      if (!bracketUnless) {
	        if (show) {
	          return "[" + string + "]";
	        }
	      } else {
	        return string;
	      }
	    };

	    LinearLayout.prototype.toStringSet = function(basePropName) {
	      var prop, v, vals;
	      vals = (function() {
	        var i, len, ref, results;
	        ref = propsAffecting[basePropName];
	        results = [];
	        for (i = 0, len = ref.length; i < len; i++) {
	          prop = ref[i];
	          if ((v = this[prop]) !== 0) {
	            results.push(prop + ": " + v);
	          }
	        }
	        return results;
	      }).call(this);
	      if (vals.length === 0) {
	        return basePropName + ": 0";
	      } else {
	        return vals.join(", ");
	      }
	    };

	    LinearLayout.prototype.pairSetIdentical = function(pairSetName) {
	      var ok, p1, p2, pair, pairSet, v, vals;
	      pairSet = pairSets[pairSetName];
	      pairsExpansionMap;
	      ok = true;
	      vals = (function() {
	        var i, len, ref, results;
	        results = [];
	        for (i = 0, len = pairSet.length; i < len; i++) {
	          pair = pairSet[i];
	          ref = pairsExpansionMap[pair], p1 = ref[0], p2 = ref[1];
	          if ((v = this[p1]) !== this[p2]) {
	            ok = false;
	            break;
	          }
	          if (v !== 0) {
	            results.push(pair + ": " + v);
	          } else {
	            results.push(void 0);
	          }
	        }
	        return results;
	      }).call(this);
	      if (!ok) {
	        return false;
	      }
	      vals = compact(vals);
	      if (vals.length === 0) {
	        return pairSetName + ": 0";
	      } else {
	        return vals.join(", ");
	      }
	    };

	    LinearLayout.prototype.toString = function(showBracketedIfNotPresent) {
	      var closeCap, openCap, pairValues;
	      openCap = "{";
	      closeCap = "}";
	      return openCap + compact(flatten([this._hasXLayout === this._hasYLayout && (pairValues = this.pairSetIdentical("l")) ? bracketUnless(this._hasXLayout && this._hasYLayout, showBracketedIfNotPresent, pairValues) : [bracketUnless(this._hasXLayout, showBracketedIfNotPresent, this.toStringSet("x")), bracketUnless(this._hasYLayout, showBracketedIfNotPresent, this.toStringSet("y"))], this._hasWLayout === this._hasHLayout && (pairValues = this.pairSetIdentical("s")) ? bracketUnless(this._hasWLayout && this._hasHLayout, showBracketedIfNotPresent, pairValues) : [bracketUnless(this._hasWLayout, showBracketedIfNotPresent, this.toStringSet("w")), bracketUnless(this._hasHLayout, showBracketedIfNotPresent, this.toStringSet("h"))], this._maxLayout ? "max: " + this._maxLayout.toString() : void 0, this._minLayout ? "min: " + this._minLayout.toString() : void 0])).join(', ') + closeCap;
	    };

	    LinearLayout.prototype.inspect = function(inspector) {
	      var v;
	      v = this.inspect2();
	      if (inspector) {
	        inspector.put(v);
	      }
	      return v;
	    };

	    LinearLayout.prototype.inspect2 = function() {
	      return this.toString();
	    };

	    LinearLayout.getter({
	      l: function() {
	        return point(this._locationTx, this._locationTy);
	      },
	      s: function() {
	        return point(this._sizeTx, this._sizeTy);
	      },
	      x: function() {
	        return this._locationTx;
	      },
	      xw: function() {
	        return this._locationSx;
	      },
	      xh: function() {
	        return this._locationShx;
	      },
	      y: function() {
	        return this._locationTy;
	      },
	      yh: function() {
	        return this._locationSy;
	      },
	      yw: function() {
	        return this._locationShy;
	      },
	      w: function() {
	        return this._sizeTx;
	      },
	      ww: function() {
	        return this._sizeSx;
	      },
	      wh: function() {
	        return this._sizeShx;
	      },
	      h: function() {
	        return this._sizeTy;
	      },
	      hh: function() {
	        return this._sizeSy;
	      },
	      hw: function() {
	        return this._sizeShy;
	      }
	    });

	    LinearLayout.getter("wcw wch hch hcw");

	    LinearLayout.prototype.layout = function(arg) {
	      var h, hch, hcw, hh, hw, w, wch, wcw, wh, ww, x, xh, xw, y, yh, yw;
	      x = arg.x, xw = arg.xw, xh = arg.xh, y = arg.y, yh = arg.yh, yw = arg.yw, w = arg.w, ww = arg.ww, wh = arg.wh, wcw = arg.wcw, wch = arg.wch, h = arg.h, hh = arg.hh, hw = arg.hw, hch = arg.hch, hcw = arg.hcw;
	      this.layoutHorizontalLocation(x, xw, xh);
	      this.layoutVerticalLocation(y, yh, yw);
	      this.layoutWidth(w, ww, wh, wcw, wch);
	      return this.layoutHeight(h, hh, hw, hch, hcw);
	    };

	    LinearLayout.prototype.layoutHorizontalLocation = function(x, xx, xy) {
	      if (!((x != null) || (xx != null) || (xy != null))) {
	        return;
	      }
	      this._locationTx = x || 0;
	      this._locationSx = xx || 0;
	      return this._locationShx = xy || 0;
	    };

	    LinearLayout.prototype.layoutVerticalLocation = function(y, yy, yx) {
	      if (!((y != null) || (yy != null) || (yx != null))) {
	        return;
	      }
	      this._locationTy = y || 0;
	      this._locationSy = yy || 0;
	      return this._locationShy = yx || 0;
	    };

	    LinearLayout.prototype.layoutWidth = function(w, wx, wy, wcw, wch) {
	      if (!((w != null) || (wx != null) || (wy != null) || (wch != null) || (wcw != null))) {
	        return;
	      }
	      this._wcw = wcw || 0;
	      this._wch = wch || 0;
	      this._sizeTx = w || 0;
	      this._sizeSx = wx || 0;
	      return this._sizeShx = wy || 0;
	    };

	    LinearLayout.prototype.layoutHeight = function(h, hy, hx, hch, hcw) {
	      if (!((h != null) || (hy != null) || (hx != null) || (hch != null) || (hcw != null))) {
	        return;
	      }
	      this._hcw = hcw || 0;
	      this._hch = hch || 0;
	      this._sizeTy = h || 0;
	      this._sizeSy = hy || 0;
	      return this._sizeShy = hx || 0;
	    };

	    LinearLayout.prototype.constrainSizeXByMaxLayout = function(parentSize, childrenSize, v) {
	      var ref;
	      if ((ref = this._maxLayout) != null ? ref._hasWLayout : void 0) {
	        return min(v, this._maxLayout.transformSizeX(parentSize, childrenSize));
	      } else {
	        return v;
	      }
	    };

	    LinearLayout.prototype.constrainSizeYByMaxLayout = function(parentSize, childrenSize, v) {
	      var ref;
	      if ((ref = this._maxLayout) != null ? ref._hasHLayout : void 0) {
	        return min(v, this._maxLayout.transformSizeY(parentSize, childrenSize));
	      } else {
	        return v;
	      }
	    };

	    LinearLayout.prototype.constrainSizeXByMinLayout = function(parentSize, childrenSize, v) {
	      var ref;
	      if ((ref = this._minLayout) != null ? ref._hasWLayout : void 0) {
	        return max(0, v, this._minLayout.transformSizeX(parentSize, childrenSize));
	      } else {
	        return max(0, v);
	      }
	    };

	    LinearLayout.prototype.constrainSizeYByMinLayout = function(parentSize, childrenSize, v) {
	      var ref;
	      if ((ref = this._minLayout) != null ? ref._hasHLayout : void 0) {
	        return max(0, v, this._minLayout.transformSizeY(parentSize, childrenSize));
	      } else {
	        return max(0, v);
	      }
	    };

	    LinearLayout.prototype.transformLocationX = function(parentSize) {
	      var ref, ref1, x;
	      x = parentSize.x * this._locationSx + parentSize.y * this._locationShx + this._locationTx;
	      if ((ref = this._maxLayout) != null ? ref._hasXLayout : void 0) {
	        x = min(x, this._maxLayout.transformLocationX(parentSize));
	      }
	      if ((ref1 = this._minLayout) != null ? ref1._hasXLayout : void 0) {
	        x = max(x, this._minLayout.transformLocationX(parentSize));
	      }
	      return x;
	    };

	    LinearLayout.prototype.transformLocationY = function(parentSize) {
	      var ref, ref1, y;
	      y = parentSize.y * this._locationSy + parentSize.x * this._locationShy + this._locationTy;
	      if ((ref = this._maxLayout) != null ? ref._hasYLayout : void 0) {
	        y = min(y, this._maxLayout.transformLocationY(parentSize));
	      }
	      if ((ref1 = this._minLayout) != null ? ref1._hasYLayout : void 0) {
	        y = max(y, this._minLayout.transformLocationY(parentSize));
	      }
	      return y;
	    };

	    LinearLayout.prototype.transformLocation = function(parentSize) {
	      return new Point(this.transformLocationX(parentSize), this.transformLocationY(parentSize));
	    };

	    LinearLayout.prototype.transformSizeX = function(parentSize, childrenSize) {
	      return this.constrainSizeXByMinLayout(parentSize, childrenSize, this.constrainSizeXByMaxLayout(parentSize, childrenSize, (parentSize.x * this._sizeSx + parentSize.y * this._sizeShx + this._sizeTx) + this._wcw * childrenSize.x + this._wch * childrenSize.y));
	    };

	    LinearLayout.prototype.transformSizeY = function(parentSize, childrenSize) {
	      return this.constrainSizeYByMinLayout(parentSize, childrenSize, this.constrainSizeYByMaxLayout(parentSize, childrenSize, (parentSize.y * this._sizeSy + parentSize.x * this._sizeShy + this._sizeTy) + this._hcw * childrenSize.x + this._hch * childrenSize.y));
	    };

	    LinearLayout.prototype.transformSize = function(parentSize, childrenSize) {
	      if (childrenSize == null) {
	        childrenSize = point0;
	      }
	      return new Point(this.transformSizeX(parentSize, childrenSize), this.transformSizeY(parentSize, childrenSize));
	    };

	    return LinearLayout;

	  })(LayoutBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(93), __webpack_require__(11), __webpack_require__(156)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation, PointLayoutBase) {
	  var BaseObject, Components, Point, PointLayout, inspect, inspectLean, isFunction, isNumber, isPlainObject, log, max, min, point, point0;
	  point = Atomic.point, Point = Atomic.Point;
	  point0 = Point.point0;
	  BaseObject = Foundation.BaseObject, log = Foundation.log, inspect = Foundation.inspect, inspectLean = Foundation.inspectLean, isFunction = Foundation.isFunction, isNumber = Foundation.isNumber, isPlainObject = Foundation.isPlainObject, min = Foundation.min, max = Foundation.max;
	  Components = (function() {
	    var applyComponentsFunctions, preprocessValue, x, xcw, xph, xpw, y, ych, yph, ypw;

	    function Components() {}

	    Components.setupPointLayout = function(linearLayout, options, previousLayout) {
	      var applyFunction, k, maxLayout, v;
	      maxLayout = options.max ? new PointLayout(options.max) : void 0;
	      this._reset();
	      for (k in options) {
	        v = options[k];
	        applyFunction = applyComponentsFunctions[k];
	        if (!applyFunction) {
	          throw new Error("invalid PointLayout component: " + (inspect(k)) + " in " + (inspect(options)));
	        }
	        applyFunction(v, linearLayout);
	      }
	      linearLayout.layoutX = linearLayout._hasXLayout ? this._buildXLayoutFromComponents(maxLayout) : (previousLayout != null ? previousLayout._hasXLayout : void 0) ? (linearLayout._hasXLayout = true, previousLayout.layoutX) : function() {
	        return 0;
	      };
	      linearLayout.layoutY = linearLayout._hasYLayout ? this._buildYLayoutFromComponents(maxLayout) : (previousLayout != null ? previousLayout._hasYLayout : void 0) ? (linearLayout._hasYLayout = true, previousLayout.layoutY) : function() {
	        return 0;
	      };
	      if (this.needToDetectXRelativity) {
	        linearLayout._detectXRelativity();
	      }
	      if (this.needToDetectYRelativity) {
	        return linearLayout._detectYRelativity();
	      }
	    };

	    Components._buildXLayoutFromComponents = function(maxLayout) {
	      var layoutX, x, xcw, xph, xpw;
	      x = this.x, xpw = this.xpw, xph = this.xph, xcw = this.xcw, layoutX = this.layoutX;
	      layoutX || (layoutX = xcw === 0 ? function(ps) {
	        return x + xpw * ps.x + xph * ps.y;
	      } : function(ps, cs) {
	        return x + xpw * ps.x + xph * ps.y + xcw * cs.x;
	      });
	      if (maxLayout != null ? maxLayout.getHasXLayout() : void 0) {
	        return function(ps, cs) {
	          return min(maxLayout.layoutX(ps), layoutX(ps, cs));
	        };
	      } else {
	        return layoutX;
	      }
	    };

	    Components._buildYLayoutFromComponents = function(maxLayout) {
	      var layoutY, y, ych, yph, ypw;
	      y = this.y, yph = this.yph, ypw = this.ypw, ych = this.ych, layoutY = this.layoutY;
	      layoutY || (layoutY = ych === 0 ? function(ps) {
	        return y + yph * ps.y + ypw * ps.x;
	      } : function(ps, cs) {
	        return y + yph * ps.y + ypw * ps.x + ych * cs.y;
	      });
	      if (maxLayout != null ? maxLayout.getHasYLayout() : void 0) {
	        return function(ps, cs) {
	          return min(maxLayout.layoutY(ps), layoutY(ps, cs));
	        };
	      } else {
	        return layoutY;
	      }
	    };

	    Components._reset = function() {
	      this.needToDetectXRelativity = false;
	      this.needToDetectYRelativity = false;
	      this.layoutX = null;
	      this.layoutY = null;
	      return this.x = this.xpw = this.xph = this.xcw = this.y = this.yph = this.ypw = this.ych = 0.0;
	    };

	    Components._reset();

	    preprocessValue = function(value, pointLayout) {
	      value || (value = 0);
	      if (!isNumber(value)) {
	        throw new Error("Each PointLayout component must be a number. Not " + (inspect(value)) + " from " + pointLayout);
	      }
	      return value;
	    };

	    Components._applyComponentsFunctions = applyComponentsFunctions = {
	      max: function(value, pointLayout) {},
	      plus: function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._hasYLayout = true;
	        Components.x += value;
	        return Components.y += value;
	      },
	      x: x = function(value, pointLayout) {
	        pointLayout._hasXLayout = true;
	        if (isFunction(value)) {
	          Components.layoutX = value;
	          return Components.needToDetectXRelativity = true;
	        } else {
	          value = preprocessValue(value, pointLayout);
	          return Components.x += value;
	        }
	      },
	      y: y = function(value, pointLayout) {
	        pointLayout._hasYLayout = true;
	        if (isFunction(value)) {
	          Components.layoutY = value;
	          return Components.needToDetectYRelativity = true;
	        } else {
	          value = preprocessValue(value, pointLayout);
	          return Components.y += value;
	        }
	      },
	      ps: function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._hasYLayout = pointLayout._xRelativeToParentW = pointLayout._yRelativeToParentH = true;
	        Components.xpw += value;
	        return Components.yph += value;
	      },
	      xpw: xpw = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._xRelativeToParentW = true;
	        return Components.xpw += value;
	      },
	      yph: yph = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasYLayout = pointLayout._yRelativeToParentH = true;
	        return Components.yph += value;
	      },
	      xph: xph = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._xRelativeToParentH = true;
	        return Components.xph += value;
	      },
	      ypw: ypw = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasYLayout = pointLayout._yRelativeToParentW = true;
	        return Components.ypw += value;
	      },
	      cs: function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._hasYLayout = pointLayout._xRelativeToChildrenW = pointLayout._yRelativeToChildrenH = true;
	        Components.xcw += value;
	        return Components.ych += value;
	      },
	      xcw: xcw = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasXLayout = pointLayout._xRelativeToChildrenW = true;
	        return Components.xcw += value;
	      },
	      ych: ych = function(value, pointLayout) {
	        value = preprocessValue(value, pointLayout);
	        pointLayout._hasYLayout = pointLayout._yRelativeToChildrenH = true;
	        return Components.ych += value;
	      },
	      w: x,
	      h: y,
	      ww: xpw,
	      hh: yph,
	      xw: xpw,
	      yh: yph,
	      wh: xph,
	      hw: ypw,
	      xh: xph,
	      yw: ypw,
	      wpw: xpw,
	      hph: yph,
	      wcw: xcw,
	      hch: ych,
	      wph: xph,
	      hpw: ypw,
	      width: x,
	      height: y,
	      width_parentWidth: xpw,
	      height_parentHeight: yph,
	      width_childrenWidth: xcw,
	      height_childrenHeight: ych,
	      x_parentWidth: xpw,
	      y_parentHeight: yph,
	      x_childrenWidth: xcw,
	      y_childrenHeight: ych
	    };

	    return Components;

	  })();
	  return PointLayout = (function(superClass) {
	    extend(PointLayout, superClass);


	    /*
	    constructor inputs: (initializer, previousLayout)
	    
	    constant initializer: anything that isn't a function or an object that is a legal initializer for Points
	    
	      123         # number
	      point 1, 2  # point
	      [1, 2]      # [x, y] array
	      "topLeft"   # named point
	      "1, 2"      # "x, y" string which is parsed
	    
	    function initializer: (ps, cs) -> Point or Number
	    
	      layout is an abitrary function based on ps (parent-size) and cs (children-size) returning a point
	      NOTE: this is the least efficient option UNLESS the function directly returns ps or cs.
	      REASON: otherwise you are creating new points each time the function is called.
	    
	    options object initializer:
	    
	       * contains one or more of the following options
	    
	       * layoutX = x if isFunction x
	      x:         (ps, cs) -> number
	    
	       * layoutX is the sum of:
	      x:         k # -> k
	      xpw:       k # -> k * ps.w
	      xcw:       k # -> k * cs.w
	      plus:      k # -> k
	      ps:        k # -> k * ps.w
	      cs:        k # -> k * cs.w
	    
	       * layoutY = y if isFunction y
	      y:         (ps, cs) -> number
	    
	       * layoutY is the sum of:
	      y:         k # -> k
	      yph:       k # -> k * ps.h
	      ych:       k # -> k * cs.h
	      plus:      k # -> k
	      ps:        k # -> k * ps.h
	      cs:        k # -> k * cs.h
	    
	       * Alaises
	      w:                        x
	      h:                        y
	      wpw:                      xpw
	      hph:                      yph
	      wcw:                      xcw
	      hch:                      ych
	    
	      width:                    x
	      height:                   y
	      width_parentWidth:        xpw
	      height_parentHeight:      yph
	      width_childrenWidth:      xcw
	      height_childrenHeight:    ych
	    
	      x_parentWidth:            xpw
	      y_parentHeight:           yph
	      x_childrenWidth:          xcw
	      y_childrenHeight:         ych
	    
	    constructor option examples:
	    
	      ps:1, plus:100      # @layout = (ps) -> ps.add 100
	      ps:1, cs:1          # @layout = (cs, ps) -> ps.add cs
	      x:100, y:200        # @layout = -> point 100, 200
	      w:100, h:200        # @layout = -> point 100, 200
	      wpw:1, hch:1        # @layout = (ps, cs) -> point ps.x, cs.y
	    
	    NOTE: When providing custom functions, their dependency on parent or children size is auto-detected by:
	      Evaluating f(point0, point0) and comparing it with nearInfinity for each of the 4 input values respectively.
	      If your function varies at all in response to an input value, it should return something different for point0
	      vs nearInfinity.
	     */

	    function PointLayout(initializer, previousLayout) {
	      this.initializer = initializer;
	      PointLayout.__super__.constructor.apply(this, arguments);
	      this.initializer && (function() {
	        switch (typeof this.initializer) {
	          case "function":
	            return this._setupFromFunction(this.initializer);
	          case "object":
	            if (this.initializer.constructor === Object) {
	              return this._setupFromOptions(this.initializer, previousLayout);
	            } else {
	              return this._setupFromPoint(this.initializer);
	            }
	            break;
	          default:
	            return this._setupFromPoint(this.initializer);
	        }
	      }).call(this);
	    }

	    PointLayout.prototype.toString = function() {
	      return "PointLayout(" + (this.toStringLean()) + ")";
	    };

	    PointLayout.prototype.toStringLean = function() {
	      if (this.initializer) {
	        return inspectLean(this.initializer);
	      } else {
	        return '0';
	      }
	    };

	    PointLayout.prototype._setupFromPoint = function(p) {
	      this._hasXLayout = this._hasYLayout = true;
	      p = point(p);
	      this.layoutX = function() {
	        return p.x;
	      };
	      this.layoutY = function() {
	        return p.y;
	      };
	      return this.layout = function() {
	        return p;
	      };
	    };

	    PointLayout.prototype._setupFromFunction = function(f) {
	      this._hasXLayout = this._hasYLayout = true;
	      if (f.length === 1) {
	        if (isNumber(f(point0))) {
	          this.layout = function(ps) {
	            return point(f(ps));
	          };
	          this.layoutX = f;
	          this.layoutY = f;
	        } else {
	          this.layout = f;
	          this.layoutX = function(ps) {
	            return f(ps).x;
	          };
	          this.layoutY = function(ps) {
	            return f(ps).y;
	          };
	        }
	      } else {
	        if (isNumber(f(point0, point0))) {
	          this.layout = function(ps, cs) {
	            return point(f(ps, cs));
	          };
	          this.layoutX = f;
	          this.layoutY = f;
	        } else {
	          this.layout = f;
	          this.layoutX = function(ps, cs) {
	            return f(ps, cs).x;
	          };
	          this.layoutY = function(ps, cs) {
	            return f(ps, cs).y;
	          };
	        }
	      }
	      return this._detectRelativity();
	    };

	    PointLayout.prototype._setupFromOptions = function(options, previousLayout) {
	      return Components.setupPointLayout(this, options, previousLayout);
	    };

	    return PointLayout;

	  })(PointLayoutBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, ElementBase, EventedEpochedObject, Foundation, elementFactory, inspect, isFunction, log, merge, peek, present,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Atomic = __webpack_require__(93);

	Foundation = __webpack_require__(11);

	elementFactory = __webpack_require__(160).elementFactory;

	EventedEpochedObject = __webpack_require__(161);

	log = Foundation.log, inspect = Foundation.inspect, merge = Foundation.merge, peek = Foundation.peek, present = Foundation.present, isFunction = Foundation.isFunction;


	/*
	ElementBase adds:

	  1. automatic ElementFactory registration
	  2. Element instance registration
	  3. The name and key properties (TODO: reduce to just 'key')
	  4. Inspectors

	ElementBase is the root for Element and eventually Span. All elements in the AIM
	must inherit from ElementBase.

	TODO:
	  5. parent and children relationships should be in ElementBase not Element
	 */

	module.exports = ElementBase = (function(superClass) {
	  var _elementInstanceRegistry, inspectedPropsFirst, inspectedPropsNotToInclude;

	  extend(ElementBase, superClass);

	  ElementBase.registerWithElementFactory = function() {
	    return false;
	  };

	  ElementBase.postCreate = function() {
	    if (this.registerWithElementFactory()) {
	      elementFactory.register(this);
	    }
	    return ElementBase.__super__.constructor.postCreate.apply(this, arguments);
	  };

	  function ElementBase() {
	    ElementBase.__super__.constructor.apply(this, arguments);
	    this.remoteId = null;
	    this.creator = null;
	    this.__depth = 0;
	    this.__redrawRequired = false;
	  }

	  ElementBase.concreteProperty({
	    key: {
	      "default": null,
	      validate: function(v) {
	        return v === null || isFunction(v.toString);
	      },
	      preprocess: function(v) {
	        if (v === null) {
	          return v;
	        } else {
	          return v.toString();
	        }
	      }
	    }
	  });

	  ElementBase.virtualProperty({
	    name: {
	      getter: function(pending) {
	        return this.getState(pending)._key;
	      },
	      setter: function(v) {
	        return this.setKey(v);
	      }
	    }
	  });

	  ElementBase._elementInstanceRegistry = _elementInstanceRegistry = {};

	  ElementBase.getter({
	    isRegistered: function() {
	      return !!_elementInstanceRegistry[this.getInstanceId()];
	    }
	  });

	  ElementBase.getElementByInstanceId = function(instanceId) {
	    return _elementInstanceRegistry[instanceId];
	  };

	  ElementBase.prototype._register = function() {
	    var instanceId;
	    if (_elementInstanceRegistry[instanceId = this.getInstanceId()]) {
	      return;
	    }
	    _elementInstanceRegistry[instanceId] = this;
	    return this.eachChild((function(_this) {
	      return function(child) {
	        return child._register();
	      };
	    })(this));
	  };

	  ElementBase.prototype._unregister = function() {
	    var instanceId;
	    if (!_elementInstanceRegistry[instanceId = this.getInstanceId()]) {
	      return;
	    }
	    delete _elementInstanceRegistry[instanceId];
	    this.eachChild((function(_this) {
	      return function(child) {
	        return child._unregister();
	      };
	    })(this));
	    this.queueEvent("unregistered");
	    return null;
	  };

	  ElementBase.prototype._updateRegistryFromPendingState = function() {
	    var pendingParent;
	    if (pendingParent = this.getPendingParent()) {
	      if (pendingParent.getIsRegistered()) {
	        return this._register();
	      }
	    } else {
	      return this._unregister();
	    }
	  };

	  ElementBase.getter({
	    instanceId: function() {
	      return this.remoteId || this.getUniqueId();
	    },
	    shortClassPathName: function() {
	      var name;
	      name = this.getClassPathName();
	      return peek(name.split(/(Neptune\.Art\.)?Engine\.(Core|Elements)\./));
	    },
	    inspectedName: function() {
	      var name;
	      return (this.getShortClassPathName()) + ":" + this.instanceId + ((name = this.getPendingName()) ? ":" + name : "");
	    },
	    inspectedNameWithoutIds: function() {
	      var name;
	      return "" + (this.getShortClassPathName()) + ((name = this.getPendingName()) ? ":" + name : "");
	    },
	    inspectedString: function() {
	      return this.inspectedName;
	    }
	  });

	  inspectedPropsNotToInclude = ["children", "name", "on"];

	  inspectedPropsFirst = ["key", "instanceId", "location", "size", "currentLocation", "currentSize"];

	  ElementBase.getter({
	    inspectedPropsMaps: function() {
	      var defaultValue, i, internalName, k, len, props, ref, ref1, value, virtual;
	      props = {};
	      for (i = 0, len = inspectedPropsFirst.length; i < len; i++) {
	        k = inspectedPropsFirst[i];
	        if (present(value = this[k])) {
	          props[k] = value;
	        }
	      }
	      ref = this.metaProperties;
	      for (k in ref) {
	        ref1 = ref[k], internalName = ref1.internalName, virtual = ref1.virtual, defaultValue = ref1.defaultValue;
	        if (!virtual && indexOf.call(inspectedPropsNotToInclude, k) < 0 && !EpochedObject.propsEq(defaultValue, value = this[internalName])) {
	          props[k] = value;
	        }
	      }
	      return props;
	    },
	    debugStructure: function() {
	      var child, result;
	      result = [this.shortClassPathName, this.inspectedPropsMaps];
	      if (this.hasChildren) {
	        result = result.concat((function() {
	          var i, len, ref, results;
	          ref = this.children;
	          results = [];
	          for (i = 0, len = ref.length; i < len; i++) {
	            child = ref[i];
	            results.push(child.debugStructure);
	          }
	          return results;
	        }).call(this));
	      }
	      return result;
	    }
	  });

	  ElementBase.prototype.inspectLocal = function() {
	    return this.getInspectedName();
	  };

	  return ElementBase;

	})(EventedEpochedObject);


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var BaseObject, ElementFactory, inspect, timeout;
	  BaseObject = Foundation.BaseObject, timeout = Foundation.timeout, inspect = Foundation.inspect;
	  return ElementFactory = (function(superClass) {
	    extend(ElementFactory, superClass);

	    ElementFactory.singletonClass();

	    function ElementFactory() {
	      ElementFactory.__super__.constructor.apply(this, arguments);
	      this._elementClassesByName = {};
	    }

	    ElementFactory.prototype.register = function(klass) {
	      var name;
	      name = klass.name;
	      if (this._elementClassesByName[name]) {
	        return timeout(100, function() {
	          return console.warn("ElementFactory: element with class-name " + name + " already exists. ClassPaths: Existing: " + (this._elementClassesByName[name].getClassPathName()) + ", Adding: " + (klass.getClassPathName()));
	        });
	      } else {
	        return this._elementClassesByName[name] = klass;
	      }
	    };

	    ElementFactory.prototype.classForElement = function(elementClassName) {
	      return this._elementClassesByName[elementClassName];
	    };

	    ElementFactory.prototype.newElement = function(elementClassName, props) {
	      var klass;
	      klass = this._elementClassesByName[elementClassName];
	      if (!klass) {
	        throw new Error("ElementFactor: class not found for " + (inspect(elementClassName)) + " (props: " + (inspect(props)) + ")");
	      }
	      return new this._elementClassesByName[elementClassName](props);
	    };

	    return ElementFactory;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	var EpochedObject, EventedEpochedObject, EventedObjectBase, Events, Foundation, StateEpoch, blankOptions, isPlainObject, log,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Events = __webpack_require__(135);

	StateEpoch = __webpack_require__(162);

	EpochedObject = __webpack_require__(167);

	EventedObjectBase = Events.EventedObjectBase;

	log = Foundation.log, isPlainObject = Foundation.isPlainObject;

	blankOptions = {};

	module.exports = EventedEpochedObject = (function(superClass) {
	  var defaultEventHandlerPreprocessor, emptyEventHandlers;

	  extend(EventedEpochedObject, superClass);

	  EventedEpochedObject.include(EventedObjectBase);

	  function EventedEpochedObject(options) {
	    if (options == null) {
	      options = blankOptions;
	    }
	    EventedEpochedObject.__super__.constructor.apply(this, arguments);
	    this._initDefaultEventHandlers(options);
	  }

	  EventedEpochedObject.concreteProperty({
	    on: {
	      "default": {},
	      validate: function(v) {
	        return isPlainObject(v);
	      },
	      setter: function(v) {
	        return this.preprocessEventHandlers(v);
	      }
	    }
	  });


	  /*
	  TODO:
	  
	    I'd like to have a "preprocessProps" function rather than one function which is
	    special-cased for event-handlers. I didn't do this with the first pass because
	    Element props can be set one at a time. They aren't set in batch like ArtReact.
	    But, I realized, they are effectively batch-set in the StateEpoch. Can we run
	    preprocessProps at the beginning of the StateEpoch???
	   */

	  EventedEpochedObject.prototype.preprocessEventHandlers = defaultEventHandlerPreprocessor = function(handlerMap) {
	    return handlerMap;
	  };

	  emptyEventHandlers = {};

	  EventedEpochedObject.prototype._initDefaultEventHandlers = function(options) {
	    if (!options.on && this.preprocessEventHandlers !== defaultEventHandlerPreprocessor) {
	      return this.setOn(emptyEventHandlers);
	    }
	  };

	  EventedEpochedObject.prototype._applyStateChanges = function() {
	    if (this.getParentChanged()) {
	      this.queueEvent("parentChanged", {
	        oldParent: this._parent,
	        parent: this._pendingState._parent
	      });
	    }
	    this.queueEvent("ready");
	    return EventedEpochedObject.__super__._applyStateChanges.apply(this, arguments);
	  };


	  /*
	  NOTE: by checking @_pendingState also, we can receive events triggered in the same
	  epoch as the Element's creation - such as "parentChanged." Actual handling
	  will be done later, in the eventEpoch, where _hasEventHandler is double-checked.
	   */

	  EventedEpochedObject.prototype._hasEventHandler = function(eventType) {
	    var _on, ref;
	    return (_on = this._pendingState._on || this._on) && !!(_on[eventType] || ((ref = _on.preprocess) != null ? ref[eventType] : void 0));
	  };


	  /*
	  To respect stateEpochs, events will never be sent to pending event handlers.
	  This would only be a concern if @_on changed between the last stateEpoch and
	  the current eventEpoch.
	   */

	  EventedEpochedObject.prototype._sendToEventHandler = function(event) {
	    var _on, e, error, error1, handler, preprocessor, processedEvent, ref, type;
	    _on = this._on;
	    if (_on) {
	      type = (processedEvent = event).type;
	      if (preprocessor = (ref = _on.preprocess) != null ? ref[type] : void 0) {
	        try {
	          processedEvent = preprocessor(event);
	        } catch (error) {
	          e = error;
	          processedEvent = null;
	          this._handleErrorInHandler(event, preprocessor, e);
	        }
	      }
	      if (processedEvent && (handler = _on[type])) {
	        try {
	          return handler(processedEvent);
	        } catch (error1) {
	          e = error1;
	          return this._handleErrorInHandler(processedEvent, handler, e);
	        }
	      }
	    }
	  };

	  return EventedEpochedObject;

	})(EpochedObject);


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(163)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, StateEpochLayout) {
	  var Epoch, Point, StateEpoch, childrenDrawChanged, childrenDrawUnchanged, globalCount, inspect, log, longestCommonSubsequence, point, requestAnimationFrame, select;
	  point = Atomic.point, Point = Atomic.Point;
	  log = Foundation.log, requestAnimationFrame = Foundation.requestAnimationFrame, longestCommonSubsequence = Foundation.longestCommonSubsequence, select = Foundation.select, inspect = Foundation.inspect, Epoch = Foundation.Epoch, globalCount = Foundation.globalCount;
	  childrenDrawUnchanged = function(before, after) {
	    return window.lcs = longestCommonSubsequence(before, after);
	  };
	  childrenDrawChanged = function(before, after) {
	    var child, i, len, results;
	    if (before) {
	      results = [];
	      for (i = 0, len = before.length; i < len; i++) {
	        child = before[i];
	        if (indexOf.call(childrenDrawUnchanged(before, after), child) < 0) {
	          results.push(child);
	        }
	      }
	      return results;
	    } else {
	      return after;
	    }
	  };
	  return StateEpoch = (function(superClass) {
	    var epochCount, markChildrenRedrawRequired;

	    extend(StateEpoch, superClass);

	    StateEpoch.singletonClass();

	    StateEpoch._stateEpochLayoutInProgress = false;

	    function StateEpoch() {
	      StateEpoch.__super__.constructor.call(this, {
	        emptyQueueAfterProcessing: true
	      });
	    }

	    StateEpoch.prototype._addChangingElement = function(element) {
	      return this.queueItem(element);
	    };

	    StateEpoch.prototype._isChangingElement = function(element) {
	      return this.isItemQueued(element);
	    };

	    StateEpoch.prototype.computeDepth = function(element) {
	      if (!element) {
	        return 0;
	      }
	      return element.__depth = 1 + this.computeDepth(element.getPendingParent());
	    };

	    StateEpoch.prototype.computeDepths = function(changingElements) {
	      var element, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        element = changingElements[i];
	        this.computeDepth(element);
	      }
	      return null;
	    };

	    StateEpoch.prototype.sortChangingElementsDepthsAscending = function(changingElements) {
	      return changingElements.sort(function(a, b) {
	        return a.__depth - b.__depth;
	      });
	    };

	    StateEpoch.prototype.notifyLayoutPropertiesChanged = function(changingElements) {
	      var element, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        element = changingElements[i];
	        if (element.__layoutPropertiesChanged) {
	          element._layoutPropertiesChanged();
	        }
	      }
	      return null;
	    };

	    StateEpoch.prototype.getDrawChangedElements = function(changingElements) {
	      var el, i, len, results;
	      results = [];
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        if (el.__redrawRequired) {
	          results.push(el);
	        }
	      }
	      return results;
	    };

	    StateEpoch.prototype.informAncestorsElementNeedsRedrawing = function(el) {
	      el._needsRedrawing();
	      return null;
	    };

	    StateEpoch.prototype.applyStateChanges = function(changingElements) {
	      var el, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        el._applyStateChanges();
	      }
	      return null;
	    };

	    markChildrenRedrawRequired = function(element) {
	      var child, i, len, ref;
	      if (element.getChildrenChanged()) {
	        ref = childrenDrawChanged(element.children, element.getPendingChildren());
	        for (i = 0, len = ref.length; i < len; i++) {
	          child = ref[i];
	          child.__redrawRequired = true;
	        }
	      }
	      return null;
	    };

	    StateEpoch.prototype.markRedrawRequired = function(changingElements) {
	      var element, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        element = changingElements[i];
	        element.__redrawRequired = element.getRedrawRequired();
	        markChildrenRedrawRequired(element);
	      }
	      return null;
	    };

	    StateEpoch.prototype.markDrawAreaChanged = function(changingElements) {
	      var element, i, len, parent;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        element = changingElements[i];
	        element.__drawAreaChanged || (element.__drawAreaChanged = element.getChildrenChanged() || (element.getCurrentSizeChanged() && (element.getPendingChildren().length === 0 || element.getPendingClip())));
	        if (element.getElementToParentMatrixChanged()) {
	          if (parent = element.getPendingParent()) {
	            parent.__drawAreaChanged = true;
	            parent._elementChanged();
	          }
	        }
	      }
	      return null;
	    };

	    StateEpoch.prototype.resetAbsMatriciesR = function(element) {
	      var child, i, len, ref;
	      if (element._elementToAbsMatrix === null && element._absToElementMatrix === null) {
	        return;
	      }
	      element._elementToAbsMatrix = element._absToElementMatrix = null;
	      element.queueEvent("absMatriciesChanged");
	      ref = element.getPendingChildren();
	      for (i = 0, len = ref.length; i < len; i++) {
	        child = ref[i];
	        this.resetAbsMatriciesR(child);
	      }
	      return null;
	    };

	    StateEpoch.prototype.resetParentToElementMatricies = function(elements) {
	      var el, i, len;
	      for (i = 0, len = elements.length; i < len; i++) {
	        el = elements[i];
	        if (el) {
	          if (el.getElementToParentMatrixChanged()) {
	            el._parentToElementMatrix = null;
	          }
	        }
	      }
	      return null;
	    };

	    StateEpoch.prototype.getElementToAbsMatrixChangedElementsDepthAscending = function(changingElements) {
	      var el, i, len, results;
	      results = [];
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        if (el.getElementToParentMatrixChanged() || el.getParentChanged()) {
	          results.push(el);
	        }
	      }
	      return results;
	    };

	    StateEpoch.prototype.resetAbsMatricies = function(elements) {
	      var el, i, len;
	      for (i = 0, len = elements.length; i < len; i++) {
	        el = elements[i];
	        this.resetAbsMatriciesR(el);
	      }
	      return null;
	    };

	    StateEpoch.prototype.updateElementParentChangingElements = function(changingElements) {
	      var el, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        if (!(el.getParentChanged())) {
	          continue;
	        }
	        el._clearRootElement();
	        el._updateRegistryFromPendingState();
	      }
	      return null;
	    };

	    StateEpoch.prototype.recomputeMousePathAndCursor = function(changingElements) {
	      var el, i, len, ref, rootElement, testedRoots;
	      testedRoots = [];
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        rootElement = el.getRootElement();
	        if (indexOf.call(testedRoots, rootElement) < 0) {
	          testedRoots.push(rootElement);
	          if ((ref = rootElement.pointerEventManager) != null) {
	            ref.updateMousePath();
	          }
	        }
	      }
	      return null;
	    };

	    epochCount = 0;

	    StateEpoch.prototype.inspectChangingElements = function(changingElements) {
	      var c, ce, changing, changingKeys, key, newV, o, oldV;
	      return {
	        epoch: ++epochCount,
	        changingElements: (function() {
	          var i, j, len, len1, results;
	          results = [];
	          for (i = 0, len = changingElements.length; i < len; i++) {
	            ce = changingElements[i];
	            o = {};
	            if ((changingKeys = ce._getChangingStateKeys()).length > 0) {
	              o.changing = changing = {};
	              for (j = 0, len1 = changingKeys.length; j < len1; j++) {
	                key = changingKeys[j];
	                oldV = ce[key];
	                newV = ce._pendingState[key];
	                switch (key) {
	                  case "_parent":
	                    oldV = oldV != null ? oldV.inspectedName : void 0;
	                    newV = newV != null ? newV.inspectedName : void 0;
	                    break;
	                  case "_children":
	                    oldV = (function() {
	                      var k, len2, results1;
	                      results1 = [];
	                      for (k = 0, len2 = oldV.length; k < len2; k++) {
	                        c = oldV[k];
	                        results1.push(c.inspectedName);
	                      }
	                      return results1;
	                    })();
	                    newV = (function() {
	                      var k, len2, results1;
	                      results1 = [];
	                      for (k = 0, len2 = newV.length; k < len2; k++) {
	                        c = newV[k];
	                        results1.push(c.inspectedName);
	                      }
	                      return results1;
	                    })();
	                }
	                changing[key] = {
	                  old: oldV,
	                  "new": newV
	                };
	              }
	            }
	            o.__depth = ce.__depth;
	            if (ce.__drawAreaChanged) {
	              o.drawAreaChanged = true;
	            }
	            if (ce.__redrawRequired) {
	              o.drawPropertiesChanged = true;
	            }
	            results.push([ce.inspectLocal(), o]);
	          }
	          return results;
	        })()
	      };
	    };

	    StateEpoch.prototype.applyAnimators = function(changingElements) {
	      var el, i, len;
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        el._applyAnimators();
	      }
	      return null;
	    };

	    StateEpoch.prototype.processEpochItems = function(changingElements) {
	      var changingElementsLength, drawChangedElements, el, elementToAbsMatrixChangedElementsDepthAscending, i, j, k, len, len1, len2, results;
	      this.applyAnimators(changingElements);
	      this.computeDepths(changingElements);
	      this.notifyLayoutPropertiesChanged(changingElements);
	      StateEpochLayout.markLayoutPropertiesChanged(changingElements);
	      changingElementsLength = changingElements.length;
	      this.sortChangingElementsDepthsAscending(changingElements);
	      StateEpoch._stateEpochLayoutInProgress = true;
	      StateEpochLayout.updateLayouts(changingElements);
	      StateEpoch._stateEpochLayoutInProgress = false;
	      this.markRedrawRequired(changingElements);
	      this.markDrawAreaChanged(changingElements);
	      if (changingElements.length !== changingElementsLength) {
	        this.sortChangingElementsDepthsAscending(changingElements);
	      }
	      elementToAbsMatrixChangedElementsDepthAscending = this.getElementToAbsMatrixChangedElementsDepthAscending(changingElements);
	      drawChangedElements = this.getDrawChangedElements(changingElements);
	      this.resetParentToElementMatricies(elementToAbsMatrixChangedElementsDepthAscending);
	      for (i = 0, len = changingElements.length; i < len; i++) {
	        el = changingElements[i];
	        if (el.getElementToParentMatrixChanged()) {
	          this.informAncestorsElementNeedsRedrawing(el);
	        }
	      }
	      this.updateElementParentChangingElements(changingElements);
	      this.applyStateChanges(changingElements);
	      this.resetAbsMatricies(elementToAbsMatrixChangedElementsDepthAscending);
	      for (j = 0, len1 = changingElements.length; j < len1; j++) {
	        el = changingElements[j];
	        if (el.__drawAreaChanged) {
	          el._drawAreaChanged();
	        }
	      }
	      results = [];
	      for (k = 0, len2 = drawChangedElements.length; k < len2; k++) {
	        el = drawChangedElements[k];
	        results.push(this.informAncestorsElementNeedsRedrawing(el));
	      }
	      return results;
	    };

	    return StateEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var ArtEngineCore, Atomic, BaseObject, Basics, CoreLayout, FlexLayout, Foundation, Point, StateEpochLayout, Unique, abs, deinfinitize, eachRunAsCharCodes, floatEq, getGlobalEpochCycle, inspect, isFunction, isInfiniteResult, isNumber, layoutChildrenFlex, layoutMargin, layoutPadding, log, longestCommonSubsequence, max, nearInfiniteSize, nearInfinity, nearInfinityResult, partition, peek, perimeter, point, point0, select, shallowEq, sizeWithPadding,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	ArtEngineCore = __webpack_require__(91);

	CoreLayout = __webpack_require__(164);

	FlexLayout = __webpack_require__(165);

	Basics = __webpack_require__(166);

	layoutChildrenFlex = FlexLayout.layoutChildrenFlex;

	nearInfiniteSize = Basics.nearInfiniteSize, nearInfinity = Basics.nearInfinity, nearInfinityResult = Basics.nearInfinityResult, layoutMargin = Basics.layoutMargin, sizeWithPadding = Basics.sizeWithPadding, layoutPadding = Basics.layoutPadding, deinfinitize = Basics.deinfinitize, isInfiniteResult = Basics.isInfiniteResult;

	point = Atomic.point, Point = Atomic.Point, perimeter = Atomic.perimeter;

	BaseObject = Foundation.BaseObject, log = Foundation.log, max = Foundation.max, shallowEq = Foundation.shallowEq, longestCommonSubsequence = Foundation.longestCommonSubsequence, select = Foundation.select, Unique = Foundation.Unique, peek = Foundation.peek, inspect = Foundation.inspect, isFunction = Foundation.isFunction, eachRunAsCharCodes = Foundation.eachRunAsCharCodes, floatEq = Foundation.floatEq, isNumber = Foundation.isNumber;

	point0 = Point.point0;

	abs = Math.abs;

	getGlobalEpochCycle = function() {
	  return ArtEngineCore.GlobalEpochCycle.globalEpochCycle;
	};

	partition = function(src, f) {
	  var intoIfFalse, intoIfTrue, k, len, v;
	  intoIfFalse = [];
	  intoIfTrue = [];
	  for (k = 0, len = src.length; k < len; k++) {
	    v = src[k];
	    if (f(v)) {
	      intoIfTrue.push(v);
	    } else {
	      intoIfFalse.push(v);
	    }
	  }
	  return [intoIfTrue, intoIfFalse];
	};

	module.exports = StateEpochLayout = (function(superClass) {
	  var alignChildren, isSpace, layoutChildrenComputeArea, layoutChildrenComputeMaxSize, layoutChildrenFlow, layoutChildrenFlowLine, layoutChildrenRowGrid, layoutElement, markParentLayoutPropertiesChanged, subLayoutChildrenAndGatherInformation;

	  extend(StateEpochLayout, superClass);

	  function StateEpochLayout() {
	    return StateEpochLayout.__super__.constructor.apply(this, arguments);
	  }

	  StateEpochLayout.markLayoutPropertiesChanged = function(changingElements) {
	    var element, k, len, results;
	    results = [];
	    for (k = 0, len = changingElements.length; k < len; k++) {
	      element = changingElements[k];
	      if ((element.getParentChanged() && element.getPendingParent()) || (element.getChildrenChanged() && element.getPendingLayoutMovesChildren())) {
	        if (!element.__layoutPropertiesChanged) {
	          element.__layoutPropertiesChanged = true;
	          element._elementChanged();
	        }
	      }
	      results.push(markParentLayoutPropertiesChanged(element));
	    }
	    return results;
	  };

	  StateEpochLayout.updateLayouts = function(layoutChangedElements) {
	    var process;
	    process = function() {
	      var element, k, len, results;
	      results = [];
	      for (k = 0, len = layoutChangedElements.length; k < len; k++) {
	        element = layoutChangedElements[k];
	        if (element.__layoutPropertiesChanged) {
	          results.push(layoutElement(element, element.getPendingParentSizeForChildren()));
	        }
	      }
	      return results;
	    };
	    if (getGlobalEpochCycle()) {
	      getGlobalEpochCycle().timePerformance("aimLayout", process);
	    } else {
	      process();
	    }
	    return null;
	  };

	  markParentLayoutPropertiesChanged = function(element) {
	    var results;
	    results = [];
	    while ((element = element.getPendingParent()) && (element.getPendingSize().getChildrenRelative() || element.getPendingLayoutMovesChildren()) && !element.__layoutPropertiesChanged) {
	      element.__layoutPropertiesChanged = true;
	      results.push(element._elementChanged());
	    }
	    return results;
	  };

	  layoutChildrenComputeMaxSize = function(parentSize, children) {
	    var child, childrenHeight, childrenWidth, k, len, size;
	    childrenHeight = 0;
	    childrenWidth = 0;
	    for (k = 0, len = children.length; k < len; k++) {
	      child = children[k];
	      if (!(children)) {
	        continue;
	      }
	      size = layoutElement(child, parentSize);
	      childrenWidth = max(childrenWidth, size.x);
	      childrenHeight = max(childrenHeight, size.y);
	    }
	    return point(childrenWidth, childrenHeight);
	  };

	  layoutChildrenComputeArea = function(currentPadding, parentSize, children, secondPassChildren, secondPassLocation) {
	    var child, childrenHeight, childrenWidth, k, len, preDeinfinitizedChildSize, skipLocationLayout, x, y;
	    childrenHeight = 0;
	    childrenWidth = 0;
	    for (k = 0, len = children.length; k < len; k++) {
	      child = children[k];
	      if (!(children)) {
	        continue;
	      }
	      if (skipLocationLayout = child.getPendingLayoutLocationParentCircular()) {
	        child._setLocationFromLayout(point0);
	        preDeinfinitizedChildSize = layoutElement(child, parentSize, true);
	        x = child.getPendingWidthInParentSpace();
	        y = child.getPendingHeightInParentSpace();
	      } else {
	        preDeinfinitizedChildSize = layoutElement(child, parentSize);
	        x = child.getPendingMaxXInParentSpace();
	        y = child.getPendingMaxYInParentSpace();
	      }
	      if (isInfiniteResult(preDeinfinitizedChildSize.x) || isInfiniteResult(preDeinfinitizedChildSize.y)) {
	        secondPassChildren.push(child);
	        if (!isInfiniteResult(x)) {
	          childrenWidth = max(childrenWidth, x);
	        }
	        if (!isInfiniteResult(y)) {
	          childrenHeight = max(childrenHeight, y);
	        }
	      } else {
	        if (skipLocationLayout) {
	          secondPassLocation.push(child);
	        }
	        childrenWidth = max(childrenWidth, x);
	        childrenHeight = max(childrenHeight, y);
	      }
	    }
	    return sizeWithPadding(childrenWidth, childrenHeight, currentPadding);
	  };

	  layoutChildrenFlowLine = function(children, rightEdge, state) {
	    var child, childI, childSize, childrenLength, currentMargin, firstChildOnLine, k, lastChildOnLine, lastLineMarginBottom, lastMarginRight, lineFull, lineHeight, m, maxLineMarginBottom, maxLineMarginTop, maxWidth, ref, ref1, ref2, ref3, x, y;
	    y = state.y, firstChildOnLine = state.firstChildOnLine, lastLineMarginBottom = state.lastLineMarginBottom, maxWidth = state.maxWidth;
	    childrenLength = children.length;
	    maxLineMarginBottom = 0;
	    maxLineMarginTop = 0;
	    lineHeight = 0;
	    lastMarginRight = 0;
	    lastChildOnLine = firstChildOnLine;
	    x = 0;
	    for (childI = k = ref = firstChildOnLine, ref1 = childrenLength; k < ref1; childI = k += 1) {
	      lastChildOnLine = childI;
	      child = children[lastChildOnLine];
	      currentMargin = child.getPendingCurrentMargin();
	      childSize = child.getPendingCurrentSize();
	      if (lastChildOnLine !== firstChildOnLine) {
	        x += max(currentMargin.left, lastMarginRight);
	      }
	      x += childSize.x;
	      lastMarginRight = currentMargin.right;
	      lineFull = x >= rightEdge;
	      if (child.getPendingLayoutSizeParentCircular() && child.getPendingSize().getXParentRelative()) {
	        if (lastChildOnLine !== firstChildOnLine) {
	          lastChildOnLine--;
	        }
	        lineFull = true;
	      }
	      if (!lineFull || lastChildOnLine === firstChildOnLine) {
	        maxLineMarginTop = max(currentMargin.top, maxLineMarginTop);
	        maxLineMarginBottom = max(currentMargin.bottom, maxLineMarginBottom);
	        lineHeight = max(lineHeight, childSize.y);
	        if (lineFull) {
	          break;
	        }
	      } else {
	        lastChildOnLine--;
	        break;
	      }
	    }
	    if (lastLineMarginBottom != null) {
	      y += max(lastLineMarginBottom, maxLineMarginTop);
	    }
	    x = 0;
	    lastMarginRight = 0;
	    for (childI = m = ref2 = firstChildOnLine, ref3 = lastChildOnLine; m <= ref3; childI = m += 1) {
	      child = children[childI];
	      currentMargin = child.getPendingCurrentMargin();
	      childSize = child.getPendingCurrentSize();
	      if (childI !== firstChildOnLine) {
	        x += max(currentMargin.left, lastMarginRight);
	      }
	      child._setLocationFromLayout(point(x, y));
	      x += childSize.x;
	      lastMarginRight = currentMargin.right;
	    }
	    if (state.flowChildren) {
	      state.firstChildIndexOfEachLine.push(firstChildOnLine);
	      state.lastChildIndexOfEachLine.push(lastChildOnLine);
	      state.widthOfEachLine.push(x);
	    }
	    state.lastLineMarginBottom = maxLineMarginBottom;
	    state.y = y + lineHeight;
	    state.firstChildOnLine = lastChildOnLine + 1;
	    return state.maxWidth = max(maxWidth, x);
	  };

	  subLayoutChildrenAndGatherInformation = function(parentSize, children, secondPassSizeLayoutChildren) {
	    var child, k, len, results;
	    results = [];
	    for (k = 0, len = children.length; k < len; k++) {
	      child = children[k];
	      if (child.getPendingLayoutSizeParentCircular()) {
	        child._setSizeFromLayout(child._layoutSize(point0, point0));
	        results.push(secondPassSizeLayoutChildren.push(child));
	      } else {
	        results.push(layoutElement(child, parentSize, true));
	      }
	    }
	    return results;
	  };

	  layoutChildrenFlow = function(element, currentPadding, parentSize, children, secondPassSizeLayoutChildren) {
	    var childrenAlignment, childrenLength, halfPixel, rightEdge, state;
	    subLayoutChildrenAndGatherInformation(parentSize, children, secondPassSizeLayoutChildren);
	    halfPixel = .5;
	    rightEdge = parentSize.x + halfPixel;
	    state = {
	      y: 0,
	      firstChildOnLine: 0,
	      lastLineMarginBottom: null,
	      maxWidth: 0
	    };
	    childrenAlignment = element.getPendingChildrenAlignment();
	    if (!floatEq(childrenAlignment.x, 0) || !floatEq(childrenAlignment.y, 0)) {
	      state.childrenAlignment = childrenAlignment;
	      state.flowChildren = children;
	      state.firstChildIndexOfEachLine = [];
	      state.lastChildIndexOfEachLine = [];
	      state.widthOfEachLine = [];
	    }
	    childrenLength = children.length;
	    while (state.firstChildOnLine < childrenLength) {
	      layoutChildrenFlowLine(children, rightEdge, state);
	    }
	    state.childrenSize = sizeWithPadding(state.maxWidth, state.y, currentPadding);
	    return state;
	  };

	  isSpace = function(charCode) {
	    return charCode === 32;
	  };

	  layoutChildrenRowGrid = function(isRowLayout, element, gridString, currentPadding, parentSize, children, secondPassSizeLayoutChildren) {
	    var gridCount, gridStep, lowerCaseACode, maxCrossSize, offset;
	    gridCount = gridString.length;
	    lowerCaseACode = 97;
	    gridStep = (isRowLayout ? parentSize.x : parentSize.y) / gridCount;
	    maxCrossSize = offset = 0;
	    eachRunAsCharCodes(gridString.toLowerCase(), function(charCode, count) {
	      var adjustedParentSize, child, gridSize, locationX, locationY;
	      gridSize = count * gridStep;
	      if (child = children[charCode - lowerCaseACode]) {
	        adjustedParentSize = isRowLayout ? parentSize.withX(gridSize) : parentSize.withY(gridSize);
	        layoutElement(child, adjustedParentSize, true);
	        locationX = child._layoutLocationX(adjustedParentSize);
	        locationY = child._layoutLocationY(adjustedParentSize);
	        maxCrossSize = max(maxCrossSize, isRowLayout ? (child._setLocationFromLayoutXY(offset + locationX, locationY), child.getPendingCurrentSize().y) : (child._setLocationFromLayoutXY(locationX, offset + locationY), child.getPendingCurrentSize().x));
	      }
	      return offset += gridSize;
	    });
	    return {
	      childrenSize: sizeWithPadding(offset, maxCrossSize, currentPadding)
	    };
	  };

	  alignChildren = function(state, parentSize, childrenSize) {
	    var child, childrenAlignment, childrenAlignmentX, childrenAlignmentY, firstChildIndexOfEachLine, firstChildOnLine, firstIndex, flowChildren, i, j, k, l, lastChildIndexOfEachLine, lastIndex, len, offsetX, offsetY, results, width, widthOfEachLine, widthOfEachLineFunction;
	    childrenAlignment = state.childrenAlignment, flowChildren = state.flowChildren, firstChildIndexOfEachLine = state.firstChildIndexOfEachLine, lastChildIndexOfEachLine = state.lastChildIndexOfEachLine, widthOfEachLine = state.widthOfEachLine, widthOfEachLineFunction = state.widthOfEachLineFunction;
	    widthOfEachLineFunction || (widthOfEachLineFunction = function(i) {
	      return widthOfEachLine[i];
	    });
	    childrenAlignmentX = childrenAlignment.x;
	    childrenAlignmentY = childrenAlignment.y;
	    results = [];
	    for (i = k = 0, len = firstChildIndexOfEachLine.length; k < len; i = ++k) {
	      firstIndex = firstChildIndexOfEachLine[i];
	      lastIndex = lastChildIndexOfEachLine[i];
	      width = widthOfEachLineFunction(i);
	      firstChildOnLine = flowChildren[firstIndex];
	      if (firstChildOnLine.getPendingLayoutSizeParentCircular() && firstChildOnLine.getPendingSize().getXParentRelative()) {
	        width = firstChildOnLine.getPendingCurrentSize().x;
	      }
	      offsetX = (parentSize.x - width) * childrenAlignmentX;
	      offsetY = (parentSize.y - childrenSize.y) * childrenAlignmentY;
	      if (!floatEq(offsetX, 0) || !floatEq(offsetY, 0)) {
	        results.push((function() {
	          var m, ref, ref1, results1;
	          results1 = [];
	          for (j = m = ref = firstIndex, ref1 = lastIndex; m <= ref1; j = m += 1) {
	            child = flowChildren[j];
	            l = child.getPendingCurrentLocation();
	            results1.push(child._setLocationFromLayout(point(l.x + offsetX, l.y + offsetY)));
	          }
	          return results1;
	        })());
	      } else {
	        results.push(void 0);
	      }
	    }
	    return results;
	  };

	  CoreLayout.layoutElement = layoutElement = function(element, parentSize, skipLocation) {
	    var child, childI, childrenFlowState, childrenGrid, childrenLayout, childrenSize, currentMargin, currentPadding, finalLocation, firstPassChildren, firstPassSize, firstPassSizeForChildren, hasCustomLayoutChildrenFirstPass, hasCustomLayoutChildrenSecondPass, k, len, len1, len2, len3, m, n, o, pendingChildren, secondPassChildren, secondPassLocationLayoutChildren, secondPassSize, secondPassSizeForChildren, secondPassSizeLayoutChildren;
	    if (!(element.__layoutPropertiesChanged || !shallowEq(element._lastParentSize, parentSize))) {
	      return element.getPendingCurrentSize();
	    }
	    element._lastParentSize = parentSize;
	    element.__layoutPropertiesChanged = false;
	    if (!skipLocation) {
	      finalLocation = element._layoutLocation(parentSize);
	    }
	    firstPassSize = element._layoutSize(parentSize, nearInfiniteSize);
	    currentPadding = layoutPadding(element, parentSize);
	    currentMargin = layoutMargin(element, parentSize);
	    firstPassSizeForChildren = element._sizeForChildren(firstPassSize);
	    hasCustomLayoutChildrenFirstPass = isFunction(element.customLayoutChildrenFirstPass);
	    hasCustomLayoutChildrenSecondPass = isFunction(element.customLayoutChildrenSecondPass);
	    pendingChildren = element.getPendingChildren();
	    firstPassChildren = secondPassChildren = null;
	    childrenLayout = element.getPendingChildrenLayout();
	    if (childrenLayout || element.getPendingSize().getChildrenRelative()) {
	      firstPassChildren = pendingChildren;
	      for (childI = k = 0, len = pendingChildren.length; k < len; childI = ++k) {
	        child = pendingChildren[childI];
	        if (child.getPendingInFlow()) {
	          if (secondPassChildren) {
	            firstPassChildren.push(child);
	          }
	        } else {
	          if (!secondPassChildren) {
	            firstPassChildren = pendingChildren.slice(0, childI);
	            secondPassChildren = [];
	          }
	          secondPassChildren.push(child);
	        }
	      }
	      secondPassSizeLayoutChildren = [];
	      secondPassLocationLayoutChildren = [];
	      secondPassChildren || (secondPassChildren = []);
	    } else {
	      secondPassChildren = pendingChildren;
	    }
	    if (firstPassChildren || hasCustomLayoutChildrenFirstPass) {
	      childrenSize = (function() {
	        if (hasCustomLayoutChildrenFirstPass) {
	          return currentPadding.addedToSize(element.customLayoutChildrenFirstPass(firstPassSizeForChildren));
	        } else {
	          childrenGrid = element.getPendingChildrenGrid();
	          switch (childrenLayout) {
	            case "flow":
	              childrenFlowState = layoutChildrenFlow(element, currentPadding, firstPassSizeForChildren, firstPassChildren, secondPassSizeLayoutChildren);
	              return childrenFlowState.childrenSize;
	            case "column":
	              childrenFlowState = childrenGrid ? layoutChildrenRowGrid(false, element, childrenGrid, currentPadding, firstPassSizeForChildren, firstPassChildren, secondPassSizeLayoutChildren) : layoutChildrenFlex(false, element, currentPadding, firstPassSizeForChildren, firstPassChildren, parentSize);
	              return childrenFlowState.childrenSize;
	            case "row":
	              childrenFlowState = childrenGrid ? layoutChildrenRowGrid(true, element, childrenGrid, currentPadding, firstPassSizeForChildren, firstPassChildren, secondPassSizeLayoutChildren) : layoutChildrenFlex(true, element, currentPadding, firstPassSizeForChildren, firstPassChildren, parentSize);
	              return childrenFlowState.childrenSize;
	            default:
	              return layoutChildrenComputeArea(currentPadding, firstPassSizeForChildren, firstPassChildren, secondPassChildren, secondPassLocationLayoutChildren);
	          }
	        }
	      })();
	      secondPassSize = element._layoutSize(parentSize, childrenSize);
	      secondPassSizeForChildren = element._sizeForChildren(secondPassSize);
	      if (secondPassSizeLayoutChildren) {
	        for (m = 0, len1 = secondPassSizeLayoutChildren.length; m < len1; m++) {
	          child = secondPassSizeLayoutChildren[m];
	          layoutElement(child, secondPassSizeForChildren, true);
	        }
	      }
	      if (secondPassLocationLayoutChildren) {
	        for (n = 0, len2 = secondPassLocationLayoutChildren.length; n < len2; n++) {
	          child = secondPassLocationLayoutChildren[n];
	          child._setLocationFromLayout(child._layoutLocation(secondPassSizeForChildren));
	        }
	      }
	    } else {
	      secondPassSize = firstPassSize;
	      secondPassSizeForChildren = firstPassSizeForChildren;
	    }
	    if (childrenFlowState != null ? childrenFlowState.childrenAlignment : void 0) {
	      alignChildren(childrenFlowState, secondPassSizeForChildren, childrenSize);
	    } else if (hasCustomLayoutChildrenSecondPass) {
	      element.customLayoutChildrenSecondPass(secondPassSizeForChildren);
	    }
	    if (secondPassChildren) {
	      for (o = 0, len3 = secondPassChildren.length; o < len3; o++) {
	        child = secondPassChildren[o];
	        layoutElement(child, secondPassSizeForChildren);
	      }
	    }
	    element._setSizeFromLayout(deinfinitize(secondPassSize));
	    if (!skipLocation) {
	      element._setLocationFromLayout(deinfinitize(finalLocation));
	    }
	    return secondPassSize;
	  };

	  return StateEpochLayout;

	})(BaseObject);


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	var Core,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Core = __webpack_require__(91);

	module.exports = Core.Layout || (Core.Layout = (function(superClass) {
	  extend(Layout, superClass);

	  function Layout() {
	    return Layout.__super__.constructor.apply(this, arguments);
	  }

	  Layout.namespace = Core;

	  Layout.namespacePath = "Neptune.Art.Engine.Core.Layout";

	  return Layout;

	})(Neptune.Base));

	Core.addNamespace(Core.Layout);


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, BaseObject, Basics, CoreLayout, FlexLayout, Foundation, Point, abs, floatEq, inspect, layoutMargin, log, max, peek, perimeter, point, point0, select, shallowEq, sizeWithPadding,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	CoreLayout = __webpack_require__(164);

	Basics = __webpack_require__(166);

	point = Atomic.point, Point = Atomic.Point, perimeter = Atomic.perimeter;

	BaseObject = Foundation.BaseObject, log = Foundation.log, inspect = Foundation.inspect, shallowEq = Foundation.shallowEq, select = Foundation.select, peek = Foundation.peek, inspect = Foundation.inspect, floatEq = Foundation.floatEq;

	layoutMargin = Basics.layoutMargin, sizeWithPadding = Basics.sizeWithPadding;

	point0 = Point.point0;

	abs = Math.abs, max = Math.max;

	module.exports = FlexLayout = (function(superClass) {
	  extend(FlexLayout, superClass);

	  function FlexLayout() {
	    return FlexLayout.__super__.constructor.apply(this, arguments);
	  }

	  FlexLayout.layoutChildrenFlex = function(isRowLayout, element, currentPadding, elementSizeForChildren, children, parentSize) {

	    /*
	    Flexbox terminology: https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes
	    
	    Names for row-layout: (swap x/y, width/height, left/top and right/bottom for column-layout)
	      main-axis:    x
	      cross-axis:   y
	      main-size:    w
	      cross-size    h
	      main-start:   left / 0
	      main-end:     right / parent-width
	      cross-start:  top / 0
	      cross-end:    bottom / parent-height
	     */
	    var addSecondPassChild, adjustedCrossSize, adjustedParentSize, child, childCrossSize, childFlexWeight, childrenAlignment, childrenSize, crossAlignment, crossCoordinate, crossOffset, crossRelativeTestFunction, crossSize, currentSize, effectivePrevMargin, elementCrossSizeForChildren, elementMainAxisIsChildRelative, elementMainSizeForChildren, finalPassMainSizesForChildren, finalPassSizeLayoutChildren, flexParentSize, hasCrossAlignment, hasMainAlignment, heightRemainingChildren, i, j, k, l, lastChildsNextMargin, len, len1, len2, len3, locationX, locationY, m, mainAlignment, mainCoordinate, mainPos, mainSize, mainSizeForChild, margin, maxCrossSize, nextMargin, previousMargin, ratio, relativeSizeIndex, relativeTestFunction, secondPassSizeForChildren, sizeForChild, spaceForFlexChildren, state, toPoint, totalFlexWeight, totalMainSize;
	    if (isRowLayout) {
	      mainCoordinate = "x";
	      crossCoordinate = "y";
	      previousMargin = "left";
	      nextMargin = "right";
	      relativeTestFunction = "getXRelativeToParentW";
	      crossRelativeTestFunction = "getYRelativeToParentH";
	      elementMainAxisIsChildRelative = element.getPendingSize().getXRelativeToChildrenW();
	    } else {
	      mainCoordinate = "y";
	      crossCoordinate = "x";
	      previousMargin = "top";
	      nextMargin = "bottom";
	      relativeTestFunction = "getYRelativeToParentH";
	      crossRelativeTestFunction = "getXRelativeToParentW";
	      elementMainAxisIsChildRelative = element.getPendingSize().getYRelativeToChildrenH();
	    }
	    elementMainSizeForChildren = elementSizeForChildren[mainCoordinate];
	    elementCrossSizeForChildren = elementSizeForChildren[crossCoordinate];
	    heightRemainingChildren = null;
	    maxCrossSize = totalFlexWeight = 0;
	    spaceForFlexChildren = elementSizeForChildren[mainCoordinate];
	    totalMainSize = 0;
	    toPoint = function(mainPos, crossPos, currentPadding) {
	      var x, y;
	      x = y = 0;
	      if (isRowLayout) {
	        x = mainPos;
	        y = crossPos;
	      } else {
	        x = crossPos;
	        y = mainPos;
	      }
	      if (currentPadding) {
	        return sizeWithPadding(x, y, currentPadding);
	      } else {
	        return point(x, y);
	      }
	    };
	    state = {};
	    lastChildsNextMargin = 0;
	    finalPassSizeLayoutChildren = null;
	    finalPassMainSizesForChildren = null;
	    addSecondPassChild = function(child, mainSizeForChild) {
	      if (finalPassSizeLayoutChildren) {
	        finalPassSizeLayoutChildren.push(child);
	        return finalPassMainSizesForChildren.push(mainSizeForChild);
	      } else {
	        finalPassSizeLayoutChildren = [child];
	        return finalPassMainSizesForChildren = [mainSizeForChild];
	      }
	    };
	    for (i = j = 0, len = children.length; j < len; i = ++j) {
	      child = children[i];
	      if (child.getPendingSize()[relativeTestFunction]()) {
	        currentSize = child._layoutSize(elementSizeForChildren, point0);
	        childFlexWeight = 1;
	        totalFlexWeight += childFlexWeight;
	      } else {
	        CoreLayout.layoutElement(child, elementSizeForChildren, true);
	        currentSize = child.getPendingCurrentSize();
	        mainSize = currentSize[mainCoordinate];
	        totalMainSize += mainSize;
	        spaceForFlexChildren -= mainSize;
	        if (child.getPendingLayoutSizeParentCircular()) {
	          addSecondPassChild(child, null);
	        } else {
	          crossSize = currentSize[crossCoordinate];
	          maxCrossSize = max(maxCrossSize, crossSize);
	        }
	      }
	      margin = layoutMargin(child, elementSizeForChildren);
	      if (i > 0) {
	        effectivePrevMargin = max(lastChildsNextMargin, margin[previousMargin]);
	        spaceForFlexChildren -= effectivePrevMargin;
	      }
	      lastChildsNextMargin = margin[nextMargin];
	    }
	    relativeSizeIndex = 0;
	    for (i = k = 0, len1 = children.length; k < len1; i = ++k) {
	      child = children[i];
	      if (!(child.getPendingSize()[relativeTestFunction]())) {
	        continue;
	      }
	      childFlexWeight = 1;
	      ratio = childFlexWeight / totalFlexWeight;
	      flexParentSize = toPoint(mainSizeForChild = spaceForFlexChildren * ratio, elementCrossSizeForChildren);
	      CoreLayout.layoutElement(child, flexParentSize, true);
	      currentSize = child.getPendingCurrentSize();
	      mainSize = currentSize[mainCoordinate];
	      if (child.getPendingLayoutSizeParentCircular()) {
	        addSecondPassChild(child, mainSizeForChild);
	      } else {
	        crossSize = currentSize[crossCoordinate];
	        maxCrossSize = max(maxCrossSize, crossSize);
	      }
	      totalFlexWeight -= childFlexWeight;
	      spaceForFlexChildren -= mainSize;
	      totalMainSize += mainSize;
	    }
	    childrenSize = toPoint(totalMainSize, maxCrossSize, currentPadding);
	    if (isRowLayout) {
	      elementMainSizeForChildren = element.getPendingSize().layoutX(parentSize, childrenSize) - currentPadding.getWidth();
	      elementCrossSizeForChildren = element.getPendingSize().layoutY(parentSize, childrenSize) - currentPadding.getHeight();
	    } else {
	      elementCrossSizeForChildren = element.getPendingSize().layoutX(parentSize, childrenSize) - currentPadding.getWidth();
	      elementMainSizeForChildren = element.getPendingSize().layoutY(parentSize, childrenSize) - currentPadding.getHeight();
	    }
	    if (finalPassSizeLayoutChildren) {
	      secondPassSizeForChildren = toPoint(elementMainSizeForChildren, elementCrossSizeForChildren);
	      for (i = l = 0, len2 = finalPassSizeLayoutChildren.length; l < len2; i = ++l) {
	        child = finalPassSizeLayoutChildren[i];
	        sizeForChild = (mainSizeForChild = finalPassMainSizesForChildren[i]) ? toPoint(mainSizeForChild, elementCrossSizeForChildren) : secondPassSizeForChildren;
	        CoreLayout.layoutElement(child, sizeForChild, true);
	      }
	    }
	    lastChildsNextMargin = 0;
	    childrenAlignment = element.getPendingChildrenAlignment();
	    crossAlignment = childrenAlignment[crossCoordinate];
	    hasCrossAlignment = !floatEq(0, crossAlignment);
	    mainPos = !elementMainAxisIsChildRelative && (hasMainAlignment = !floatEq(0, mainAlignment)) ? (mainAlignment = childrenAlignment[mainCoordinate], (elementMainSizeForChildren - totalMainSize) * mainAlignment) : 0;
	    for (i = m = 0, len3 = children.length; m < len3; i = ++m) {
	      child = children[i];
	      margin = child.getPendingCurrentMargin();
	      if (i > 0) {
	        effectivePrevMargin = max(lastChildsNextMargin, margin[previousMargin]);
	        mainPos += effectivePrevMargin;
	      }
	      lastChildsNextMargin = margin[nextMargin];
	      currentSize = child.getPendingCurrentSize();
	      mainSize = !elementMainAxisIsChildRelative && i === children.length - 1 ? elementMainSizeForChildren - mainPos : currentSize[mainCoordinate];
	      crossOffset = 0;
	      adjustedCrossSize = elementCrossSizeForChildren;
	      if (hasCrossAlignment) {
	        childCrossSize = currentSize[crossCoordinate];
	        crossOffset = (elementCrossSizeForChildren - childCrossSize) * crossAlignment;
	        adjustedCrossSize = childCrossSize;
	      }
	      adjustedParentSize = toPoint(mainSize, adjustedCrossSize);
	      locationX = child._layoutLocationX(adjustedParentSize);
	      locationY = child._layoutLocationY(adjustedParentSize);
	      if (isRowLayout) {
	        locationX += mainPos;
	        locationY += crossOffset;
	      } else {
	        locationY += mainPos;
	        locationX += crossOffset;
	      }
	      child._setLocationFromLayoutXY(locationX, locationY);
	      mainPos += mainSize;
	    }
	    state.childrenSize = toPoint(mainPos, maxCrossSize, currentPadding);
	    return state;
	  };

	  return FlexLayout;

	})(BaseObject);


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, BaseObject, Basics, Foundation, LayoutBase, Point, abs, isFunction, nearInfiniteSize, nearInfinity, nearInfinityResult, perimeter, point,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	LayoutBase = __webpack_require__(154);

	point = Atomic.point, Point = Atomic.Point, perimeter = Atomic.perimeter;

	BaseObject = Foundation.BaseObject, isFunction = Foundation.isFunction, abs = Foundation.abs;

	nearInfiniteSize = LayoutBase.nearInfiniteSize, nearInfinity = LayoutBase.nearInfinity, nearInfinityResult = LayoutBase.nearInfinityResult;

	module.exports = Basics = (function(superClass) {
	  var isInfiniteResult;

	  extend(Basics, superClass);

	  function Basics() {
	    return Basics.__super__.constructor.apply(this, arguments);
	  }

	  Basics.nearInfiniteSize = nearInfiniteSize;

	  Basics.nearInfinity = nearInfinity;

	  Basics.nearInfinityResult = nearInfinityResult;

	  Basics.layoutMargin = function(element, parentSize) {
	    var margin;
	    margin = element.getPendingMargin();
	    return element._setMarginFromLayout(perimeter(isFunction(margin) ? margin(parentSize) : margin));
	  };

	  Basics.layoutPadding = function(element, parentSize) {
	    var padding;
	    padding = element.getPendingPadding();
	    return element._setPaddingFromLayout(perimeter(isFunction(padding) ? padding(parentSize) : padding));
	  };

	  Basics.isInfiniteResult = isInfiniteResult = function(x) {
	    return abs(x) >= nearInfinityResult;
	  };

	  Basics.deinfinitize = function(p) {
	    var x, y;
	    x = p.x, y = p.y;
	    x = isInfiniteResult(x) ? 0 : x;
	    y = isInfiniteResult(y) ? 0 : y;
	    return p["with"](x, y);
	  };

	  Basics.sizeWithPadding = function(width, height, currentPadding) {
	    return point(width + currentPadding.getWidth(), height + currentPadding.getHeight());
	  };

	  return Basics;

	})(BaseObject);


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, EasingPersistantAnimator, EpochedObject, Events, Foundation, GlobalEpochCycle, PersistantAnimator, StateEpoch, blankOptions, capitalize, compactFlatten, globalEpochCycle, inspect, isFunction, isNumber, isPlainObject, isString, log, mergeInto, plainObjectsDeepEq, propInternalName, shallowEq, stateEpoch,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Events = __webpack_require__(135);

	StateEpoch = __webpack_require__(162);

	GlobalEpochCycle = __webpack_require__(168);

	PersistantAnimator = __webpack_require__(172);

	EasingPersistantAnimator = __webpack_require__(173);

	log = Foundation.log, mergeInto = Foundation.mergeInto, BaseObject = Foundation.BaseObject, capitalize = Foundation.capitalize, compactFlatten = Foundation.compactFlatten, isNumber = Foundation.isNumber, isFunction = Foundation.isFunction, shallowEq = Foundation.shallowEq, plainObjectsDeepEq = Foundation.plainObjectsDeepEq, isString = Foundation.isString, inspect = Foundation.inspect, isPlainObject = Foundation.isPlainObject;

	propInternalName = BaseObject.propInternalName;

	blankOptions = {};

	stateEpoch = StateEpoch.stateEpoch;

	globalEpochCycle = GlobalEpochCycle.globalEpochCycle;

	module.exports = EpochedObject = (function(superClass) {
	  var _setPropertiesTempVirtualPropSetterNames, _setPropertiesTempVirtualPropValues, propsEq, shallowPropsEq;

	  extend(EpochedObject, superClass);

	  EpochedObject.propsEq = propsEq = plainObjectsDeepEq;

	  EpochedObject.shallowPropsEq = shallowPropsEq = shallowEq;


	  /*
	  
	  CONCRETE PROPERTIES
	  -------------------
	  
	  Concrete-properties (non-virtual properties), once declared, take care of many common property tasks.
	  For a property "foo":
	  
	    * @_foo and @_pendingState._foo are initialized on Element-instantiation
	      - They are either intialized to default values (which are validated for consistency) or
	      - Can be initialized by the instantiating code. Ex: new Element foo:123
	    * Defines the following API
	      - element.foo       # getter, returns @_foo
	      - element.getFoo()  # old-school, alternative getter - faster in some browsers (Safari7 is 100x faster, Safary8 is 3x faster. Chrome is same speed.)
	      - element.foo = v   # setter
	      - element.setFoo(v) # old-school, alternative setter
	      - element.pendingFoo / getPendingFoo() # returns @_pendingState.foo
	      - element.fooChanged / getFooChanged() # returns propsEq @foo, @pendingFoo
	    * Elements can override the default values for properties by setting:
	      - prototype.defaultFoo to something other than undefined
	      - Ex:
	        class MyElement extends Element
	          defaultSize: ps:1
	    * Populates @class.metaProperties.foo with things like default values, names, preprocessors, etc...
	      (this code is in flux; see below for current implementation)
	  
	  options:
	    default:  # default value set when the Element is created
	    setter: (rawNewValue, oldValue, preprocessAndValidate) ->
	      THIS: the Element
	      IN:
	        rawNewValue: the exact, unprocessed, unvalidated value of 'foo' passed by the setYourProp(foo) or @yourProp = foo statement.
	        oldValue: the (custom-setter-processed) value that was last set (i.e. the value in @_pendingState)
	        preprocessAndValidate: your custom preprocessor and validator are merged into a single function you can use
	          as part of your custom setter if desired. A no-op function is provided by default, so this is always a valid function.
	      OUT: It should return the value to set in @_pendingState.
	      SIDE EFFECTS:
	        It should NOT actually set the value in @ or @_pendingState.
	        It is best to use setProperty calls for all side-effects. This maintains the epoch
	        consistency model: mutations only modify pendingState, not current-state.
	  
	      TODO:
	        Verify and implement:
	          Depricate concrete property setters:
	            They are obsolete now that we can have postSetters.
	            "postSetter" plus "preprocess" covers everything, I think.
	  
	      Use when:
	        a) you need to do update other poperties when this one changes AND/OR
	        b) you need to do something different when actually setting the value
	           as opposed to simply preprocessing the value.
	           NOTE: animations use the preprocessor when initializing their to and from values.
	  
	    postSetter: (newValue, oldValue) ->
	      THIS: the Element
	      IN:
	        newValue: the value after it has passed through the preprocessor and/or setter
	        oldValue: the (custom-setter-processed) value that was last set
	          i.e. the value in @_pendingState before the setter was called
	      OUT: ignored
	      STATE: @_pendingState has been updated with newValue; getPendingPropertyName() will return newValue
	      SIDE EFFECTS:
	        It is best to use setProperty calls for all side-effects. This maintains the epoch
	        consistency model: mutations only modify pendingState, not current-state.
	  
	      Use when:
	        a) You need to update other properties when this one changes. The simplest example is when
	          this property defines default values for other properties that haven't been set yet.
	        b) You need to fire off events when this property changes.
	  
	      This is particularly useful when writing custom Elements which consist of a struture of other
	      elements. Often you'll want to update that structure in response to properties being set.
	  
	    preprocess: (rawValue) -> processedValue
	      IN: raw setter input
	      THIS: not set
	      OUT: normalized value to actually set
	  
	    validate: (rawValue) -> boolean
	      IN: raw value
	      THIS: not set
	      OUT: true or false
	      Return false if the input is invalid which will trigger an exception.
	  
	  In all cases _elementChanged executes every time the property is set
	  .setter takes precidence over .preprocess takes precidence over .validate; you can only have one
	  
	  VIRTUAL PROPERTIES
	  ------------------
	  
	  Virtual properties are specified with the class method: @virtualProperty
	  
	  VPs have the same API from the client's perspective, but they don't have any storage in @ or @_pendingState.
	  Virtual properties are used as alternative "views" into the Element's state. Ex:
	  
	     @currentLocation isn't actually stored as a point. It is derived from @elementToParentMatrix and @axis.
	  
	  As a short-cut, you can supply just a getter function instead of options to define a
	  virtual property. See getter below for details. Here is how to use this shortcut:
	  
	    @virtualProperty
	      foo: (pending) -> ...
	  
	  Virtual property options (when isPlainObject options)
	  
	    getter: (pending) ->
	      REQUIRED
	      THIS: the Element
	      IN:   pending: true/false
	      OUT:  if pending, return the pending value, else the current value
	  
	    setter: (rawNewValue, preprocessAndValidate) ->
	      OPTIONAL
	        If not provided, this virtual property cannot be set.
	        Attempting to set this virtual property will be IGNORED
	        I.E. attempting to set this property does not trigger errors.
	  
	      THIS: the Element
	      IN:
	        rawNewValue: the value passed in by the client
	        preprocessAndValidate: your custom preprocessor and validator are merged into a single function you can use
	          as part of your custom setter if desired. A no-op function is provided by default, so this is always a valid function.
	      OUT: ignored
	  
	    validate: (v) ->
	    preprocess: (v) ->
	      works the same as the options for concrete-properties
	      except they are only used by:
	        preprocessAndValidate function passed to the setter
	        animations
	  
	  Virtual property getter-function-only (if the 'options' passed in is actually a function)
	  
	    If you pass in a function only when defining a virtual property, you are setting the getter.
	    Thus you can define a virtual property with just a getter.
	  
	  Virtual vs Concrete properties:
	  
	    * Virutal props don't have default values
	    * Virtual props don't create property slots in Element instances or their _pendingState, BUT
	    * Virtual props can have their setters invoked from initializers
	    * preprocessors and validators can be specified
	    * getter - you must specify a custom getter, see getter option above
	    * setter specification/semantics are a little different. See setter option above
	   */


	  /*
	  propertyInitializerList:
	    list of tupples, one per property:
	      [externalName, internalName, preprocessor, defaultValue]
	   */

	  EpochedObject._getPropertyInitializerList = function() {
	    return this.getPrototypePropertyExtendedByInheritance("propertyInitializerList", []);
	  };


	  /*
	  metaProperties fields:
	    externalName:
	    internalName:
	    preprocessor:
	    defaultValue:
	    setterName:
	    getterName:
	   */

	  EpochedObject._getMetaProperties = function() {
	    return this.getPrototypePropertyExtendedByInheritance("metaProperties", {});
	  };


	  /*
	  Main method for defining properties. Used by concreteProp, virtualProp and others.
	   */

	  EpochedObject._defineElementProperty = function(externalName, options) {
	    var _getter, _setter, capitalizedExternalName, customPreprocessor, customSetter, customValidator, defaultValue, drawAreaProperty, drawProperty, getter, internalName, layoutProperty, metaProperties, pendingGetter, postSetter, preprocessor, setter;
	    if (options == null) {
	      options = {};
	    }
	    internalName = propInternalName(externalName);
	    customValidator = options.validate;
	    customPreprocessor = options.preprocess;
	    preprocessor = customPreprocessor && customValidator ? customPreprocessor.length > 1 || customValidator.length > 1 ? function(v, oldValue) {
	      if (!customValidator(v, oldValue)) {
	        throw new Error("invalid value for " + externalName + ": " + (inspect(v)));
	      }
	      return customPreprocessor(v, oldValue);
	    } : function(v) {
	      if (!customValidator(v)) {
	        throw new Error("invalid value for " + externalName + ": " + (inspect(v)));
	      }
	      return customPreprocessor(v);
	    } : customValidator ? customValidator.length > 1 ? function(v, oldValue) {
	      if (!customValidator(v, oldValue)) {
	        throw new Error("invalid value for " + externalName + ": " + (inspect(v)));
	      }
	      return v;
	    } : function(v) {
	      if (!customValidator(v)) {
	        throw new Error("invalid value for " + externalName + ": " + (inspect(v)));
	      }
	      return v;
	    } : customPreprocessor || function(v) {
	      return v;
	    };
	    metaProperties = {
	      internalName: internalName,
	      externalName: externalName,
	      preprocessor: preprocessor,
	      getterName: this._propGetterName(externalName),
	      setterName: this._propSetterName(externalName)
	    };
	    if (options.virtual) {
	      metaProperties.virtual = true;
	      _setter = options.setter || function() {};
	      _getter = options.getter;
	      getter = _getter;
	      pendingGetter = function() {
	        return _getter.call(this, true);
	      };
	      setter = function(rawValue) {
	        return _setter.call(this, rawValue, preprocessor);
	      };
	    } else {
	      metaProperties.defaultValue = defaultValue = preprocessor(options["default"]);
	      getter = function(pending) {
	        if (pending) {
	          return this._pendingState[internalName];
	        } else {
	          return this[internalName];
	        }
	      };
	      pendingGetter = function() {
	        return this._pendingState[internalName];
	      };
	      layoutProperty = options.layoutProperty, drawProperty = options.drawProperty, drawAreaProperty = options.drawAreaProperty, postSetter = options.postSetter, setter = options.setter;
	      setter = (customSetter = setter) ? postSetter ? function(v) {
	        var newValue, oldValue;
	        oldValue = this._pendingState[internalName];
	        newValue = v;
	        this._pendingState[internalName] = customSetter.call(this, newValue, oldValue, preprocessor);
	        this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	        postSetter.call(this, newValue, oldValue);
	        return newValue;
	      } : function(v) {
	        var newValue, oldValue;
	        oldValue = this._pendingState[internalName];
	        newValue = v;
	        this._pendingState[internalName] = customSetter.call(this, newValue, oldValue, preprocessor);
	        this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	        return newValue;
	      } : postSetter ? function(v) {
	        var newValue, oldValue;
	        oldValue = this._pendingState[internalName];
	        newValue = this._pendingState[internalName] = preprocessor(v, oldValue);
	        this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	        postSetter.call(this, newValue, oldValue);
	        return newValue;
	      } : preprocessor.length > 1 ? function(v) {
	        var newValue, oldValue;
	        oldValue = this._pendingState[internalName];
	        newValue = this._pendingState[internalName] = preprocessor(v, oldValue);
	        this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	        return newValue;
	      } : function(v) {
	        var newValue;
	        newValue = this._pendingState[internalName] = preprocessor(v);
	        this._elementChanged(layoutProperty, drawProperty, drawAreaProperty);
	        return newValue;
	      };
	      this._getPropertyInitializerList().push([internalName, defaultValue, externalName]);
	    }
	    this._getMetaProperties()[externalName] = metaProperties;
	    capitalizedExternalName = capitalize(externalName);
	    this._addGetter(this.prototype, externalName, getter);
	    this._addGetter(this.prototype, "pending" + capitalizedExternalName, pendingGetter);
	    this._addGetter(this.prototype, externalName + "Changed", function() {
	      return !shallowPropsEq(getter.call(this), pendingGetter.call(this));
	    });
	    return this._addSetter(this.prototype, externalName, setter);
	  };

	  EpochedObject.concreteProperty = function(map) {
	    var options, prop, results;
	    results = [];
	    for (prop in map) {
	      options = map[prop];
	      results.push(this._defineElementProperty(prop, options));
	    }
	    return results;
	  };


	  /*
	  IN: map from prop names to:
	    a) property options object: see 'Virtual property options' above
	    b) OR getter function f. Equivelent to (propName: getter: f)
	   */

	  EpochedObject.virtualProperty = function(map) {
	    var options, prop, results;
	    results = [];
	    for (prop in map) {
	      options = map[prop];
	      if (isFunction(options)) {
	        options = {
	          getter: options
	        };
	      }
	      options.virtual = true;
	      results.push(this._defineElementProperty(prop, options));
	    }
	    return results;
	  };


	  /*
	  EFFECT: set each property in propertySet if it is a legitimate property; otherwise it is ignored
	   */

	  _setPropertiesTempVirtualPropSetterNames = [];

	  _setPropertiesTempVirtualPropValues = [];


	  /*
	  Sets all properties in propertySet
	  undefined values and properties without setters are skipped
	   */

	  EpochedObject.prototype.setProperties = function(props) {
	    var i, j, metaProperties, mp, prop, ref, setterName, value, virtualPropCount;
	    metaProperties = this.metaProperties;
	    virtualPropCount = 0;
	    for (prop in props) {
	      value = props[prop];
	      if (value !== void 0 && (mp = metaProperties[prop]) && (setterName = mp.setterName)) {
	        if (mp.virtual) {
	          _setPropertiesTempVirtualPropSetterNames[virtualPropCount] = setterName;
	          _setPropertiesTempVirtualPropValues[virtualPropCount++] = value;
	        } else {
	          this[setterName](value);
	        }
	      }
	    }
	    for (i = j = 0, ref = virtualPropCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
	      this[_setPropertiesTempVirtualPropSetterNames[i]](_setPropertiesTempVirtualPropValues[i]);
	    }
	    return props;
	  };


	  /*
	  EFFECT: set all properties, use propertySet values if present, otherwise use defaults
	  
	  TODO: this sets @parent and @children, it shouldn't, but they aren't virtual...
	  TODO: if this is used much, it would be faster to have a concreteMetaProperties array so we don't have to test mp.virtual
	    this "concreteMetaProperties" array would not include parent or children
	   */

	  EpochedObject.prototype.replaceProperties = function(propertySet) {
	    var externalName, metaProperties, mp, name, property;
	    metaProperties = this.metaProperties;
	    for (property in metaProperties) {
	      mp = metaProperties[property];
	      if (!(!mp.virtual)) {
	        continue;
	      }
	      externalName = mp.externalName;
	      if (typeof this[name = mp.setterName] === "function") {
	        this[name](propertySet.hasOwnProperty(externalName) ? propertySet[externalName] : mp.defaultValue);
	      }
	    }
	    return propertySet;
	  };

	  EpochedObject.prototype.setProperty = function(property, value) {
	    var mp, name;
	    if (mp = this.metaProperties[property]) {
	      return typeof this[name = mp.setterName] === "function" ? this[name](value) : void 0;
	    }
	  };

	  EpochedObject.prototype.preprocessProperty = function(property, value) {
	    var mp;
	    if (mp = this.metaProperties[property]) {
	      return mp.preprocessor(value);
	    }
	  };


	  /*
	  EFFECT: reset one property to its default
	   */

	  EpochedObject.prototype.resetProperty = function(property) {
	    var mp, name;
	    if (mp = this.metaProperties[property]) {
	      return typeof this[name = mp.setterName] === "function" ? this[name](mp.defaultValue) : void 0;
	    }
	  };

	  EpochedObject.prototype.preprocessProperties = function(propertySet) {
	    var metaProperties, mp, property, value;
	    metaProperties = this.metaProperties;
	    for (property in propertySet) {
	      value = propertySet[property];
	      if (mp = metaProperties[property]) {
	        propertySet[property] = mp.preprocessor(value, this[mp.internalName]);
	      }
	    }
	    return propertySet;
	  };

	  EpochedObject.prototype.getPendingPropertyValues = function(propertyNames) {
	    var j, len, metaProp, property, ret;
	    ret = {};
	    for (j = 0, len = propertyNames.length; j < len; j++) {
	      property = propertyNames[j];
	      if (metaProp = this.metaProperties[property]) {
	        ret[property] = this._pendingState[metaProp.internalName];
	      }
	    }
	    return ret;
	  };

	  EpochedObject.prototype.getPropertyValues = function(propertyNames) {
	    var j, len, metaProp, property, ret;
	    ret = {};
	    for (j = 0, len = propertyNames.length; j < len; j++) {
	      property = propertyNames[j];
	      if (metaProp = this.metaProperties[property]) {
	        ret[property] = this[metaProp.internalName];
	      }
	    }
	    return ret;
	  };

	  EpochedObject.getter({
	    props: function() {
	      var k, ref, ret, virtual;
	      ret = {};
	      ref = this.metaProperties;
	      for (k in ref) {
	        virtual = ref[k].virtual;
	        ret[k] = this[k];
	      }
	      return ret;
	    },
	    concreteProps: function() {
	      var internalName, k, ref, ref1, ret, virtual;
	      ret = {};
	      ref = this.metaProperties;
	      for (k in ref) {
	        ref1 = ref[k], internalName = ref1.internalName, virtual = ref1.virtual;
	        if (!virtual) {
	          ret[k] = this[internalName];
	        }
	      }
	      return ret;
	    },
	    virtualProps: function() {
	      var k, ref, ret, virtual;
	      ret = {};
	      ref = this.metaProperties;
	      for (k in ref) {
	        virtual = ref[k].virtual;
	        if (virtual) {
	          ret[k] = this[k];
	        }
	      }
	      return ret;
	    }
	  });

	  EpochedObject.prototype.onNextReady = function(callback, forceEpoch) {
	    if (forceEpoch == null) {
	      forceEpoch = true;
	    }
	    return stateEpoch.onNextReady(callback, forceEpoch);
	  };

	  EpochedObject.onNextReady = function(callback, forceEpoch) {
	    if (forceEpoch == null) {
	      forceEpoch = true;
	    }
	    return stateEpoch.onNextReady(callback, forceEpoch);
	  };

	  EpochedObject.prototype.onNextEpoch = function(callback, forceEpoch) {
	    if (forceEpoch == null) {
	      forceEpoch = true;
	    }
	    return globalEpochCycle.onNextReady(callback, forceEpoch);
	  };

	  EpochedObject.onNextEpoch = function(callback, forceEpoch) {
	    if (forceEpoch == null) {
	      forceEpoch = true;
	    }
	    return globalEpochCycle.onNextReady(callback, forceEpoch);
	  };

	  EpochedObject.prototype.onIdle = function(callback) {
	    return stateEpoch.onNextReady(callback);
	  };

	  EpochedObject.prototype.getState = function(pending) {
	    if (pending == null) {
	      pending = false;
	    }
	    if (pending) {
	      return this._pendingState;
	    } else {
	      return this;
	    }
	  };

	  EpochedObject.concreteProperty({
	    animators: {
	      "default": null,
	      preprocess: function(v) {
	        var addProp, j, len, options, processedAnimators, prop, ref;
	        processedAnimators = null;
	        addProp = function(prop, options) {
	          processedAnimators || (processedAnimators = {});
	          return processedAnimators["_" + prop] = options instanceof PersistantAnimator ? options : isFunction(options) ? new PersistantAnimator(prop, {
	            animate: options
	          }) : (options != null ? options.animate : void 0) ? new PersistantAnimator(prop, options) : new EasingPersistantAnimator(prop, options);
	        };
	        if (isString(v)) {
	          ref = v.match(/[a-z]+/gi);
	          for (j = 0, len = ref.length; j < len; j++) {
	            prop = ref[j];
	            addProp(prop);
	          }
	        } else {
	          for (prop in v) {
	            options = v[prop];
	            addProp(prop, options);
	          }
	        }
	        return processedAnimators;
	      }
	    },
	    voidProps: {
	      "default": null,
	      validate: function(v) {
	        return !v || isPlainObject(v);
	      }
	    }
	  });

	  function EpochedObject(options) {
	    if (options == null) {
	      options = blankOptions;
	    }
	    EpochedObject.__super__.constructor.apply(this, arguments);
	    this._pendingState = {};
	    this.__stateEpochCount = 0;
	    this.__stateChangeQueued = false;
	    this.__layoutPropertiesChanged = false;
	    this.__drawAreaChanged = true;
	    this.__drawPropertiesChanged = true;
	    this._initProperties(options);
	  }

	  EpochedObject._generateSetPropertyDefaults = function() {
	    var defaultName, defaultOverride, externalName, functionString, i, k, metaProperties, preprocessor, propertyInitializerList, v, value;
	    propertyInitializerList = this._getPropertyInitializerList();
	    metaProperties = this._getMetaProperties();
	    functionString = compactFlatten([
	      "(function(options) {", "var _pendingState = this._pendingState;", "var metaProperties = this.metaProperties;", (function() {
	        var j, len, ref, results;
	        results = [];
	        for (i = j = 0, len = propertyInitializerList.length; j < len; i = ++j) {
	          ref = propertyInitializerList[i], k = ref[0], v = ref[1], externalName = ref[2];
	          value = (defaultOverride = this.prototype[defaultName = "default" + capitalize(externalName)]) !== void 0 ? ((preprocessor = metaProperties[externalName].preprocessor) ? this.prototype[defaultName] = preprocessor(defaultOverride) : void 0, "this." + defaultName) : v === null || v === false || v === true || v === void 0 || isNumber(v) ? v : "metaProperties." + externalName + ".defaultValue;";
	          results.push("this." + k + " = _pendingState." + k + " = " + value + ";");
	        }
	        return results;
	      }).call(this), "})"
	    ]).join("\n");
	    return eval(functionString);
	  };

	  EpochedObject.prototype._initProperties = function(options) {
	    var metaProperties, voidProps;
	    metaProperties = this.metaProperties;
	    if (!this.__proto__.hasOwnProperty("_initPropertiesAuto")) {
	      this.__proto__._initPropertiesAuto = this["class"]._generateSetPropertyDefaults();
	    }
	    this._initPropertiesAuto(options);
	    this.setProperties(options);
	    if (voidProps = options.voidProps) {
	      this.setProperties(voidProps);
	      this.onNextEpoch((function(_this) {
	        return function() {
	          var _, k, props, v;
	          props = {};
	          for (k in voidProps) {
	            _ = voidProps[k];
	            v = options[k];
	            if (v === void 0) {
	              v = metaProperties[k].defaultValue;
	            }
	            props[k] = v;
	          }
	          return _this.setProperties(props);
	        };
	      })(this));
	    }
	    this._elementChanged(true, true, true);
	    return null;
	  };

	  EpochedObject.prototype._getChangingStateKeys = function() {
	    var k, ref, results, v;
	    ref = this._pendingState;
	    results = [];
	    for (k in ref) {
	      v = ref[k];
	      if (!shallowPropsEq(this[k], this._pendingState[k])) {
	        results.push(k);
	      }
	    }
	    return results;
	  };

	  EpochedObject.prototype._logPendingStateChanges = function() {
	    var k, newValues, oldValues, ref, v;
	    oldValues = {};
	    newValues = {};
	    ref = this._pendingState;
	    for (k in ref) {
	      v = ref[k];
	      if (!(!(k.match(/^__/)) && !plainObjectsDeepEq(v, this[k]))) {
	        continue;
	      }
	      oldValues[k] = this[k];
	      newValues[k] = v;
	    }
	    return log({
	      "ElementBase pending state changes": {
	        element: this.inspectedName,
	        old: oldValues,
	        "new": newValues
	      }
	    });
	  };

	  EpochedObject.prototype._getIsChangingElement = function() {
	    return stateEpoch._isChangingElement(this);
	  };

	  EpochedObject.prototype._elementChanged = function(layoutPropertyChanged, drawPropertyChanged, drawAreaPropertyChanged) {
	    var _pendingState;
	    _pendingState = this._pendingState;
	    if (layoutPropertyChanged) {
	      if (StateEpoch._stateEpochLayoutInProgress) {
	        console.error("__layoutPropertiesChanged while _stateEpochLayoutInProgress");
	      }
	      this.__layoutPropertiesChanged = true;
	    }
	    if (drawPropertyChanged) {
	      this.__drawPropertiesChanged = true;
	    }
	    if (drawAreaPropertyChanged) {
	      this.__drawAreaChanged = true;
	    }
	    if (!this.__stateChangeQueued) {
	      this.__stateChangeQueued = true;
	      return stateEpoch._addChangingElement(this);
	    }
	  };


	  /*
	  TODO:
	    It would probably be faster overall to:
	  
	      a) move all the __* properties out of _pendingState
	        Probably just promote them to the Element itself
	        DONE
	  
	      b) replace _pendingState with a new, empty object after _applyStateChanges
	        SBD March-2016: I think this is still a good idea.
	          @_pendingState currently contains every property.
	          That's a lot of extra work every state epoch!
	          The problem is, we currently rely on that in many places!
	          One thing to perf-test: We could make an array of the names of props that changed.
	            Then, _applyStateChanges could iterate through that array, pulling values out of @_pendingState.
	            (in this scenario we would keep @_pendingState fully of all properties, as it currently is)
	  
	      c) for faster Element creation
	        - could we just say the Element "consumes" the props passed to it on creation?
	        - then we can alter that props object
	        - every prop in the passed-in props object gets run through the preprocessors/validators
	        - and the result is assigned back to the props object
	        - then the props object BECOMES the first @_pendingState
	        SBD March-2016: I'm less sure this makes sense.
	  
	      d) SBD March-2016
	        I have no idea if this would work, but what would be really cool is if new
	        elements could directly apply there initial properties rather then putting them through
	        the state-epoch pending cycle. This would probalby be a huge savings for object creation,
	        which currently is one of out biggest performance problems.
	  
	        The problem is, new elements still need to go through a StateEpoch for layout...
	   */

	  EpochedObject.prototype._applyStateChanges = function() {
	    this.__stateChangeQueued = false;
	    this.__stateEpochCount++;
	    return mergeInto(this, this._pendingState);
	  };

	  EpochedObject.prototype._applyAnimators = function() {
	    var animator, currentValue, frameSecond, newValue, pendingAnimators, pendingValue, prop, ref;
	    if (this.__stateEpochCount > 0 && (pendingAnimators = this._pendingState._animators)) {
	      frameSecond = stateEpoch.frameSecond;
	      ref = this._pendingState;
	      for (prop in ref) {
	        pendingValue = ref[prop];
	        if (!(animator = pendingAnimators[prop])) {
	          continue;
	        }
	        currentValue = this[prop];
	        newValue = animator.active || !propsEq(currentValue, pendingValue) ? animator.animateAbsoluteTime(this, currentValue, pendingValue, frameSecond) : pendingValue;
	        this._pendingState[prop] = newValue;
	      }
	    }
	    return null;
	  };

	  return EpochedObject;

	})(BaseObject);


/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var DrawCacheManager, DrawEpoch, DummyEpoch, Epoch, EventEpoch, Foundation, GlobalEpochCycle, IdleEpoch, Map, StateEpoch, arrayWithout, currentSecond, drawCacheManager, drawEpoch, dummyEpoch, durationString, eventEpoch, fastBind, fluxEpoch, globalCount, idleEpoch, isPlainObject, log, miniInspect, reactEpoch, requestAnimationFrame, stateEpoch, time, toMs,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	EventEpoch = __webpack_require__(135).EventEpoch;

	StateEpoch = __webpack_require__(162);

	DrawEpoch = __webpack_require__(169);

	IdleEpoch = __webpack_require__(171);

	DrawCacheManager = __webpack_require__(170);

	log = Foundation.log, requestAnimationFrame = Foundation.requestAnimationFrame, Map = Foundation.Map, miniInspect = Foundation.miniInspect, time = Foundation.time, arrayWithout = Foundation.arrayWithout, currentSecond = Foundation.currentSecond, Epoch = Foundation.Epoch, globalCount = Foundation.globalCount, isPlainObject = Foundation.isPlainObject, durationString = Foundation.durationString, fastBind = Foundation.fastBind;

	toMs = function(s) {
	  return (s * 1000).toFixed(1) + "ms";
	};

	eventEpoch = EventEpoch.eventEpoch;

	drawEpoch = DrawEpoch.drawEpoch;

	stateEpoch = StateEpoch.stateEpoch;

	idleEpoch = IdleEpoch.idleEpoch;

	drawCacheManager = DrawCacheManager.drawCacheManager;

	DummyEpoch = (function(superClass) {
	  extend(DummyEpoch, superClass);

	  function DummyEpoch() {
	    return DummyEpoch.__super__.constructor.apply(this, arguments);
	  }

	  DummyEpoch.singletonClass();

	  return DummyEpoch;

	})(Epoch);

	dummyEpoch = DummyEpoch.dummyEpoch;

	fluxEpoch = reactEpoch = dummyEpoch;

	module.exports = GlobalEpochCycle = (function(superClass) {
	  var timerStack;

	  extend(GlobalEpochCycle, superClass);

	  GlobalEpochCycle.singletonClass();

	  GlobalEpochCycle.classGetter({
	    activeCanvasElements: function() {
	      return this.globalEpochCycle.activeCanvasElements;
	    }
	  });

	  function GlobalEpochCycle() {
	    var boundQueueNextEpoch;
	    GlobalEpochCycle.__super__.constructor.apply(this, arguments);
	    this.cycleQueued = false;
	    this.processingCycle = false;
	    this.activeCanvasElements = [];
	    this._fluxOnIdleOkUntil = currentSecond();
	    this._resetThisCyclesStats();
	    boundQueueNextEpoch = fastBind(this.queueNextEpoch, this);
	    idleEpoch.queueNextEpoch = stateEpoch.queueNextEpoch = drawEpoch.queueNextEpoch = eventEpoch.queueNextEpoch = boundQueueNextEpoch;
	    eventEpoch.flushEpochNow = (function(_this) {
	      return function() {
	        return _this.flushEpochNow();
	      };
	    })(this);
	    eventEpoch.logEvent = (function(_this) {
	      return function(name, id) {
	        var ref;
	        return (ref = _this.globalEpochStats) != null ? ref.logEvent(name, id) : void 0;
	      };
	    })(this);
	  }

	  GlobalEpochCycle.prototype.allowFluxOnIdle = function(nextNSeconds) {
	    return this._fluxOnIdleOkUntil = currentSecond() + nextNSeconds;
	  };

	  GlobalEpochCycle.prototype._resetThisCyclesStats = function() {
	    return this.performanceSamples = {};
	  };

	  GlobalEpochCycle.prototype.addPerformanceSample = function(name, value) {
	    if (!this.performanceSamples) {
	      throw new Error("@performanceSamples not set");
	    }
	    return this.performanceSamples[name] = (this.performanceSamples[name] || 0) + value;
	  };

	  timerStack = [];

	  GlobalEpochCycle.prototype.timePerformance = function(name, f) {
	    var start, subTimeTotal, timeResult, tsl;
	    start = currentSecond();
	    timerStack.push(0);
	    f();
	    subTimeTotal = timerStack.pop();
	    timeResult = currentSecond() - start;
	    if ((tsl = timerStack.length) > 0) {
	      timerStack[tsl - 1] += timeResult;
	    }
	    return this.addPerformanceSample(name, timeResult - subTimeTotal);
	  };

	  GlobalEpochCycle.getter({
	    numActivePointers: function() {
	      var canvasElement, count, i, len, ref;
	      count = 0;
	      ref = this.activeCanvasElements;
	      for (i = 0, len = ref.length; i < len; i++) {
	        canvasElement = ref[i];
	        count += canvasElement.getNumActivePointers();
	      }
	      return count;
	    },
	    idle: function() {
	      return reactEpoch.getEpochLength() === 0 && stateEpoch.getEpochLength() === 0 && eventEpoch.getEpochLength() === 0;
	    },
	    epochLength: function() {
	      return idleEpoch.getEpochLength() + eventEpoch.getEpochLength() + stateEpoch.getEpochLength() + reactEpoch.getEpochLength() + fluxEpoch.getEpochLength();
	    }
	  });

	  GlobalEpochCycle.getter({
	    idleEpoch: function() {
	      return idleEpoch;
	    },
	    eventEpoch: function() {
	      return eventEpoch;
	    },
	    stateEpoch: function() {
	      return stateEpoch;
	    },
	    drawEpoch: function() {
	      return drawEpoch;
	    },
	    reactEpoch: function() {
	      return reactEpoch;
	    },
	    fluxEpoch: function() {
	      return fluxEpoch;
	    }
	  });

	  GlobalEpochCycle.prototype.includeReact = function(epoch) {
	    return (reactEpoch = epoch).queueNextEpoch = (function(_this) {
	      return function() {
	        return _this.queueNextEpoch();
	      };
	    })(this);
	  };

	  GlobalEpochCycle.prototype.includeFlux = function(epoch) {
	    return (fluxEpoch = epoch).queueNextEpoch = (function(_this) {
	      return function() {
	        return _this.queueNextEpoch();
	      };
	    })(this);
	  };

	  GlobalEpochCycle.prototype.logEvent = function(name, id) {
	    var ref;
	    return (ref = this.globalEpochStats) != null ? ref.logEvent(name, id) : void 0;
	  };

	  GlobalEpochCycle.prototype.dettachCanvasElement = function(toRemoveCe) {
	    return this.activeCanvasElements = arrayWithout(this.activeCanvasElements, toRemoveCe);
	  };

	  GlobalEpochCycle.prototype.attachCanvasElement = function(toAddCe) {
	    return this.activeCanvasElements.push(toAddCe);
	  };

	  GlobalEpochCycle.prototype.processFluxEpoch = function() {
	    return this.timePerformance("flux", (function(_this) {
	      return function() {
	        return fluxEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processIdleEpoch = function() {
	    return this.timePerformance("idle", (function(_this) {
	      return function() {
	        return idleEpoch != null ? idleEpoch.processEpoch() : void 0;
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processEventEpoch = function() {
	    return this.timePerformance("event", (function(_this) {
	      return function() {
	        return eventEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processReactEpoch = function() {
	    return this.timePerformance("react", (function(_this) {
	      return function() {
	        return reactEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processStateEpoch = function() {
	    return this.timePerformance("aim", (function(_this) {
	      return function() {
	        return stateEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.processDrawEpoch = function() {
	    return this.timePerformance("draw", (function(_this) {
	      return function() {
	        return drawEpoch.processEpoch();
	      };
	    })(this));
	  };

	  GlobalEpochCycle.prototype.flushEpochNow = function() {
	    if (this.processingCycle) {
	      return;
	    }
	    this.processingCycle = true;
	    this._processCycleExceptDraw();
	    return this.processingCycle = false;
	  };

	  GlobalEpochCycle.prototype._processCycleExceptDraw = function() {
	    this.processEventEpoch();
	    this.processFluxEpoch();
	    if (this.getIdle()) {
	      this.processIdleEpoch();
	    }
	    reactEpoch.updateGlobalCounts();
	    this.processReactEpoch();
	    globalCount("reactEpochAfter", reactEpoch.getEpochLength());
	    stateEpoch.updateGlobalCounts();
	    this.processStateEpoch();
	    return globalCount("stateEpochAfter", stateEpoch.getEpochLength());
	  };

	  GlobalEpochCycle.prototype.processEpochItems = function(items) {
	    var drawCount, gc, globalEpochFrameTime, i, k, k2, keys, len, reactWastedWork, reactWork, ref, sorted, startTime, v, v2;
	    fluxEpoch._frameSecond = idleEpoch._frameSecond = eventEpoch._frameSecond = reactEpoch._frameSecond = stateEpoch._frameSecond = drawEpoch._frameSecond = this._frameSecond;
	    Foundation.resetGlobalCounts();
	    startTime = currentSecond();
	    this._resetThisCyclesStats();
	    this.processingCycle = true;
	    this._processCycleExceptDraw();
	    if (stateEpoch.getEpochLength() > 0) {
	      this.processStateEpoch();
	    }
	    drawCount = drawEpoch.epochLength;
	    this.processDrawEpoch();
	    this.processingCycle = false;
	    if (this.getEpochLength() > 0) {
	      this.queueNextEpoch();
	    }
	    if (drawCount > 0) {
	      globalEpochFrameTime = currentSecond() - startTime;
	      gc = Foundation.globalCounts;
	      if (false) {
	        keys = Object.keys(gc).sort();
	        sorted = {};
	        for (i = 0, len = keys.length; i < len; i++) {
	          k = keys[i];
	          v = gc[k];
	          if (v > 0 && v < 1) {
	            v = toMs(v);
	          }
	          if (isPlainObject(v)) {
	            for (k2 in v) {
	              v2 = v[k2];
	              if (v2 > 0 && v2 < 1) {
	                v[k2] = toMs(v2);
	              }
	            }
	          }
	          sorted[k] = v;
	        }
	        log({
	          globalCounts: sorted,
	          fps: (1 / globalEpochFrameTime).toFixed(1)
	        });
	        reactWork = (gc["ReactComponent_Created"] || 0) + (gc["ReactVirtualElement_Created"] || 0);
	        reactWastedWork = (gc["ReactComponent_UpdateFromTemporaryComponent_NoChange"] || 0) + (gc["ReactVirtualElement_UpdateFromTemporaryVirtualElement_NoChange"] || 0);
	        if (reactWork > 0) {
	          log({
	            reactWork: reactWork,
	            reactWastedWork: reactWastedWork,
	            reactEfficiency: 1 - reactWastedWork / reactWork
	          });
	        }
	      }
	      return (ref = this.globalEpochStats) != null ? ref.add(startTime, globalEpochFrameTime, this.performanceSamples) : void 0;
	    }
	  };

	  return GlobalEpochCycle;

	})(Epoch);


/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(170)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, DrawCacheManager) {
	  var DrawEpoch, Epoch, Point, drawCacheManager, globalCount, inspect, log, longestCommonSubsequence, point, requestAnimationFrame, select;
	  point = Atomic.point, Point = Atomic.Point;
	  log = Foundation.log, requestAnimationFrame = Foundation.requestAnimationFrame, longestCommonSubsequence = Foundation.longestCommonSubsequence, select = Foundation.select, inspect = Foundation.inspect, Epoch = Foundation.Epoch, globalCount = Foundation.globalCount;
	  drawCacheManager = DrawCacheManager.drawCacheManager;
	  return DrawEpoch = (function(superClass) {
	    extend(DrawEpoch, superClass);

	    function DrawEpoch() {
	      return DrawEpoch.__super__.constructor.apply(this, arguments);
	    }

	    DrawEpoch.singletonClass();

	    DrawEpoch.prototype.processEpochItems = function() {
	      DrawEpoch.__super__.processEpochItems.apply(this, arguments);
	      return drawCacheManager.advanceFrame();
	    };

	    return DrawEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(91), __webpack_require__(11), __webpack_require__(93), __webpack_require__(129)], __WEBPACK_AMD_DEFINE_RESULT__ = function(ArtEngineCore, Foundation, Atomic, Canvas) {
	  var BaseObject, Bitmap, CacheBitmap, DrawCacheManager, Map, Matrix, Point, Rectangle, getGlobalEpochCycle, inspect, log, matrix, point, rect, remove, timeout;
	  point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;
	  inspect = Foundation.inspect, BaseObject = Foundation.BaseObject, Map = Foundation.Map, timeout = Foundation.timeout, remove = Foundation.remove, log = Foundation.log;
	  Bitmap = Canvas.Bitmap;
	  getGlobalEpochCycle = function() {
	    return ArtEngineCore.GlobalEpochCycle.globalEpochCycle;
	  };

	  /*
	  PURPOSE
	  - Keep the maximum byte-size of the cache under a cap.
	  - recycle unused bitmaps since creating bitmaps is costly
	  
	  TODO
	  
	  Stop clearing cached sub-elements when drawing a new cached element.
	   - the DrawCacheManager will reclaim their bitmaps in time
	  
	  Stop tracking caching stats in Element
	  
	  Call advanceFrameTime every global draw-frame
	  Call doneWithCacheBitmap from _clearDrawCache(doNotUpdateDrawCacheManager) unless doNotUpdateDrawCacheManager is true
	  call allocateCacheBitmap when a new cache bitmap is used
	  call useCacheBitmap every time a the drawCache bitmap is used
	   */
	  CacheBitmap = (function(superClass) {
	    extend(CacheBitmap, superClass);

	    function CacheBitmap(element1, bitmap1, lastFrameUsed) {
	      this.element = element1;
	      this.bitmap = bitmap1;
	      this._reset(lastFrameUsed);
	    }

	    CacheBitmap.prototype._reset = function(lastFrameUsed) {
	      this.useCount = 0;
	      return this.lastFrameUsed = lastFrameUsed || 0;
	    };

	    CacheBitmap.prototype.recycle = function(newElement, lastFrameUsed) {
	      this.elementDoneWithCacheBitmap();
	      this.element = newElement;
	      this._reset(lastFrameUsed);
	      this.bitmap.clear();
	      return this.bitmap;
	    };

	    CacheBitmap.prototype.use = function(currentFrameNumber) {
	      this.lastFrameUsed = currentFrameNumber;
	      return this.useCount++;
	    };

	    CacheBitmap.prototype.elementDoneWithCacheBitmap = function() {
	      if (this.element && this.element._drawCacheBitmap === this.bitmap) {
	        this.element.__clearDrawCacheCallbackFromDrawCacheManager();
	      }
	      return this.element = null;
	    };

	    CacheBitmap.getter({
	      byteSize: function() {
	        return this.bitmap.getByteSize();
	      }
	    });

	    return CacheBitmap;

	  })(BaseObject);
	  return DrawCacheManager = (function(superClass) {
	    var byteSizeFromSize, usableBitmap;

	    extend(DrawCacheManager, superClass);

	    DrawCacheManager.byteSizeFromSize = byteSizeFromSize = function(size) {
	      return size.x * size.y * 4;
	    };

	    DrawCacheManager.singletonClass();

	    DrawCacheManager.usableBitmap = usableBitmap = function(bitmap, w, h) {
	      var ref, x, y;
	      ref = bitmap.size, x = ref.x, y = ref.y;
	      return w <= x && h <= y && x * y < w * h * 2;
	    };

	    function DrawCacheManager() {
	      DrawCacheManager.__super__.constructor.apply(this, arguments);
	      this._currentFrameNumber = 0;
	      this._maxCacheByteSize = 64 * 1024 * 1024;
	      this._cacheByteSize = 0;
	      this._unusedCacheByteSize = 0;
	      this._cachedBitmaps = new Map;
	      this._bitmapsCreated = 0;
	      this._unusedCacheBitmaps = [];
	    }

	    DrawCacheManager.getter({
	      currentFrameNumber: function() {
	        return this._currentFrameNumber;
	      },
	      recycleableSortedCacheBitmaps: function() {
	        var currentFrameNumber, recyclable;
	        recyclable = [];
	        currentFrameNumber = this._currentFrameNumber;
	        this._cachedBitmaps.each(function(k, v) {
	          if (v.lastFrameUsed < currentFrameNumber - 1) {
	            return recyclable.push(v);
	          }
	        });
	        return recyclable.sort(function(a, b) {
	          return a.lastFrameUsed - b.lastFrameUsed;
	        });
	      }
	    });

	    DrawCacheManager.prototype.doneWithCacheBitmap = function(element) {
	      var cachedBitmap;
	      if (cachedBitmap = this._cachedBitmaps.remove(element)) {
	        cachedBitmap.elementDoneWithCacheBitmap();
	        this._unusedCacheByteSize += cachedBitmap.getByteSize();
	        return this._unusedCacheBitmaps.push(cachedBitmap);
	      }
	    };

	    DrawCacheManager.prototype.useDrawCache = function(element) {
	      var ref;
	      return (ref = this._cachedBitmaps.get(element)) != null ? ref.use(this._currentFrameNumber) : void 0;
	    };

	    DrawCacheManager.prototype.allocateCacheBitmap = function(element, size) {
	      this.doneWithCacheBitmap(element);
	      return this._recycleUnusedCacheBitmap(element, size) || this._createCacheBitmap(element, size);
	    };

	    DrawCacheManager.prototype.advanceFrame = function() {
	      var cfn;
	      this._currentFrameNumber++;
	      return cfn = this._currentFrameNumber;
	    };

	    DrawCacheManager.prototype._recycleInUseCacheBitmap = function(element, size) {
	      var recyclableCacheBitmap;
	      if (recyclableCacheBitmap = this._findRecycleableCacheBitmap(size)) {
	        this._cachedBitmaps.set(element, this._cachedBitmaps.remove(recyclableCacheBitmap.element));
	        getGlobalEpochCycle().logEvent("recycleUsedCacheBitmap", "recycleUsedCacheBitmap");
	        return recyclableCacheBitmap.recycle(element, this._currentFrameNumber);
	      }
	    };

	    DrawCacheManager.prototype._recycleUnusedCacheBitmap = function(element, size) {
	      var unusedCacheBitmap;
	      if (unusedCacheBitmap = this._getUnusedCacheBitmap(size)) {
	        getGlobalEpochCycle().logEvent("recycleUnusedCacheBitmap", "recycleUnusedCacheBitmap");
	        unusedCacheBitmap.recycle(element, this._currentFrameNumber);
	        this._cachedBitmaps.set(element, unusedCacheBitmap);
	        return unusedCacheBitmap.bitmap;
	      }
	    };

	    DrawCacheManager.prototype._createCacheBitmap = function(element, size) {
	      var bitmap, cacheBitmap, cachedBitmap;
	      if (!this._roomInCacheForNewBitmap(size)) {
	        this._evictCacheBitmaps(size);
	      }
	      this._bitmapsCreated++;
	      getGlobalEpochCycle().logEvent("createCacheBitmap", "createCacheBitmap");
	      bitmap = element.getBitmapFactory().newBitmap(size);
	      cachedBitmap = this._cachedBitmaps.set(element, cacheBitmap = new CacheBitmap(element, bitmap, this._currentFrameNumber));
	      this._cacheByteSize += cachedBitmap.getByteSize();
	      return bitmap;
	    };

	    DrawCacheManager.prototype._getUnusedCacheBitmap = function(size) {
	      var cachedBitmap, i, j, len, ref;
	      ref = this._unusedCacheBitmaps;
	      for (i = j = 0, len = ref.length; j < len; i = ++j) {
	        cachedBitmap = ref[i];
	        if (!(cachedBitmap.bitmap.size.eq(size))) {
	          continue;
	        }
	        this._unusedCacheBitmaps = remove(this._unusedCacheBitmaps, i);
	        this._unusedCacheByteSize -= cachedBitmap.getByteSize();
	        return cachedBitmap;
	      }
	      return void 0;
	    };

	    DrawCacheManager.prototype._findRecycleableCacheBitmap = function(size) {
	      var currentFrameNumber;
	      currentFrameNumber = this._currentFrameNumber;
	      return this._cachedBitmaps.findFirst((function(_this) {
	        return function(cachedBitmap) {
	          return cachedBitmap.lastFrameUsed < currentFrameNumber - 1 && cachedBitmap.bitmap.size.eq(size);
	        };
	      })(this));
	    };

	    DrawCacheManager.prototype._roomInCacheForNewBitmap = function(size) {
	      var byteSize;
	      byteSize = byteSizeFromSize(size);
	      return byteSize + this._cacheByteSize <= this._maxCacheByteSize;
	    };

	    DrawCacheManager.prototype._evictCacheBitmaps = function(size) {
	      var byteSize, cachedBitmap, evictionByteSize, j, len, maxCacheByteSize, ref;
	      byteSize = byteSizeFromSize(size);
	      maxCacheByteSize = this._maxCacheByteSize;
	      evictionByteSize = 0;
	      ref = this.recycleableSortedCacheBitmaps;
	      for (j = 0, len = ref.length; j < len; j++) {
	        cachedBitmap = ref[j];
	        if (cachedBitmap = this._cachedBitmaps.remove(cachedBitmap.element)) {
	          cachedBitmap.elementDoneWithCacheBitmap();
	          byteSize = cachedBitmap.getByteSize();
	          evictionByteSize += byteSize;
	          this._cacheByteSize -= byteSize;
	          if (this._cacheByteSize + byteSize <= maxCacheByteSize) {
	            break;
	          }
	        }
	      }
	      return null;
	    };

	    return DrawCacheManager;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var Epoch, IdleEpoch, log;
	  log = Foundation.log, Epoch = Foundation.Epoch;
	  return IdleEpoch = (function(superClass) {
	    extend(IdleEpoch, superClass);

	    function IdleEpoch() {
	      return IdleEpoch.__super__.constructor.apply(this, arguments);
	    }

	    IdleEpoch.singletonClass();

	    IdleEpoch.prototype.queue = function(event) {
	      return this.queueItem(event);
	    };

	    return IdleEpoch;

	  })(Epoch);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	
	/*
	Useful ideas about optimizing animations and garbage collection: http://blog.artillery.com/2012/10/browser-garbage-collection-and-framerate.html

	1) Properties are marked animatable.
	2) Every animatable propoerty is animated every time it changes.
	3) A new instance of the Animator is created to start the animation.
	   - initalValue
	   - initialTargetValue
	   - initialTime
	4) The animator is called each frame with updates:
	   - possible changes in targetValue
	   - lastFrameTime
	   - currentValue
	   - currentTime
	5) The animator calls "@done()" when it can be released.
	  It need not ever be released. It could be endless.
	6) Objects

	----------------------------------
	INITIAL SUPPORT

	ELEMENT SUPPORT (March 2016)

	  New property: animators
	    Legal values:

	       * basic: just name the property to animate to get the default animator
	      animators: "location"

	       * init a standard animator with custom options:
	      animators:
	        location:
	          d/duration: .25
	          f/function: "easeInQuad"

	       * start a fully custom animator
	      animators:
	        location: new CustomAnimator

	  Animatable properties:

	    Ideally: every concrete property

	    This includes both "location" and "currentLocation".

	    For currentLocation/currentSize, the animator preprocessor is applied on the output
	    of the location and size layouts before _currentLocation or _currentSize are created.

	----------------------------------
	FUTURE FEATURES

	ONE ANIMATOR OVER MULTIPLE PROPS

	  I can imagine situations where you might want one animator to be responsible for multiple props.

	  Maybe a cartoon-physics animator might want to animate some combination of size, location and scale.

	  Clearly, we'd only add this when we really needed it.

	  In the cartoon-physics example, it's a 'canned effect'. You'd probably prefer to have the CartoonPhsyics
	  animator decide what props it needs to animate. So, perhaps you can specify animators w/o specifying props.
	  Instead, the animator itself lists the props it will animate:

	  animators: new CartoonPhysicsAnimator

	  You can always make an array with multiple different animators specified using any legal method.
	  animators: [
	    new CartoonPhysicsAnimator
	    "color"
	  ]

	  Once we have that, we may have more than one animator for the same property. Gut says it works like "merge".
	  The last specified animator gets sole responsibilty for animating that prop.

	  How does an animator for multiple props work? Normally each prop is handled individually. In the case
	  of layout-props, they don't even get handled at the same time as the other props. They get handled during
	  layout. So, I think the multi-prop animator needs to be able to process each prop in isolation.

	ANIMATING WHEN SWITCHING PARENTS

	  Use-case:

	    Show a thumbnail in a list.
	    Tap it to zoom in.
	    Animated from the thumbnail to the full-sized view.

	  How it might work:

	    The Thumbnail gets a unique key.

	    The ZoomIn can set its createdFrom props to be taken from another element via its key.

	  Need:

	    Special-case animated virtual property:
	      elementToAbsMatrix

	    For nicer animations when scaling and angles are involed, we may add these animatable virtual props:
	      absoluteCurrentLocation (new)
	      absoluteCurrentScale (new)
	      absoluteCurrentAngle (new)

	    Enhanced props:
	      added/createdFrom:
	        element: elementKey or element
	        props: props-name list

	    Could allow initializing *From from several source elements or
	    specific props. All results are passed into "merge":

	    added/createdFrom: [
	      {element: elementKey1, props: propsString1}
	      {element: elementKey2, props: propsString2}
	      color: "red"
	      ]

	  How it might look in user-code:

	    Thumbnail = createComponentFactory
	      render: ->
	        {itemId} = @props
	        Element
	          key: "thumbnail:#{itemId}"
	          ...

	    ZoomIn = createComponentFactory
	      render: ->
	        {itemId} = @props
	        Element
	          createdFrom:
	            element: "thumbnail:#{itemId}"
	            props: "elementToAbsMatrix"

	          animators: "elementToAbsMatrix"

	ADDED / REMOVED ANIMATIONS (March 2016)
	  - "from" values
	    Each animatable property can have an initial property which gets
	    set first. Then, next frame, the normal property value gets set,
	    triggering the animator.
	    There are two kinds of initial values:
	      onCreation - if the Element as added to the parent in the parent's constructor
	      onAddition - if the Element as added to the parent sometime later
	    Syntax idea:
	      new Element
	        location: 0
	        addedFrom:    location: -10
	        createdFrom:  location: -20
	        removedTo:    location: -10

	SELECTING ELEMENTS BY KEY

	  When specifying createdFrom: element: elementKey, how do we match the elementKey with
	  a concrete element?

	  There are both performance concerns and usability concerns:

	    performance:
	      - there may be a lot of elements with keys; how do we find a match quickly?
	      - a pre-computed & maintained hash is probably the answer... but that may be a lot of work.
	    useability:
	      - duplicate keys
	      - do we need scoping to reduce key-collisions / avoid "globals" / isolate components?

	  It seems to me that some amount of scoping would both reduce the number of keys that need
	  to be inspected for a lookup / or reduce the work necessary to maintain a precomputed hash.

	ELEMENT "KEY" SCOPING BY COMPONENT

	  We could scope by "Component". ArtReact already has this information, so the user
	  doesn't have to do any additional work.

	  - An Element can be flagged as a Component.
	  - This would automatically be done by React Components.
	  - All Elements in its sub-branch are part of that component,
	  - EXCEPT for any Elements which are themselves Components - i.e. SubComponents.
	  - Any Element can ask for its parent Component.
	  - Every Component maintains a hash of Element keys to Elements for every Element in that Component.
	  - Automatic warnings for duplicate "key" values for children who have keys within a component.
	    When this happens, the second, duplicate key is renamed to be unique via an appended string.

	  Global-scoping vs relative scoping

	  I'd rather avoid anything global, but to handle the "animated thumbnail-zoom-in" use-case, we
	  will need a way for one element to reference another in a different component. I think the
	  rought idea would be some way to express:

	  - "within my parent component with key XYZ"
	  - "within its subcomponent with key ABC"
	  - "select element with key LMO"

	  Basically, we can navigate the 'component-defined-key-namespace-tree' by first scanning UP,
	  then scanning down, and then select an element within the resulting selected component.

	  This avoids ever going to a global scope. There could be other components that use the same
	  keys and it wouldn't interfere with this lookup.

	  How it might look:

	    element:
	      withinParentComponent: "XYZ"
	      findChildComponent: "ABC"
	      findElement: "LMO"

	  We could also decide to have a "selector" shorthand:

	    element: "^XYZ/** /ABC/LMO"

	    HRM - coffeescript doesn't allow * followed by / in a comment block. Makes sense, but I had
	      to add a space after '**' above. Ignore the space :).

	    split on '/'
	    '^' means search up for the first component that matches the rest of the string
	    '**' means match any path of sub-components

	  When "pathing" sub-components and sub-elements are both found in the same key-lookup-hash.
	  The only difference is the key-loopup-hash that is used is found in the first component-element
	  at of above the current element. So, if you path to a sub-component, the next key will select
	  from within that component, but if you path to just an element, the next key could jump you to
	  any other element within the same parent component.

	  Possibly we just make this illegal. If you attempt to path "into" an element which is not a component,
	  it's an error - logged in debug mode and returning a null result.

	  How can we make '**' fast? Each component-element can have a list of all sub-components so we don't
	  have to enumerate all elements. That still requires tree traversal. We could maintain pre-computed
	  hashs, but anytime an anything changes in the tree that could be quite a lot of updates. Every parent
	  needs to be updated since ** could be triggered from any parent to any child.

	----------------------------------
	REACT IMPLICATIONS

	"keys" need to become component-wide, not just Parent-scoped.

	Does this mean we still need the following limitation for Component roots?
	  a) must be a single element
	  b) can't change its Element-type.

	NOTE: Span elements will make this less onerous. Just wrap the root in a Span and you can
	  do whatever you want within that span as-if you were just returning an array of elements.
	 */
	var BaseObject, EasingFunctions, EventedObject, Events, Foundation, PersistantAnimator, capitalize, isFunction, isString, log,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Events = __webpack_require__(135);

	EasingFunctions = __webpack_require__(150);

	log = Foundation.log, BaseObject = Foundation.BaseObject, isFunction = Foundation.isFunction, isString = Foundation.isString, capitalize = Foundation.capitalize;

	EventedObject = Events.EventedObject;


	/*
	Animator is created once, when the Element is created (or the animators prop is set).
	It persists as long as the animator property is set and points to it.
	If can be "active" or not. If active, that element will get an epoch update each
	frame, and the animator will get a chance to animate the property each frame.

	Options:
	  on:
	    done: ->   # fires when the animation completes
	    update: -> # fires every time the target object's animated values updated
	    start: ->  # fires when the animation starts
	    abort: ->  # fires when the animation aborts
	 */

	module.exports = PersistantAnimator = (function(superClass) {
	  extend(PersistantAnimator, superClass);

	  PersistantAnimator.include(EventedObject);

	  PersistantAnimator.interpolate = function(startValue, toValue, pos) {
	    if (isFunction(startValue.interpolate)) {
	      return startValue.interpolate(toValue, pos);
	    } else {
	      return startValue + (toValue - startValue) * pos;
	    }
	  };

	  PersistantAnimator.getter("active options prop element startValue currentValue toValue");

	  PersistantAnimator.getter({
	    state: function() {
	      return this._state || (this._state = {});
	    }
	  });


	  /*
	  IN:
	    options:
	      animate: (startValue, currentValue, toValue, secondsSinceStart, animator) -> nextValue
	        IN:
	          startValue: the value when the aniation started
	          currentValue: the element's current value
	          toValue: the requested target value for the animation
	          secondsSinceStart: seconds since the animation started
	          animator: this PersistantAnimator object
	            animator.state: place to store state
	            animator.element: the element being animated
	            animator.stop: call this when done animating
	            animator.frameSeconds: seconds since the last frame
	  
	        OUT: the next value in the animation
	  
	        SHOULD:
	          Call animator.stop() when the animation is done.
	          The animation can run forever and never call stop if desired.
	          TODO: how do we release a forever animation?
	  
	        STATE:
	          Use animator.state object to store any persistant state the animation function needs.
	          animator.state is reserved for exclusive use by the animate function.
	   */

	  function PersistantAnimator(prop, options) {
	    this._prop = prop;
	    this._options = options;
	    this._active = false;
	    this._startSecond = null;
	    this._currentSecond = null;
	    this._lastSecond = null;
	    this._startValue = null;
	    this._currentValue = null;
	    this._toValue = null;
	    this._animate = options.animate;
	    this._element = null;
	    if (options != null ? options.on : void 0) {
	      this.on(options.on);
	    }
	  }

	  PersistantAnimator.getter({
	    animationSeconds: function() {
	      return this._currentSecond - this._startSecond;
	    },
	    frameSeconds: function() {
	      return this._currentSecond - this._lastSecond;
	    },

	    /*
	    returns a bound function to stop this animator
	    OUT: -> toValue
	      OUT: toValue
	      EFFECT: stops the animator
	     */
	    stop: function() {
	      return this._stop || (this._stop = (function(_this) {
	        return function() {
	          _this._active = false;
	          return _this._toValue;
	        };
	      })(this));
	    }
	  });

	  PersistantAnimator.prototype.animate = function() {
	    if (this._animate) {
	      return this._animate(this);
	    } else {
	      return this.stop();
	    }
	  };

	  PersistantAnimator.prototype.animateAbsoluteTime = function(_element, _currentValue, _toValue, _currentSecond) {
	    var animationSeconds, newValue;
	    this._element = _element;
	    this._currentValue = _currentValue;
	    this._toValue = _toValue;
	    this._currentSecond = _currentSecond;
	    if (!this._active) {
	      this._lastSecond = this._startSecond = this._currentSecond;
	      this._startValue = this._currentValue;
	      this.queueEvent("start");
	      this._active = true;
	    }
	    animationSeconds = this.getAnimationSeconds();
	    newValue = this.animate();
	    if (this._active) {
	      if (animationSeconds > 0) {
	        this.queueEvent("update");
	      }
	      this._element.onNextEpoch((function(_this) {
	        return function() {
	          return _this._element[_this._prop] = _this._toValue;
	        };
	      })(this));
	    } else {
	      this.queueEvent("done");
	    }
	    this._lastSecond = this._currentSecond;
	    return this._element.preprocessProperty(this._prop, newValue);
	  };

	  return PersistantAnimator;

	})(BaseObject);


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, EasingFunctions, EasingPersistantAnimator, EventedObject, Events, Foundation, PersistantAnimator, interpolate, isFunction, isNumber, isString, log, max, min,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Events = __webpack_require__(135);

	EasingFunctions = __webpack_require__(150);

	PersistantAnimator = __webpack_require__(172);

	log = Foundation.log, BaseObject = Foundation.BaseObject, isFunction = Foundation.isFunction, isString = Foundation.isString, isNumber = Foundation.isNumber, min = Foundation.min, max = Foundation.max;

	EventedObject = Events.EventedObject;

	interpolate = PersistantAnimator.interpolate;

	module.exports = EasingPersistantAnimator = (function(superClass) {
	  extend(EasingPersistantAnimator, superClass);

	  EasingPersistantAnimator.getter("duration easingFunction");

	  EasingPersistantAnimator.getter({
	    animationPos: function() {
	      return min(1, this.getAnimationSeconds() / this._duration);
	    }
	  });

	  EasingPersistantAnimator.setter({
	    duration: function(d) {
	      return this._duration = isNumber(d) ? max(.001, d) : .25;
	    },
	    easingFunction: function(f) {
	      this._easingFunction = f;
	      if (isString(f)) {
	        if (!(this._easingFunction = EasingFunctions[f])) {
	          console.warn("invalid easing easingFunction: " + f);
	        }
	      }
	      return this._easingFunction || (this._easingFunction = EasingFunctions.easeInQuad);
	    }
	  });

	  function EasingPersistantAnimator(_, options) {
	    if (options == null) {
	      options = {};
	    }
	    EasingPersistantAnimator.__super__.constructor.apply(this, arguments);
	    this.setEasingFunction(options.f || options.easingFunction);
	    this.setDuration(options.d != null ? options.d : options.duration);
	  }

	  EasingPersistantAnimator.prototype.animate = function() {
	    var animationPos, easingFunction, startValue, toValue;
	    startValue = this.startValue, toValue = this.toValue, animationPos = this.animationPos, easingFunction = this.easingFunction;
	    if (1 === animationPos) {
	      this.stop();
	    }
	    return interpolate(startValue, toValue, easingFunction(animationPos));
	  };

	  return EasingPersistantAnimator;

	})(PersistantAnimator);


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation) {
	  var BaseObject, EngineStat, Map, Stat, arrayWithout, currentSecond, log, miniInspect;
	  log = Foundation.log, Map = Foundation.Map, miniInspect = Foundation.miniInspect, currentSecond = Foundation.currentSecond, arrayWithout = Foundation.arrayWithout, BaseObject = Foundation.BaseObject, Stat = Foundation.Stat;
	  return EngineStat = (function(superClass) {
	    extend(EngineStat, superClass);

	    function EngineStat() {
	      this.reset();
	    }

	    EngineStat.prototype.reset = function() {
	      return this.stats = {};
	    };

	    EngineStat.prototype.add = function(statName, value) {
	      var base;
	      return ((base = this.stats)[statName] || (base[statName] = new Stat)).add(value);
	    };

	    EngineStat.prototype.length = function(statName) {
	      var stat;
	      if (stat = this.stats[statName]) {
	        return stat.length;
	      } else {
	        return 0;
	      }
	    };

	    EngineStat.prototype.log = function() {
	      var greatestPow10LessThanMax, k, ref, smallestMultipleGreaterThanMax, toLog, v;
	      toLog = {};
	      ref = this.stats;
	      for (k in ref) {
	        v = ref[k];
	        greatestPow10LessThanMax = Math.pow(10, Math.floor(Math.log10(v.max)));
	        smallestMultipleGreaterThanMax = (Math.ceil(v.max / greatestPow10LessThanMax)) * greatestPow10LessThanMax;
	        toLog[k] = {
	          min: v.min.toPrecision(5) / 1,
	          av: v.average.toPrecision(5) / 1,
	          max: v.max.toPrecision(5) / 1,
	          hist: v.histogram(10, 0, smallestMultipleGreaterThanMax),
	          histMax: smallestMultipleGreaterThanMax
	        };
	      }
	      return log(toLog);
	    };

	    return EngineStat;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	var Layout;

	module.exports = Layout = __webpack_require__(164);

	Layout.Basics = __webpack_require__(166);

	Layout.FlexLayout = __webpack_require__(165);

	Layout.StateEpochLayout = __webpack_require__(163);

	Layout.finishLoad(["Basics", "FlexLayout", "StateEpochLayout"]);


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var Shapes;

	module.exports = Shapes = __webpack_require__(177);

	Shapes.BitmapElement = __webpack_require__(178);

	Shapes.RectangleElement = __webpack_require__(181);

	Shapes.ShapeElement = __webpack_require__(189);

	Shapes.TextElement = __webpack_require__(190);

	Shapes.finishLoad(["BitmapElement", "RectangleElement", "ShapeElement", "TextElement"]);


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	var Elements,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Elements = __webpack_require__(88);

	module.exports = Elements.Shapes || (Elements.Shapes = (function(superClass) {
	  extend(Shapes, superClass);

	  function Shapes() {
	    return Shapes.__super__.constructor.apply(this, arguments);
	  }

	  Shapes.namespace = Elements;

	  Shapes.namespacePath = "Neptune.Art.Engine.Elements.Shapes";

	  return Shapes;

	})(Neptune.Base));

	Elements.addNamespace(Elements.Shapes);


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, BaseObject, BitmapElement, Canvas, Color, FillableBase, Foundation, Matrix, Point, Rectangle, bound, ceil, color, createWithPostCreate, inspect, isNumber, isString, log, matrix, max, min, point, point0, point1, rect, round,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Canvas = __webpack_require__(129);

	FillableBase = __webpack_require__(179);

	ceil = Math.ceil, round = Math.round;

	inspect = Foundation.inspect, min = Foundation.min, max = Foundation.max, bound = Foundation.bound, log = Foundation.log, createWithPostCreate = Foundation.createWithPostCreate, isString = Foundation.isString, isNumber = Foundation.isNumber, BaseObject = Foundation.BaseObject;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, point0 = Atomic.point0, point1 = Atomic.point1;

	module.exports = createWithPostCreate(BitmapElement = (function(superClass) {
	  var sourceToBitmapCache;

	  extend(BitmapElement, superClass);

	  BitmapElement.SourceToBitmapCache = (function(superClass1) {
	    extend(SourceToBitmapCache, superClass1);

	    SourceToBitmapCache.singletonClass();

	    function SourceToBitmapCache() {
	      this._cache = {};
	      this._referenceCounts = {};
	    }

	    SourceToBitmapCache.prototype.get = function(url, initializerPromise) {
	      var base;
	      if (url.match("ImagePicker")) {
	        console.log("SourceToBitmapCache#get: cached:" + (!!this._cache[url]) + " " + url);
	        console.log("initializerPromise: " + (!!initializerPromise));
	      }
	      this._referenceCounts[url] = (this._referenceCounts[url] || 0) + 1;
	      return (base = this._cache)[url] || (base[url] = initializerPromise || Canvas.Bitmap.get(url));
	    };

	    SourceToBitmapCache.prototype.release = function(url) {
	      if (!url) {
	        return;
	      }
	      console.log("SourceToBitmapCache#release: " + url);
	      if (!isNumber(this._referenceCounts[url])) {
	        throw new Error("no references for " + url);
	      }
	      if (this._referenceCounts[url] === 0 || !isNumber(this._referenceCounts[url])) {
	        return console.error("invalid referenceCount: " + (inspect(this._referenceCounts[url])) + " for url: " + url);
	      }
	      this._referenceCounts[url]--;
	      if (this._referenceCounts[url] === 0) {
	        delete this._cache[url];
	        return true;
	      } else {
	        return false;
	      }
	    };

	    return SourceToBitmapCache;

	  })(BaseObject);

	  sourceToBitmapCache = BitmapElement.SourceToBitmapCache.singleton;

	  function BitmapElement(options) {
	    BitmapElement.__super__.constructor.apply(this, arguments);
	    this._bitmapToElementMatrix = new Matrix;
	  }

	  BitmapElement.prototype._unregister = function() {
	    sourceToBitmapCache.release(this.getSource());
	    return BitmapElement.__super__._unregister.apply(this, arguments);
	  };

	  BitmapElement.getter({
	    cacheable: function() {
	      return false;
	    }
	  });

	  BitmapElement.prototype.customLayoutChildrenFirstPass = function(size) {
	    var ref;
	    return ((ref = this.getPendingBitmap()) != null ? ref.pointSize : void 0) || point0;
	  };

	  BitmapElement.prototype.customLayoutChildrenSecondPass = function(size) {};

	  BitmapElement.prototype.inspectStructure = function() {
	    var ref;
	    return [
	      this.inspectLocal(), {
	        bitmapSize: (ref = this._bitmap) != null ? ref.size : void 0
	      }
	    ].concat(this._children);
	  };

	  BitmapElement.drawProperty({
	    focus: {
	      "default": null,
	      preprocess: function(v) {
	        if (v != null) {
	          return point(v).bound(point0, point1);
	        } else {
	          return null;
	        }
	      }
	    },
	    mode: {
	      "default": "stretch",
	      preprocess: function(v) {
	        return (v != null ? v.toString() : void 0) || null;
	      }
	    },
	    sourceArea: {
	      "default": null,
	      preprocess: function(v) {
	        if (v != null) {
	          return rect(v);
	        } else {
	          return null;
	        }
	      }
	    }
	  });

	  BitmapElement.concreteProperty({

	    /*
	    This works pretty-much like the HTMLImageElement's "src" field.
	    It will fetch a bitmap from the specified URL.
	    It will fire off the following events: onLoad and onError
	    It will set the @bitmap property on success.
	    If it changes, it will attempt to load the new URL and fire another onLoad or onError.
	    
	    NOTE on naming vs HTMLImageElement:
	      The naming choices here are for consistency and full-words.
	      The DOM is inconsistent uses shortend words like "src."
	    
	      DOM     Art.Engine
	      src     source
	      onload  load
	      onerror error
	     */
	    source: {
	      "default": null,
	      validate: function(v) {
	        return !v || isString(v);
	      },
	      postSetter: function(v) {
	        return this._loadBitmapFromSource(v);
	      }
	    }
	  });

	  BitmapElement.prototype._loadBitmapFromSource = function(source) {
	    return sourceToBitmapCache.get(source).then((function(_this) {
	      return function(bitmap) {
	        _this.onNextReady(function() {
	          return _this.queueEvent("load", function() {
	            return {
	              bitmap: bitmap
	            };
	          });
	        });
	        return _this.setBitmap(bitmap);
	      };
	    })(this), (function(_this) {
	      return function(error) {
	        console.error(error.stack);
	        return _this.onNextReady(function() {
	          return _this.queueEvent("error", function() {
	            return {
	              error: e
	            };
	          });
	        });
	      };
	    })(this));
	  };

	  BitmapElement.drawLayoutProperty({
	    bitmap: {
	      "default": null,
	      validate: function(v) {
	        return !v || v instanceof Canvas.BitmapBase;
	      }
	    }
	  });

	  BitmapElement.prototype._drawPropertiesChanged = function() {
	    var bitmapSize, currentSize, desiredSourceX, desiredSourceY, effectiveSourceLoc, effectiveSourceSize, effectiveSourceSizeX, effectiveSourceSizeY, scale, sourceLoc, sourceSize, sourceX, sourceY;
	    BitmapElement.__super__._drawPropertiesChanged.apply(this, arguments);
	    if (!this._bitmap) {
	      return;
	    }
	    bitmapSize = this._bitmap.size;
	    this._drawOptions.sourceArea = this._sourceArea ? this._sourceArea.mul(this._bitmap.pixelsPerPoint) : null;
	    sourceSize = this._drawOptions.sourceArea ? this._drawOptions.sourceArea.size : bitmapSize;
	    sourceLoc = this._drawOptions.sourceArea ? this._drawOptions.sourceArea.location : point();
	    currentSize = this.currentSize;
	    return this._bitmapToElementMatrix = (function() {
	      switch (this._mode) {
	        case "stretch":
	          return Matrix.scale(currentSize.div(sourceSize));
	        case "zoom":
	          scale = max(currentSize.x / sourceSize.x, currentSize.y / sourceSize.y);
	          effectiveSourceSizeX = min(bitmapSize.x, ceil(currentSize.x / scale));
	          effectiveSourceSizeY = min(bitmapSize.y, ceil(currentSize.y / scale));
	          if (this._focus) {
	            desiredSourceX = sourceSize.x * this._focus.x - effectiveSourceSizeX * .5;
	            desiredSourceY = sourceSize.y * this._focus.y - effectiveSourceSizeY * .5;
	          } else {
	            desiredSourceX = sourceLoc.x + sourceSize.x * .5 - round(effectiveSourceSizeX * .5);
	            desiredSourceY = sourceLoc.y + sourceSize.y * .5 - round(effectiveSourceSizeY * .5);
	          }
	          sourceX = bound(0, desiredSourceX, bitmapSize.x - effectiveSourceSizeX);
	          sourceY = bound(0, desiredSourceY, bitmapSize.y - effectiveSourceSizeY);
	          this._drawOptions.sourceArea = rect(sourceX, sourceY, effectiveSourceSizeX, effectiveSourceSizeY);
	          return Matrix.scale(scale);
	        case "center":
	          effectiveSourceSize = currentSize.roundOut();
	          effectiveSourceLoc = sourceLoc.add(sourceSize.cc.sub(effectiveSourceSize.cc.round()));
	          this._drawOptions.sourceArea = rect(effectiveSourceLoc, effectiveSourceSize);
	          return new Matrix;
	        case "fit":
	          scale = currentSize.div(sourceSize).min();
	          return Matrix.translate(sourceSize.cc.neg).scale(scale).translate(currentSize.cc);
	        case "min":
	          scale = min(1 / this.devicePixelsPerPoint, currentSize.div(sourceSize).min());
	          return Matrix.translate(sourceSize.cc.neg).scale(scale).translate(currentSize.cc);
	        default:
	          throw new Error("unknown mode: " + this._mode);
	      }
	    }).call(this);
	  };

	  BitmapElement.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	    return this._bitmap && target.drawBitmap(this._bitmapToElementMatrix.mul(elementToTargetMatrix), this._bitmap, options);
	  };

	  return BitmapElement;

	})(FillableBase));


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Base, Canvas, Color, FillableBase, Foundation, GradientFillStyle, Matrix, Point, Rectangle, color, createWithPostCreate, isPlainObject, log, matrix, max, min, point, point0, point1, rect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Canvas = __webpack_require__(129);

	Base = __webpack_require__(180);

	log = Foundation.log, isPlainObject = Foundation.isPlainObject, min = Foundation.min, max = Foundation.max, createWithPostCreate = Foundation.createWithPostCreate;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, point0 = Atomic.point0, point1 = Atomic.point1;

	GradientFillStyle = Canvas.GradientFillStyle;

	module.exports = createWithPostCreate(FillableBase = (function(superClass) {
	  var _expandRectangleByShadow;

	  extend(FillableBase, superClass);

	  function FillableBase() {
	    return FillableBase.__super__.constructor.apply(this, arguments);
	  }

	  FillableBase.registerWithElementFactory = function() {
	    return this !== FillableBase;
	  };

	  FillableBase.getter({
	    cacheable: function() {
	      return this.getHasChildren();
	    }
	  });

	  FillableBase.drawProperty({
	    gradient: {
	      "default": null,
	      validate: function(v) {
	        return !v || v instanceof GradientFillStyle;
	      }
	    },
	    from: {
	      "default": "topLeft",
	      preprocess: function(v) {
	        return point(v);
	      }
	    },
	    to: {
	      "default": "bottomLeft",
	      preprocess: function(v) {
	        return point(v);
	      }
	    },
	    shadow: {
	      "default": null,
	      validate: function(v) {
	        return !v || isPlainObject(v);
	      }
	    }
	  });

	  FillableBase.virtualProperty({
	    colors: {
	      getter: function(pending) {
	        var ref;
	        return (ref = this.getState(pending).gradient) != null ? ref.colors : void 0;
	      },
	      setter: function(v) {
	        return this.setGradient(v && new GradientFillStyle(point0, point1, v));
	      }
	    }
	  });

	  FillableBase.prototype._expandRectangleByShadow = _expandRectangleByShadow = function(r, shadow) {
	    var blur, expandBottom, expandLeft, expandRight, expandTop, h, offsetX, offsetY, w, x, y;
	    if (!shadow) {
	      return r;
	    }
	    x = r.x, y = r.y, w = r.w, h = r.h;
	    blur = shadow.blur, offsetX = shadow.offsetX, offsetY = shadow.offsetY;
	    offsetX || (offsetX = 0);
	    offsetY || (offsetY = 0);
	    blur || (blur = 0);
	    expandLeft = max(0, blur - offsetX);
	    expandTop = max(0, blur - offsetY);
	    expandRight = max(0, blur + offsetX);
	    expandBottom = max(0, blur + offsetY);
	    return r["with"](x - expandLeft, y - expandTop, w + expandLeft + expandRight, h + expandTop + expandBottom);
	  };

	  FillableBase.prototype.getBaseDrawArea = function() {
	    return _expandRectangleByShadow(FillableBase.__super__.getBaseDrawArea.apply(this, arguments), this.getShadow());
	  };

	  FillableBase.prototype.getPendingBaseDrawArea = function() {
	    return _expandRectangleByShadow(FillableBase.__super__.getPendingBaseDrawArea.apply(this, arguments), this.getPendingShadow());
	  };

	  FillableBase.prototype._prepareDrawOptions = function(drawOptions, compositeMode, opacity) {
	    FillableBase.__super__._prepareDrawOptions.apply(this, arguments);
	    drawOptions.fillStyle = this._gradient;
	    drawOptions.shadow = this._shadow;
	    if (this._gradient) {
	      this._gradient.from = this._from.mul(this._currentSize);
	      return this._gradient.to = this._to.mul(this._currentSize);
	    }
	  };

	  return FillableBase;

	})(Base));


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Base, Element, Foundation, color, createWithPostCreate, inspect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Element = __webpack_require__(148);

	inspect = Foundation.inspect, createWithPostCreate = Foundation.createWithPostCreate;

	color = Atomic.color;

	module.exports = createWithPostCreate(Base = (function(superClass) {
	  extend(Base, superClass);

	  Base.registerWithElementFactory = function() {
	    return this !== Base;
	  };

	  function Base() {
	    Base.__super__.constructor.apply(this, arguments);
	    this._drawOptions = {};
	  }

	  Base.drawProperty({
	    color: {
	      "default": null,
	      preprocess: function(v) {
	        if (v) {
	          return color(v);
	        } else {
	          return null;
	        }
	      }
	    }
	  });

	  Base.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	    this._prepareDrawOptions(this._drawOptions, compositeMode, opacity);
	    return this.fillShape(target, elementToTargetMatrix, this._drawOptions);
	  };

	  Base.prototype._useStagingBitmap = function() {
	    if (this.getHasChildren()) {
	      return Base.__super__._useStagingBitmap.apply(this, arguments);
	    }
	    return this.getChildRequiresParentStagingBitmap() || this.getIsMask();
	  };

	  Base.prototype._drawChildren = function(target, elementToTargetMatrix, usingStagingBitmap) {
	    if (this.hasChildren) {
	      return Base.__super__._drawChildren.apply(this, arguments);
	    }
	    if (usingStagingBitmap) {
	      return this.drawBasic(target, elementToTargetMatrix);
	    } else {
	      return this.drawBasic(target, elementToTargetMatrix, this.getCompositeMode(), this.getOpacity());
	    }
	  };


	  /*
	  Either fillShape or drawBasic must be overridden by each inheriting class
	   */

	  Base.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	    throw new Error("fillShape or drawBasic must be overridden");
	  };


	  /*
	  _prepareDrawOptions
	  Inheriting classes can override & extend to add additional options
	  purpose: to re-use the plain-object for draw options instead of creating a new one every time.
	   */

	  Base.prototype._prepareDrawOptions = function(drawOptions, compositeMode, opacity) {
	    drawOptions.compositeMode = compositeMode;
	    drawOptions.opacity = opacity;
	    return drawOptions.color = this._color;
	  };

	  return Base;

	})(Element));


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Color, FillableBase, Foundation, Matrix, Paths, Point, RectangleElement, Text, base, color, createWithPostCreate, curriedRoundedRectangle, floatEq, matrix, point, pureMerge, rect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Text = __webpack_require__(182);

	FillableBase = __webpack_require__(179);

	Paths = __webpack_require__(129).Paths;

	pureMerge = Foundation.pureMerge, floatEq = Foundation.floatEq, base = Foundation.base, createWithPostCreate = Foundation.createWithPostCreate;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, matrix = Atomic.matrix, Matrix = Atomic.Matrix;

	curriedRoundedRectangle = Paths.curriedRoundedRectangle;

	module.exports = createWithPostCreate(RectangleElement = (function(superClass) {
	  extend(RectangleElement, superClass);

	  function RectangleElement() {
	    return RectangleElement.__super__.constructor.apply(this, arguments);
	  }

	  RectangleElement.drawProperty({
	    radius: {
	      "default": 0,
	      validate: function(v) {
	        return !v || typeof v === "number";
	      },
	      preprocess: function(v) {
	        return v || 0;
	      }
	    }
	  });

	  RectangleElement.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	    options.radius = this._radius;
	    options.color || (options.color = this._color);
	    return target.drawRectangle(elementToTargetMatrix, this.getPaddedArea(), options);
	  };

	  RectangleElement.prototype.strokeShape = function(target, elementToTargetMatrix, options) {
	    options.radius = this._radius;
	    options.color || (options.color = this._color);
	    return target.strokeRectangle(elementToTargetMatrix, this.getPaddedArea(), options);
	  };

	  RectangleElement.prototype._clipDraw = function(clipArea, target, elementToTargetMatrix) {
	    if (floatEq(this._radius, 0)) {
	      return RectangleElement.__super__._clipDraw.apply(this, arguments);
	    } else {
	      return target.clippedTo(curriedRoundedRectangle(target.pixelSnapRectangle(elementToTargetMatrix, this.getPaddedArea()), this._radius), (function(_this) {
	        return function() {
	          return _this._drawChildren(target, elementToTargetMatrix);
	        };
	      })(this), elementToTargetMatrix);
	    }
	  };

	  RectangleElement.getter({
	    hasCustomClipping: function() {
	      return this._radius > 0;
	    }
	  });

	  return RectangleElement;

	})(FillableBase));


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(183);


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	var Text;

	module.exports = Text = __webpack_require__(184);

	Text.Layout = __webpack_require__(186);

	Text.Metrics = __webpack_require__(187);

	Text.TextLayoutFragment = __webpack_require__(188);

	Text.finishLoad(["Layout", "Metrics", "TextLayoutFragment"]);


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(185);

	module.exports = Art.Text || (Art.Text = (function(superClass) {
	  extend(Text, superClass);

	  function Text() {
	    return Text.__super__.constructor.apply(this, arguments);
	  }

	  Text.namespace = Art;

	  Text.namespacePath = "Neptune.Art.Text";

	  return Text;

	})(Neptune.Base));

	Art.addNamespace(Art.Text);


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, BaseObject, Bitmap, Foundation, Layout, Matrix, Metrics, Rectangle, ceil, emptyOptions, flatten, float32Eq, float32Eq0, floor, inspect, isNumber, log, matrix, max, merge, min, nearInfinity, nearInfinityResult, peek, point, pureMerge, rect, time, toFontCss,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Bitmap = __webpack_require__(129).Bitmap;

	Atomic = __webpack_require__(93);

	Metrics = __webpack_require__(187);

	rect = Atomic.rect, matrix = Atomic.matrix, Matrix = Atomic.Matrix, Rectangle = Atomic.Rectangle, point = Atomic.point;

	floor = Math.floor, ceil = Math.ceil;

	log = Foundation.log, inspect = Foundation.inspect, pureMerge = Foundation.pureMerge, flatten = Foundation.flatten, BaseObject = Foundation.BaseObject, nearInfinity = Foundation.nearInfinity, nearInfinityResult = Foundation.nearInfinityResult, peek = Foundation.peek, min = Foundation.min, max = Foundation.max, merge = Foundation.merge, time = Foundation.time, isNumber = Foundation.isNumber, float32Eq = Foundation.float32Eq, float32Eq0 = Foundation.float32Eq0;

	toFontCss = Metrics.toFontCss;

	emptyOptions = {};

	module.exports = Layout = (function(superClass) {
	  var defaultLayoutOptions, defaultText, wordStringToHash;

	  extend(Layout, superClass);

	  Layout.defaultText = defaultText = "";

	  Layout.defaultLayoutOptions = defaultLayoutOptions = {
	    leading: 1.25,
	    align: point("left"),
	    layoutMode: "textualBaseline",
	    overflow: "ellipsis",
	    maxLines: void 0
	  };

	  wordStringToHash = function(wordString) {
	    var j, len, ref, ret, word;
	    ret = {};
	    ref = wordString.split(/\s+/);
	    for (j = 0, len = ref.length; j < len; j++) {
	      word = ref[j];
	      ret[word] = true;
	    }
	    return ret;
	  };

	  Layout.validLayoutOptions = {
	    layoutMode: wordStringToHash("textual textualBaseline tight tight0"),
	    overflow: wordStringToHash("ellipsis visible clipped")
	  };

	  function Layout(text, fontOptions, layoutOptions, layoutAreaWidth, layoutAreaHeight) {
	    if (layoutAreaWidth == null) {
	      layoutAreaWidth = nearInfinity;
	    }
	    if (layoutAreaHeight == null) {
	      layoutAreaHeight = nearInfinity;
	    }
	    if (!(isNumber(layoutAreaWidth) && isNumber(layoutAreaHeight))) {
	      throw new Error("layoutAreaWidth, layoutAreaHeight must be numbers: " + (inspect(layoutAreaHeight)));
	    }
	    this._layoutAreaWidth = layoutAreaWidth;
	    this._layoutAreaHeight = layoutAreaHeight;
	    this._fontOptions = Metrics.normalizeFontOptions(fontOptions || {});
	    this._layoutOptions = layoutOptions = pureMerge(defaultLayoutOptions, layoutOptions);
	    this._text = text || defaultText;
	    this._textLines = text.split("\n");
	    if (layoutOptions.wordWrapWidth) {
	      console.error("Art.Text.Layout#wordWrapWidth is depricated. Pass layoutAreaWidth and layoutAreaHeight into constructor.");
	    }
	    this._maxHeight = layoutOptions.maxHeight;
	    this._overflow = layoutOptions.overflow;
	    this._clipped = this._overflow === "clipped";
	    this._ellipsis = this._overflow === "ellipsis";
	    this._align = point(layoutOptions.align);
	    this._leading = layoutOptions.leading;
	    this._maxLines = layoutOptions.maxLines;
	    this._layoutMode = layoutOptions.layoutMode;
	    this._resetLayout();
	    this._left = this._right = this._top = this._bottom = 0;
	  }

	  Layout.getter("text align leading");

	  Layout.getter({
	    fontStyle: function() {
	      return this._fontOptions.fontStyle;
	    },
	    fontVariant: function() {
	      return this._fontOptions.fontVariant;
	    },
	    fontWeight: function() {
	      return this._fontOptions.fontWeight;
	    },
	    fontFamily: function() {
	      return this._fontOptions.fontFamily;
	    },
	    fontSize: function() {
	      return this._fontOptions.fontSize;
	    },
	    leading: function() {
	      return this._leading;
	    },
	    align: function() {
	      return this._align;
	    },
	    layoutMode: function() {
	      return this._layoutMode;
	    },
	    fragments: function() {
	      this._updateLayout();
	      return this._fragments;
	    },
	    size: function() {
	      this._updateLayout();
	      return this._size || (this._size = point(this._right - this._left, this._bottom - this._top));
	    },
	    area: function() {
	      this._updateLayout();
	      return this._area || (this._area = rect(this._left, this._top, this._right - this._left, this._bottom - this._top));
	    },
	    drawArea: function() {
	      this._updateLayout();
	      return this._drawArea || (this._drawArea = this._computeDrawArea());
	    },
	    fontCss: function() {
	      return this._fontCss || (this._fontCss = toFontCss(this._fontOptions));
	    },
	    lineCount: function() {
	      this._updateLayout();
	      return this._fragments.length;
	    }
	  });

	  Layout.prototype._getFragmentLogicalAreas = function(layoutHeight) {
	    var j, layoutArea, len, ref, results;
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      layoutArea = ref[j].layoutArea;
	      results.push(layoutArea);
	    }
	    return results;
	  };

	  Layout.prototype.draw = function(target, where, options) {
	    var context;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    context = target.context2D;
	    if (!context) {
	      return this.drawToNonArtBitmap(target, where, options);
	    }
	    this._updateLayout();
	    if (target._setupDraw(where, options)) {
	      context.font = this.getFontCss();
	      context.textAlign = 'left';
	      context.textBaseline = 'alphabetic';
	      if (options.stroke) {
	        this._strokeAllFragments(context);
	      } else {
	        this._fillAllFragments(context);
	      }
	      return target._cleanupDraw(options);
	    }
	  };

	  Layout.prototype.stroke = function(target, where, options) {
	    if (options == null) {
	      options = emptyOptions;
	    }
	    return this.draw(target, where, merge(options, {
	      stroke: true
	    }));
	  };

	  Layout.prototype.drawToNonArtBitmap = function(target, where, options) {
	    var bitmap2D, scale;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    scale = where.exactScale;
	    bitmap2D = new Bitmap(this.getSize().mul(scale));
	    this.draw(bitmap2D, Matrix.scale(scale), options);
	    return target.drawBitmap(Matrix.scale(scale.inv).mul(where), bitmap2D);
	  };

	  Layout.prototype.newBitmap = function(options) {
	    var scale, size;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    size = options.size || this.getSize();
	    if (scale = options.scale) {
	      size = size.mul(scale);
	    }
	    return new Bitmap(size);
	  };

	  Layout.prototype.toBitmap = function(options) {
	    var bitmap, drawMatrix, scale;
	    if (options == null) {
	      options = emptyOptions;
	    }
	    drawMatrix = options.drawMatrix || new Matrix;
	    if (scale = options.scale) {
	      drawMatrix = drawMatrix.mul(Matrix.scale(scale));
	    }
	    bitmap = this.newBitmap(options);
	    this.draw(bitmap, drawMatrix, options);
	    return bitmap;
	  };

	  Layout.prototype._fillAllFragments = function(context) {
	    var frag, j, len, ref, results;
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      frag = ref[j];
	      results.push(context.fillText(frag.text, frag.getTextX(), frag.getTextY()));
	    }
	    return results;
	  };

	  Layout.prototype._strokeAllFragments = function(context) {
	    var frag, j, len, ref, results;
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      frag = ref[j];
	      results.push(context.strokeText(frag.text, frag.getTextX(), frag.getTextY()));
	    }
	    return results;
	  };

	  Layout.prototype._drawFragmentAreas = function(context) {
	    var fontSize, frag, j, layoutArea, len, ref, results;
	    fontSize = this.getFontSize();
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      frag = ref[j];
	      layoutArea = frag.layoutArea;
	      results.push(context.fillRect(layoutArea.x, layoutArea.y, layoutArea.w, layoutArea.h));
	    }
	    return results;
	  };

	  Layout.prototype._computeDrawArea = function() {
	    var bottom, fragment, fragments, i, j, left, len, right, top;
	    fragments = this.fragments;
	    if (fragments.length === 1) {
	      return fragments[0].alignedDrawArea;
	    } else {
	      left = top = right = bottom = 0;
	      for (i = j = 0, len = fragments.length; j < len; i = ++j) {
	        fragment = fragments[i];
	        if (i === 0) {
	          left = fragment.getAlignedDrawAreaLeft();
	          top = fragment.getAlignedDrawAreaTop();
	          right = fragment.getAlignedDrawAreaRight();
	          bottom = fragment.getAlignedDrawAreaBottom();
	        } else {
	          left = min(left, fragment.getAlignedDrawAreaLeft());
	          top = min(top, fragment.getAlignedDrawAreaTop());
	          right = max(right, fragment.getAlignedDrawAreaRight());
	          bottom = max(bottom, fragment.getAlignedDrawAreaBottom());
	        }
	      }
	      return new Rectangle(left, top, right - left, bottom - top);
	    }
	  };

	  Layout.prototype._alignFragments = function() {
	    var _align, _layoutAreaHeight, _layoutAreaWidth, area, frag, j, len, offsetY, ref, results, xAlign, yAlign;
	    _layoutAreaWidth = this._layoutAreaWidth, _layoutAreaHeight = this._layoutAreaHeight, _align = this._align, area = this.area;
	    xAlign = _align.x;
	    yAlign = _align.y;
	    if (_layoutAreaWidth >= nearInfinityResult) {
	      xAlign = 0;
	    }
	    if (_layoutAreaHeight >= nearInfinityResult) {
	      yAlign = 0;
	    }
	    offsetY = (_layoutAreaHeight - area.h) * yAlign;
	    if (float32Eq0(offsetY) && float32Eq0(xAlign)) {
	      return;
	    }
	    ref = this.fragments;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      frag = ref[j];
	      frag.alignmentOffsetX = (_layoutAreaWidth - frag.layoutW) * xAlign;
	      results.push(frag.alignmentOffsetY = offsetY);
	    }
	    return results;
	  };

	  Layout.prototype._setArea = function(fragment) {
	    this._top = fragment.getTop();
	    this._left = fragment.getLeft();
	    this._bottom = fragment.getBottom();
	    return this._right = fragment.getRight();
	  };

	  Layout.prototype._expandArea = function(fragment) {
	    this._top = min(this._top, fragment.getTop());
	    this._left = min(this._left, fragment.getLeft());
	    this._bottom = max(this._bottom, fragment.getBottom());
	    return this._right = max(this._right, fragment.getRight());
	  };

	  Layout.prototype._generateFragments = function() {
	    var _fontOptions, _layoutAreaWidth, _layoutMode, _textLines, fontCss, fragment, fragments, text, wrappedFragments;
	    _fontOptions = this._fontOptions, _layoutAreaWidth = this._layoutAreaWidth, _layoutMode = this._layoutMode, _textLines = this._textLines, _fontOptions = this._fontOptions;
	    fontCss = this.getFontCss();
	    return this._fragments = (function() {
	      var j, k, l, len, len1, len2, results;
	      if (_layoutAreaWidth < nearInfinityResult && (_layoutMode === "textual" || _layoutMode === "textualBaseline")) {
	        fragments = [];
	        for (j = 0, len = _textLines.length; j < len; j++) {
	          text = _textLines[j];
	          wrappedFragments = Metrics.wrap(text, _fontOptions, _layoutAreaWidth, fontCss, _layoutMode);
	          for (k = 0, len1 = wrappedFragments.length; k < len1; k++) {
	            fragment = wrappedFragments[k];
	            fragments.push(fragment);
	          }
	        }
	        return fragments;
	      } else {
	        results = [];
	        for (l = 0, len2 = _textLines.length; l < len2; l++) {
	          text = _textLines[l];
	          results.push(Metrics.get(text, _fontOptions, _layoutMode, fontCss));
	        }
	        return results;
	      }
	    })();
	  };

	  Layout.prototype._layoutFragments = function() {
	    var _clipped, _ellipsis, _layoutAreaHeight, _layoutAreaWidth, _maxLines, allFragments, effectiveLeading, fragment, i, j, len, m, offsetX, offsetY, ref, text, textWithEllipsis;
	    _layoutAreaWidth = this._layoutAreaWidth, _layoutAreaHeight = this._layoutAreaHeight, _maxLines = this._maxLines, _clipped = this._clipped, _ellipsis = this._ellipsis;
	    offsetX = 0;
	    offsetY = 0;
	    effectiveLeading = this.getFontSize() * this.getLeading();
	    allFragments = this._fragments;
	    if (_maxLines && _maxLines < this._fragments.length) {
	      this._fragments = this._fragments.slice(0, _maxLines);
	    }
	    ref = this._fragments;
	    for (i = j = 0, len = ref.length; j < len; i = ++j) {
	      fragment = ref[i];
	      fragment.move(offsetX, offsetY);
	      if (i === 0) {
	        this._setArea(fragment);
	      } else {
	        if (_clipped) {
	          if (fragment.getTop() - this._top > _layoutAreaHeight) {
	            this._fragments = this._fragments.slice(0, i);
	            break;
	          }
	        } else if (_ellipsis) {
	          if (fragment.getBottom() - this._top > _layoutAreaHeight) {
	            this._fragments = this._fragments.slice(0, i);
	            break;
	          }
	        }
	        this._expandArea(fragment);
	      }
	      offsetY += effectiveLeading;
	    }
	    if (_ellipsis && this._fragments.length < allFragments.length) {
	      text = peek(this._fragments).text;
	      if (text[text.length - 1] === ".") {
	        text = text.slice(0, text.length - 1);
	      }
	      textWithEllipsis = text + "…";
	      while (text.length > 0 && (m = Metrics.get(textWithEllipsis, this._fontOptions, this._layoutMode, this.getFontCss())).layoutW > _layoutAreaWidth) {
	        text = text.slice(0, text.length - 1);
	        textWithEllipsis = text + "…";
	      }
	      m.setLayoutLocationFrom(peek(this._fragments));
	      this._fragments[this._fragments.length - 1] = m;
	      return this._expandArea(m);
	    }
	  };

	  Layout.prototype._resetLayout = function() {
	    return this._fragments = this._area = this._size = this._drawArea = null;
	  };

	  Layout.prototype._updateLayout = function() {
	    if (this._fragments) {
	      return;
	    }
	    this._resetLayout();
	    this._generateFragments();
	    this._layoutFragments();
	    return this._alignFragments();
	  };

	  Layout.setter({
	    width: function(width) {
	      this._updateLayout();
	      if (!float32Eq(width, this._layoutAreaWidth)) {
	        this._layoutAreaWidth = width;
	        this._area = null;
	        this._size = null;
	        this._drawArea = null;
	        this._alignFragments();
	      }
	      return null;
	    }
	  });

	  return Layout;

	})(BaseObject);


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	#TODO

	refactor to an object you create
	if either tight or tight0 are requested, calculate both
	for textual, have two areas:
	  textualArea - the current area we compute based on font-size and glyph width
	  textualDrawArea - a pessimistic, but always true, area that covers all pixels
	    since we have no concrete information on this, we'll just make it something like 2x textualArea - or more
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(129), __webpack_require__(188)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, TextLayoutFragment) {
	  var Rectangle, allIndexes, ceil, clone, eachMatch, floor, inspect, isObject, isString, log, logL, max, min, pixelChannel, pixelStep, point, point0, rect, tightThreshold;
	  point = Atomic.point, rect = Atomic.rect, point0 = Atomic.point0, Rectangle = Atomic.Rectangle;
	  log = Foundation.log, logL = Foundation.logL, inspect = Foundation.inspect, max = Foundation.max, min = Foundation.min, isObject = Foundation.isObject, isString = Foundation.isString, allIndexes = Foundation.allIndexes, eachMatch = Foundation.eachMatch, clone = Foundation.clone;
	  floor = Math.floor, ceil = Math.ceil;
	  pixelChannel = 3;
	  pixelStep = 4;
	  tightThreshold = 127;
	  return Text.Metrics = (function(superClass) {
	    var blankString, defaultFontOptions, noBreaksWrapIndex, tempRectangleToCapturePessimisticDrawArea, toFontCss;

	    extend(Metrics, superClass);

	    function Metrics() {
	      return Metrics.__super__.constructor.apply(this, arguments);
	    }

	    Metrics.defaultFontSizeProportionalDrawAreaPadding = .45;

	    Metrics.defaultFontOptions = defaultFontOptions = {
	      fontStyle: 'normal',
	      fontVariant: 'normal',
	      fontWeight: 'normal',
	      fontSize: 16,
	      fontFamily: 'Times'
	    };

	    Metrics.toFontCss = toFontCss = function(fontOptions) {
	      return (fontOptions.fontStyle || 'normal') + " " + (fontOptions.fontVariant || 'normal') + " " + (fontOptions.fontWeight || 'normal') + " " + (fontOptions.fontSize || 16) + "px " + (fontOptions.fontFamily || 'Times') + ", Times";
	    };

	    Metrics.normalizeFontOptions = function(fontOptions) {
	      fontOptions.fontStyle || (fontOptions.fontStyle = defaultFontOptions.fontStyle);
	      fontOptions.fontVariant || (fontOptions.fontVariant = defaultFontOptions.fontVariant);
	      fontOptions.fontWeight || (fontOptions.fontWeight = defaultFontOptions.fontWeight);
	      fontOptions.fontSize || (fontOptions.fontSize = defaultFontOptions.fontSize);
	      fontOptions.fontFamily || (fontOptions.fontFamily = defaultFontOptions.fontFamily);
	      return fontOptions;
	    };

	    Metrics.get = function(text, fontOptions, layoutMode, fontCss) {
	      if (fontOptions == null) {
	        fontOptions = {};
	      }
	      switch (layoutMode) {
	        case null:
	        case void 0:
	        case "textual":
	          return this._getTextualFontMetrics(text, fontOptions, null, fontCss);
	        case "textualBaseline":
	          return this._getTextualFontMetrics(text, fontOptions, null, fontCss, false);
	        case "tight":
	          return this._getTightFontMetrics(text, 127, fontOptions, fontCss);
	        case "tight0":
	          return this._getTightFontMetrics(text, 0, fontOptions, fontCss);
	        default:
	          throw new Error("invalid layoutMode: " + (inspect(layoutMode)));
	      }
	    };

	    Metrics.getWidth = function(text, fontOptions, fontCss) {
	      var context;
	      context = Metrics.getScratchCanvasBitmap().context;
	      context.font = fontCss || toFontCss(fontOptions);
	      return context.measureText(text).width;
	    };

	    Metrics._wrapOnce = function(context, text, wordWrapWidth) {
	      if (context.measureText(text).width <= wordWrapWidth) {
	        return [text, null];
	      }
	    };

	    Metrics._noBreaksWrapIndex = noBreaksWrapIndex = function(context, text, wordWrapWidth) {
	      var left, leftPixelWidth, leftSlice, m, right, sliced, width;
	      left = 0;
	      leftPixelWidth = 0;
	      leftSlice = null;
	      right = text.length;
	      while (right - left > 1) {
	        m = (left + right) / 2 | 0;
	        if ((width = context.measureText(sliced = text.slice(0, m)).width) > wordWrapWidth) {
	          right = m;
	        } else {
	          leftSlice = sliced;
	          leftPixelWidth = width;
	          left = m;
	        }
	      }
	      if (!leftSlice) {
	        leftSlice = text.slice(0, 1);
	        leftPixelWidth = context.measureText(leftSlice).width;
	      }
	      return [leftPixelWidth, leftSlice];
	    };

	    blankString = "";

	    Metrics.wrap = function(text, fontOptions, wordWrapWidth, fontCss, layoutMode) {
	      var areaIncludesDescender, context, line, linePixelWidth, lines, nextLine, trailingSpace, trailingSpacePixelWidth;
	      if (layoutMode == null) {
	        layoutMode = "textual";
	      }
	      if (text === "") {
	        return [this._getTextualFontMetrics("", fontOptions, 0, fontCss)];
	      }
	      if (wordWrapWidth < 0) {
	        wordWrapWidth = 0;
	      }
	      areaIncludesDescender = layoutMode === "textual";
	      context = this.getScratchCanvasBitmap().context;
	      context.font = fontCss;
	      linePixelWidth = 0;
	      lines = [];
	      line = blankString;
	      trailingSpace = blankString;
	      trailingSpacePixelWidth = 0;
	      nextLine = (function(_this) {
	        return function() {
	          if (linePixelWidth > 0) {
	            lines.push(_this._getTextualFontMetrics(line, fontOptions, linePixelWidth, fontCss, areaIncludesDescender));
	            line = blankString;
	            linePixelWidth = 0;
	            trailingSpace = blankString;
	            return trailingSpacePixelWidth = 0;
	          }
	        };
	      })(this);
	      eachMatch(text, /(\s*[^\s]+)(\s*)/g, function(result) {
	        var _, firstHalfText, pixelWidth, ref, space, whiteSpaceLength, whiteSpacePixelWidth, word, wordLength, wordPixelWidth, wordStart;
	        wordStart = result.index;
	        _ = result[0], word = result[1], space = result[2];
	        wordLength = word.length;
	        whiteSpaceLength = space.length;
	        whiteSpacePixelWidth = context.measureText(space).width;
	        wordPixelWidth = context.measureText(word).width;
	        if (wordPixelWidth > wordWrapWidth) {
	          while (wordPixelWidth > wordWrapWidth) {
	            nextLine();
	            ref = noBreaksWrapIndex(context, word, wordWrapWidth), pixelWidth = ref[0], firstHalfText = ref[1];
	            line = firstHalfText;
	            linePixelWidth = pixelWidth;
	            word = word.slice(firstHalfText.length, word.length);
	            wordPixelWidth = context.measureText(word).width;
	          }
	          nextLine();
	          line = word;
	          linePixelWidth = wordPixelWidth;
	        } else if (trailingSpacePixelWidth + linePixelWidth + wordPixelWidth > wordWrapWidth) {
	          nextLine();
	          line = word;
	          linePixelWidth = wordPixelWidth;
	        } else {
	          line += trailingSpace + word;
	          linePixelWidth += trailingSpacePixelWidth + wordPixelWidth;
	        }
	        trailingSpace = space;
	        return trailingSpacePixelWidth = whiteSpacePixelWidth;
	      });
	      nextLine();
	      return lines;
	    };

	    Metrics._tightFontMetricCache = {};

	    Metrics._getTightFontMetrics = function(text, tightThreshold, fontOptions, fontCss) {
	      var base, previousResult, tightFontMetricCacheKey;
	      tightFontMetricCacheKey = text + ":" + tightThreshold + ":" + (fontCss || toFontCss(fontOptions));
	      previousResult = (base = this._tightFontMetricCache)[tightFontMetricCacheKey] || (base[tightFontMetricCacheKey] = this._generateTightFontMetrics(text, tightThreshold, fontOptions, fontCss));
	      return previousResult.clone();
	    };

	    tempRectangleToCapturePessimisticDrawArea = new Rectangle;

	    Metrics._generateTightFontMetrics = function(text, tightThreshold, fontOptions, fontCss) {
	      var area, ascender, bottom, data, descender, layoutAreaIsDrawArea, layoutH, layoutW, left, location, padding, ref, ref1, right, scratchBitmap, size, textOffsetX, textOffsetY, top;
	      padding = Metrics.defaultFontSizeProportionalDrawAreaPadding * 2;
	      ref = this.renderTextToScratchBitmap(text, fontOptions, padding), scratchBitmap = ref[0], size = ref[1], location = ref[2];
	      data = scratchBitmap.context.getImageData(0, 0, size.x, size.y).data;
	      while (!this.checkBorder(data, size)) {
	        this.log("Art.Text.Metrics#_generateTightFontMetrics: " + (inspect(fontOptions, 1)) + ", padding: " + padding + " too small. scratchBitmap.size: " + scratchBitmap.size);
	        padding *= 2;
	        ref1 = this.renderTextToScratchBitmap(text, fontOptions, padding), scratchBitmap = ref1[0], size = ref1[1], location = ref1[2];
	        data = scratchBitmap.context.getImageData(0, 0, size.x, size.y).data;
	      }
	      top = this.calculateTop(data, size, tightThreshold);
	      left = this.calculateLeft(data, size, tightThreshold);
	      right = this.calculateRight(data, size, tightThreshold);
	      bottom = this.calculateBottom(data, size, tightThreshold);
	      textOffsetX = location.x - left;
	      textOffsetY = location.y - top;
	      layoutW = right - left + 1;
	      layoutH = bottom - top + 1;
	      area = rect(left - location.x, top - location.y, right - left + 1, bottom - top + 1);
	      ascender = location.y - top + 1;
	      descender = bottom - location.y;
	      layoutAreaIsDrawArea = false;
	      if (tightThreshold === 0) {
	        layoutAreaIsDrawArea = true;
	      } else {
	        this.pessimisticDrawArea(layoutW, fontOptions, tempRectangleToCapturePessimisticDrawArea);
	      }
	      return new TextLayoutFragment(text, fontOptions, ascender, descender, textOffsetX, textOffsetY, layoutW, layoutH, layoutAreaIsDrawArea ? 0 : tempRectangleToCapturePessimisticDrawArea.x, layoutAreaIsDrawArea ? 0 : tempRectangleToCapturePessimisticDrawArea.y, layoutAreaIsDrawArea ? layoutW : tempRectangleToCapturePessimisticDrawArea.w, layoutAreaIsDrawArea ? layoutH : tempRectangleToCapturePessimisticDrawArea.h);
	    };

	    Metrics._getTextualFontMetrics = function(text, fontOptions, alreadyComputedTextWidth, fontCss, areaIncludesDescender) {
	      var area, ascender, descender, fontSize, width;
	      if (areaIncludesDescender == null) {
	        areaIncludesDescender = true;
	      }
	      fontSize = fontOptions.fontSize - 0;
	      ascender = .75 * fontSize;
	      descender = .25 * fontSize;
	      width = alreadyComputedTextWidth != null ? alreadyComputedTextWidth : this.getWidth(text, fontOptions, fontCss);
	      area = rect(0, descender - fontSize, width, fontSize - (areaIncludesDescender ? 0 : descender));
	      this.pessimisticDrawArea(width, fontOptions, tempRectangleToCapturePessimisticDrawArea);
	      return new TextLayoutFragment(text, fontOptions, ascender, descender, -area.x, -area.y, area.w, area.h, tempRectangleToCapturePessimisticDrawArea.x, tempRectangleToCapturePessimisticDrawArea.y, tempRectangleToCapturePessimisticDrawArea.w, tempRectangleToCapturePessimisticDrawArea.h);
	    };

	    Metrics.classGetter({
	      scratchCanvasBitmap: function() {
	        return this._scratchCanvasBitmap || (this._scratchCanvasBitmap = new Canvas.Bitmap(point(10, 10)));
	      }
	    });

	    Metrics.calculateTop = function(data, size, tightThreshold) {
	      var lineStep, pos;
	      lineStep = size.x * pixelStep;
	      pos = pixelChannel;
	      while (pos < data.length && data[pos] <= tightThreshold) {
	        pos += pixelStep;
	      }
	      return floor(pos / lineStep);
	    };

	    Metrics.calculateBottom = function(data, size, tightThreshold) {
	      var lineStep, pos;
	      lineStep = size.x * pixelStep;
	      pos = data.length + pixelChannel - pixelStep;
	      while (pos > 0 && data[pos] <= tightThreshold) {
	        pos -= pixelStep;
	      }
	      return floor(pos / lineStep);
	    };

	    Metrics.calculateLeft = function(data, size, tightThreshold) {
	      var length, lineStep, pos, posX;
	      lineStep = size.x * pixelStep;
	      length = data.length;
	      posX = pixelStep + pixelChannel;
	      while (posX < lineStep) {
	        pos = posX;
	        while (pos < length) {
	          if (data[pos] > tightThreshold) {
	            return floor(posX / pixelStep);
	          }
	          pos += lineStep;
	        }
	        posX += pixelStep;
	      }
	    };

	    Metrics.calculateRight = function(data, size, tightThreshold) {
	      var length, lineStep, pos, posX;
	      lineStep = size.x * pixelStep;
	      length = data.length;
	      posX = lineStep - 2 * pixelStep + pixelChannel;
	      while (posX > 0) {
	        pos = posX;
	        while (pos < length) {
	          if (data[pos] > tightThreshold) {
	            return floor(posX / pixelStep);
	          }
	          pos += lineStep;
	        }
	        posX -= pixelStep;
	      }
	    };

	    Metrics.topAndBottomCheck = function(data, size) {
	      var lineStep, posX, topBottomStep;
	      lineStep = size.x * pixelStep;
	      posX = pixelChannel;
	      topBottomStep = (size.y - 1) * lineStep;
	      while (posX < lineStep) {
	        if (data[posX] || data[posX + topBottomStep]) {
	          return false;
	        }
	        posX += pixelStep;
	      }
	      return true;
	    };

	    Metrics.leftAndRightCheck = function(data, size) {
	      var leftRightStep, lineStep, posY;
	      lineStep = size.x * pixelStep;
	      posY = pixelChannel + lineStep;
	      leftRightStep = lineStep - pixelStep;
	      while (posY < data.length) {
	        if (data[posY] || data[posY + leftRightStep]) {
	          return false;
	        }
	        posY += lineStep;
	      }
	      return true;
	    };

	    Metrics.checkBorder = function(data, size) {
	      return this.topAndBottomCheck(data, size) && this.leftAndRightCheck(data, size);
	    };

	    Metrics.pessimisticDrawArea = function(textWidth, fontOptions, intoRectangle, increasedFontSizeProportionalDrawAreaPadding) {
	      var fontSize, h, padding, w, x, y;
	      fontSize = fontOptions.fontSize;
	      padding = fontSize * (increasedFontSizeProportionalDrawAreaPadding || fontOptions.padding || Metrics.defaultFontSizeProportionalDrawAreaPadding);
	      x = Math.floor(-padding);
	      y = Math.floor(-padding);
	      w = Math.ceil(x + textWidth + padding * 2) - x;
	      h = Math.ceil(y + fontSize + padding * 2) - y;
	      if (intoRectangle) {
	        intoRectangle.x = x;
	        intoRectangle.y = y;
	        intoRectangle.w = w;
	        intoRectangle.h = h;
	        return intoRectangle;
	      } else {
	        return rect(x, y, w, h);
	      }
	    };

	    Metrics._scratchBitmap = null;

	    Metrics.renderTextToScratchBitmap = function(text, fontOptions, padding) {
	      var context, drawArea, ref, scratchBitmapSize, size, x, y;
	      drawArea = this.pessimisticDrawArea(this.getWidth(text, fontOptions), fontOptions, null, padding);
	      size = drawArea.size.size;
	      scratchBitmapSize = ((ref = this._scratchBitmap) != null ? ref.size : void 0) || point0;
	      if (!scratchBitmapSize.gt(size)) {
	        this._scratchBitmap = new Canvas.Bitmap(scratchBitmapSize.max(size));
	      } else {
	        this._scratchBitmap.clear();
	      }
	      context = this._scratchBitmap.context;
	      context.textAlign = 'left';
	      context.textBaseline = 'alphabetic';
	      context.font = toFontCss(fontOptions);
	      context.fillText(text, x = -drawArea.x, y = -drawArea.y);
	      return [this._scratchBitmap, size, point(x, y)];
	    };

	    Metrics.debug = function(area, bitmap, location, options) {
	      var image;
	      image = new Canvas.Bitmap(bitmap.size);
	      image.clear("white");
	      image.drawRectangle(location, area, "#ddf");
	      image.drawRectangle(location, rect(area.location.x, 0, area.size.x, 1), "red");
	      image.drawRectangle(location, rect(0, area.location.y, 1, area.size.y), "green");
	      image.drawBitmap(point(), bitmap);
	      return this.log(image, {
	        layoutMode: options.layoutMode
	      });
	    };

	    return Metrics;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	#TODO

	refactor to an object you create
	if either tight or tight0 are requested, calculate both
	for textual, have two areas:
	  textualArea - the current area we compute based on font-size and glyph width
	  textualDrawArea - a pessimistic, but always true, area that covers all pixels
	    since we have no concrete information on this, we'll just make it something like 2x textualArea - or more
	 */
	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(129)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas) {
	  var BaseObject, TextLayoutFragment, inspect, log, point, point0, rect;
	  point = Atomic.point, rect = Atomic.rect, point0 = Atomic.point0;
	  log = Foundation.log, BaseObject = Foundation.BaseObject, inspect = Foundation.inspect;
	  return TextLayoutFragment = (function(superClass) {
	    extend(TextLayoutFragment, superClass);

	    function TextLayoutFragment(text, font, ascender, descender, textOffsetX, textOffsetY, layoutW, layoutH, drawAreaX, drawAreaY, drawAreaW, drawAreaH) {
	      this.text = text;
	      this.font = font;
	      this.ascender = ascender;
	      this.descender = descender;
	      this.textOffsetX = textOffsetX;
	      this.textOffsetY = textOffsetY;
	      this.layoutW = layoutW;
	      this.layoutH = layoutH;
	      this.drawAreaX = drawAreaX;
	      this.drawAreaY = drawAreaY;
	      this.drawAreaW = drawAreaW;
	      this.drawAreaH = drawAreaH;
	      this.layoutX = this.layoutY = 0;
	      this.alignmentOffsetX = 0;
	      this.alignmentOffsetY = 0;
	    }

	    TextLayoutFragment.prototype.toString = function() {
	      return inspect(this.toPlainObject());
	    };

	    TextLayoutFragment.prototype.toPlainObject = function() {
	      return {
	        text: this.text,
	        font: this.font,
	        ascender: this.ascender,
	        descender: this.descender,
	        textOffsetX: this.textOffsetX,
	        textOffsetY: this.textOffsetY,
	        layoutX: this.layoutX,
	        layoutY: this.layoutY,
	        layoutW: this.layoutW,
	        layoutH: this.layoutH,
	        drawAreaX: this.drawAreaX,
	        drawAreaY: this.drawAreaY,
	        drawAreaW: this.drawAreaW,
	        drawAreaH: this.drawAreaH,
	        alignmentOffsetX: this.alignmentOffsetX,
	        alignmentOffsetY: this.alignmentOffsetY
	      };
	    };

	    TextLayoutFragment.prototype.clone = function() {
	      return new TextLayoutFragment(this.text, this.font, this.ascender, this.descender, this.textOffsetX, this.textOffsetY, this.layoutW, this.layoutH, this.drawAreaX, this.drawAreaY, this.drawAreaW, this.drawAreaH);
	    };

	    TextLayoutFragment.prototype.move = function(x, y) {
	      this.moveX(x);
	      return this.moveY(y);
	    };

	    TextLayoutFragment.prototype.moveX = function(x) {
	      this.layoutX += x;
	      return this.drawAreaX += x;
	    };

	    TextLayoutFragment.prototype.moveY = function(y) {
	      this.layoutY += y;
	      return this.drawAreaY += y;
	    };

	    TextLayoutFragment.prototype.setLayoutLocationFrom = function(fragment) {
	      this.layoutX = fragment.layoutX;
	      return this.layoutY = fragment.layoutY;
	    };

	    TextLayoutFragment.getter({
	      left: function() {
	        return this.getAlignedLayoutX();
	      },
	      top: function() {
	        return this.getAlignedLayoutY();
	      },
	      bottom: function() {
	        return this.getAlignedLayoutY() + this.layoutH;
	      },
	      right: function() {
	        return this.getAlignedLayoutX() + this.layoutW;
	      },
	      alignedLayoutX: function() {
	        return this.layoutX + this.alignmentOffsetX;
	      },
	      alignedLayoutY: function() {
	        return this.layoutY + this.alignmentOffsetY;
	      },
	      alignedDrawAreaX: function() {
	        return this.drawAreaX + this.alignmentOffsetX;
	      },
	      alignedDrawAreaY: function() {
	        return this.drawAreaY + this.alignmentOffsetY;
	      },
	      layoutArea: function() {
	        return rect(this.layoutX, this.layoutY, this.layoutW, this.layoutH);
	      },
	      alignedLayoutArea: function() {
	        return rect(this.getAlignedLayoutX(), this.getAlignedLayoutY(), this.layoutW, this.layoutH);
	      },
	      alignedDrawArea: function() {
	        return rect(this.getAlignedDrawAreaX(), this.getAlignedDrawAreaY(), this.drawAreaW, this.drawAreaH);
	      },
	      alignedDrawAreaLeft: function() {
	        return this.getAlignedDrawAreaX();
	      },
	      alignedDrawAreaTop: function() {
	        return this.getAlignedDrawAreaY();
	      },
	      alignedDrawAreaRight: function() {
	        return this.getAlignedDrawAreaX() + this.drawAreaW;
	      },
	      alignedDrawAreaBottom: function() {
	        return this.getAlignedDrawAreaY() + this.drawAreaH;
	      },
	      area: function() {
	        console.error("TextLayoutFragment.area is DEPRICATED. Use: TextLayoutFragment#layoutArea");
	        return rect(this.layoutX - this.textOffsetX, this.layoutY - this.textOffsetY, this.layoutW, this.layoutH);
	      },
	      textX: function() {
	        return this.layoutX + this.textOffsetX + this.alignmentOffsetX;
	      },
	      textY: function() {
	        return this.layoutY + this.textOffsetY + this.alignmentOffsetY;
	      }
	    });

	    return TextLayoutFragment;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, FillableBase, Foundation, ShapeElement, Text, createWithPostCreate, isFunction, pureMerge,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Text = __webpack_require__(182);

	FillableBase = __webpack_require__(179);

	pureMerge = Foundation.pureMerge, isFunction = Foundation.isFunction, createWithPostCreate = Foundation.createWithPostCreate;

	module.exports = createWithPostCreate(ShapeElement = (function(superClass) {
	  extend(ShapeElement, superClass);

	  function ShapeElement() {
	    ShapeElement.__super__.constructor.apply(this, arguments);
	    this._lastPathFunction = null;
	    this._curriedPathFunction = null;
	  }

	  ShapeElement.drawProperty({
	    fillRule: {
	      "default": "nonzero",
	      validate: function(r) {
	        return r === "nonzero" || r === "evenodd";
	      }
	    },
	    path: {
	      "default": function(context, size) {
	        var h, w;
	        w = size.w, h = size.h;
	        context.beginPath();
	        context.moveTo(0, 0);
	        conext.lineTo(0, h);
	        conext.lineTo(w, h);
	        conext.lineTo(w, 0);
	        conext.lineTo(0, 0);
	        return context.closePath();
	      },
	      validate: function(f) {
	        return isFunction(f);
	      }
	    }
	  });

	  ShapeElement.getter({
	    curriedPathFunction: function() {
	      var pathFunction;
	      pathFunction = this.getPath();
	      if (this._lastPathFunction !== pathFunction) {
	        this._lastPathFunction = pathFunction;
	        return this._curriedPathFunction = (function(_this) {
	          return function(context) {
	            return pathFunction(context, _this.currentSize);
	          };
	        })(this);
	      } else {
	        return this._curriedPathFunction;
	      }
	    }
	  });

	  ShapeElement.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	    this._prepareDrawOptions(this._drawOptions, compositeMode, opacity);
	    return this.fillShape(target, elementToTargetMatrix, this._drawOptions);
	  };

	  ShapeElement.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	    options.color || (options.color = this._color);
	    options.fillRule = this._fillRule;
	    return target.fillShape(elementToTargetMatrix, options, this.getCurriedPathFunction());
	  };

	  ShapeElement.prototype.strokeShape = function(target, elementToTargetMatrix, options) {
	    options.color || (options.color = this._color);
	    return target.strokeShape(elementToTargetMatrix, options, this.getCurriedPathFunction());
	  };

	  return ShapeElement;

	})(FillableBase));


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, BaseObject, Color, FillableBase, Foundation, GlobalEpochCycle, Matrix, Point, Rectangle, Text, TextElement, color, createWithPostCreate, globalEpochCycle, log, matrix, merge, normalizeFontOptions, point, propInternalName, propSetterName, pureMerge, rect, shallowClone,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Text = __webpack_require__(182);

	FillableBase = __webpack_require__(179);

	GlobalEpochCycle = __webpack_require__(168);

	log = Foundation.log, BaseObject = Foundation.BaseObject, shallowClone = Foundation.shallowClone, pureMerge = Foundation.pureMerge, merge = Foundation.merge, createWithPostCreate = Foundation.createWithPostCreate;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;

	normalizeFontOptions = Text.Metrics.normalizeFontOptions;

	globalEpochCycle = GlobalEpochCycle.globalEpochCycle;

	propInternalName = BaseObject.propInternalName;

	propSetterName = BaseObject._propSetterName;

	module.exports = createWithPostCreate(TextElement = (function(superClass) {
	  var validLayoutModes, validOverflows;

	  extend(TextElement, superClass);

	  TextElement.prototype.defaultSize = {
	    cs: 1
	  };

	  function TextElement() {
	    TextElement.__super__.constructor.apply(this, arguments);
	    this._textLayout = null;
	  }

	  TextElement.propertySet = function(set) {
	    var results, setName, setOptions;
	    results = [];
	    for (setName in set) {
	      setOptions = set[setName];
	      results.push((function(_this) {
	        return function(setName, setOptions) {
	          var defaultValue, definePropertyFunctionName, fn, internalName, propDefault, propDefinition, ref, setSetterName, subPropName, virtualProperties;
	          definePropertyFunctionName = setOptions.definePropertyFunctionName;
	          propDefinition = {};
	          propDefault = setOptions["default"] || {};
	          propDefinition[setName] = {
	            "default": setOptions["default"],
	            preprocess: setOptions.preprocess,
	            validate: setOptions.validate
	          };
	          _this[definePropertyFunctionName](propDefinition);
	          internalName = propInternalName(setName);
	          setSetterName = propSetterName(setName);
	          virtualProperties = {};
	          ref = setOptions["default"];
	          fn = function(subPropName) {
	            return virtualProperties[subPropName] = {
	              getter: function(pending) {
	                var ref1;
	                return (ref1 = this.getState()[internalName]) != null ? ref1[subPropName] : void 0;
	              },
	              setter: function(v) {
	                var newOptions, oldOptions;
	                if ((oldOptions = this[internalName]) === (newOptions = this._pendingState[internalName])) {
	                  newOptions = shallowClone(oldOptions);
	                  newOptions[subPropName] = v;
	                  return this[setSetterName](newOptions);
	                } else {
	                  return newOptions[subPropName] = v;
	                }
	              }
	            };
	          };
	          for (subPropName in ref) {
	            defaultValue = ref[subPropName];
	            fn(subPropName);
	          }
	          return _this.virtualProperty(virtualProperties);
	        };
	      })(this)(setName, setOptions));
	    }
	    return results;
	  };

	  validLayoutModes = Text.Layout.validLayoutOptions.layoutMode;

	  validOverflows = Text.Layout.validLayoutOptions.overflow;

	  TextElement.propertySet({
	    font: {
	      definePropertyFunctionName: "drawLayoutProperty",
	      preprocess: function(v) {
	        return normalizeFontOptions(v);
	      },
	      "default": Text.Metrics.defaultFontOptions
	    },
	    format: {
	      definePropertyFunctionName: "drawLayoutProperty",
	      "default": Text.Layout.defaultLayoutOptions,
	      validate: function(layoutOptions) {
	        var layoutMode, overflow;
	        layoutMode = layoutOptions.layoutMode, overflow = layoutOptions.overflow;
	        return (!layoutMode || validLayoutModes[layoutMode]) && (!overflow || validOverflows[overflow]);
	      }
	    }
	  });

	  TextElement.drawLayoutProperty({
	    text: {
	      "default": Text.Layout.defaultText,
	      preprocess: function(t) {
	        return "" + t;
	      }
	    },
	    fontOptions: {
	      validate: function(v) {
	        return !v;
	      }
	    },
	    layoutOptions: {
	      validate: function(v) {
	        return !v;
	      }
	    }
	  });

	  TextElement.prototype.getBaseDrawArea = function() {
	    var ref;
	    return ((ref = this._textLayout) != null ? ref.getDrawArea() : void 0) || rect();
	  };

	  TextElement.prototype.getPendingBaseDrawArea = function() {
	    var ref;
	    return ((ref = this._textLayout) != null ? ref.getDrawArea() : void 0) || rect();
	  };

	  TextElement.prototype.customLayoutChildrenFirstPass = function(size) {
	    var ret;
	    ret = null;
	    globalEpochCycle.timePerformance("aimTL", (function(_this) {
	      return function() {
	        _this._textLayout = new Text.Layout(_this.getPendingText(), _this.getPendingFont(), _this.getPendingFormat(), size.x, size.y);
	        return ret = _this._textLayout.getSize();
	      };
	    })(this));
	    return ret;
	  };

	  TextElement.prototype.customLayoutChildrenSecondPass = function(size) {
	    this._textLayout.setWidth(size.x);
	    return this._textLayout.size;
	  };

	  TextElement.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	    return this._textLayout.draw(target, elementToTargetMatrix, pureMerge(options, {
	      layoutSize: this.getCurrentSize(),
	      color: (options != null ? options.color : void 0) || this._color
	    }));
	  };

	  TextElement.prototype.strokeShape = function(target, elementToTargetMatrix, options) {
	    return this._textLayout.stroke(target, elementToTargetMatrix, pureMerge(options, {
	      layoutSize: this.getCurrentSize(),
	      color: (options != null ? options.color : void 0) || this._color
	    }));
	  };

	  return TextElement;

	})(FillableBase));


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var Filters;

	module.exports = Filters = __webpack_require__(192);

	Filters.BlurElement = __webpack_require__(193);

	Filters.FilterElement = __webpack_require__(194);

	Filters.ShadowElement = __webpack_require__(195);

	Filters.finishLoad(["BlurElement", "FilterElement", "ShadowElement"]);


/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var Elements,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Elements = __webpack_require__(88);

	module.exports = Elements.Filters || (Elements.Filters = (function(superClass) {
	  extend(Filters, superClass);

	  function Filters() {
	    return Filters.__super__.constructor.apply(this, arguments);
	  }

	  Filters.namespace = Elements;

	  Filters.namespacePath = "Neptune.Art.Engine.Elements.Filters";

	  return Filters;

	})(Neptune.Base));

	Elements.addNamespace(Elements.Filters);


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, BlurElement, Color, FilterElement, Foundation, Matrix, Point, Rectangle, color, createWithPostCreate, matrix, point, rect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	FilterElement = __webpack_require__(194);

	createWithPostCreate = Foundation.createWithPostCreate;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;

	module.exports = createWithPostCreate(BlurElement = (function(superClass) {
	  extend(BlurElement, superClass);

	  function BlurElement() {
	    return BlurElement.__super__.constructor.apply(this, arguments);
	  }

	  BlurElement.prototype.defaultRadius = 10;

	  BlurElement.prototype.defaultCompositeMode = "replace";

	  BlurElement.prototype.filter = function(elementSpaceTarget, scale) {
	    return elementSpaceTarget.blur(this.radius * scale);
	  };

	  return BlurElement;

	})(FilterElement));


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Color, CoreElementsBase, FilterElement, Foundation, Matrix, Point, Rectangle, color, createWithPostCreate, isString, log, matrix, point, rect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	CoreElementsBase = __webpack_require__(180);

	log = Foundation.log, isString = Foundation.isString, createWithPostCreate = Foundation.createWithPostCreate;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;


	/*
	A FilterElement is any Element with a draw method that takes uses "target's" pixels as input to its own draw computations.

	Ex: Blur and Shadow

	TODO - Fully implelement Blur and Shadow's new semantics:

	  Each has a sourceArea, in parent-space, default: rect @parent.size
	 */

	module.exports = createWithPostCreate(FilterElement = (function(superClass) {
	  extend(FilterElement, superClass);

	  function FilterElement() {
	    return FilterElement.__super__.constructor.apply(this, arguments);
	  }

	  FilterElement.registerWithElementFactory = function() {
	    return this !== FilterElement;
	  };


	  /*
	  SBD 2016-02-25: I don't think filterSource is fully supported for anything other than the direct parent
	    I have tried to make FilterElement fully support it, but
	    I think Core.Element is missing critical features for Elements with distant decendent filters.
	    Lines that mention filterSource in Core.Element are all commented out.
	    Somehow, whenever things change, FilterSources need to get an updated list of their FilterElement decendents.
	    Then methods like Element#_accountForOverdraw can correctly check each FilterElement decendent instead of only children.
	   */

	  FilterElement.drawProperty({
	    filterSource: {
	      "default": null,
	      validate: function(v) {
	        return !v || isString(v);
	      }

	      /*
	      Radius is interpeted by FilterElement as the size of the convolution kernel the filter will apply.
	      I.E. each output pixel can only be based on at most:
	        - all pixels +/- "radius" pixel-units on the X and Y dimensions
	        - I.E. the (2 * radius + 1)-square pixels centered on the output pixel
	       */
	    }
	  });

	  FilterElement.drawAreaProperty({
	    radius: {
	      "default": 0,
	      validate: function(v) {
	        return typeof v === "number";
	      }

	      /*
	      Override this for the "simplest" filter control
	      
	      IN:
	        filterScratchBitmap:
	          at start contains the pixels to be filtered
	      
	        pixelData: is an array of RGBA values extracted from filterScratchBitmap
	          length: 4 * filterScratchBitmap.size.area (RGBA sets)
	      
	        scale: number
	          If the scale is 1, then the filter's currentSize is 1:1 pixels in filterScratchBitmap.
	      
	      NOTE: Convert x, y coordinates to array index:
	        (x, y) -> (@filterScratchBitmap.size.x * y + x) * 4
	       */
	    }
	  });

	  FilterElement.prototype.filterPixelData = function(filterScratchBitmap, pixelData, scale) {
	    return pixelData;
	  };


	  /*
	  override this for "normal" filter control.
	  IN:
	    filterScratchBitmap:
	      at start contains the pixels to be filtered
	  
	    scale: number
	      If the scale is 1, then the filter's currentSize is 1:1 pixels in filterScratchBitmap.
	  
	  OUT: filterScratchBitmap with filter results or new bitmap of the same size
	    NOTE: you can, and should if possible, re-use filterScratchBitmap
	   */

	  FilterElement.prototype.filter = function(filterScratchBitmap, scale) {
	    var imageData;
	    imageData = filterScratchBitmap.getImageData();
	    this.filterPixelData(filterScratchBitmap, imageData.data, scale);
	    filterScratchBitmap.putImageData(imageData);
	    return filterScratchBitmap;
	  };

	  FilterElement.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	    var filterTarget, filterTargetToElementMatrix, ref, scale;
	    scale = elementToTargetMatrix.exactScaler;
	    ref = this._filterFilterSource(scale, target), filterTargetToElementMatrix = ref.filterTargetToElementMatrix, filterTarget = ref.filterTarget;
	    return target.drawBitmap(filterTargetToElementMatrix.mul(elementToTargetMatrix), filterTarget, options);
	  };

	  FilterElement.prototype.overDraw = function(proposedTargetSpaceDrawArea, parentToTargetMatrix) {
	    var minimumElementSpaceDrawArea, propsedElementSpaceDrawArea, requiredTargetSpaceDrawArea, targetToElementMatrix;
	    targetToElementMatrix = parentToTargetMatrix.inv.mul(this.parentToElementMatrix);
	    propsedElementSpaceDrawArea = targetToElementMatrix.transformBoundingRect(proposedTargetSpaceDrawArea);
	    minimumElementSpaceDrawArea = propsedElementSpaceDrawArea.grow(this.radius).intersection(this.elementSpaceDrawArea);
	    requiredTargetSpaceDrawArea = parentToTargetMatrix.transformBoundingRect(minimumElementSpaceDrawArea);
	    return proposedTargetSpaceDrawArea.union(requiredTargetSpaceDrawArea);
	  };

	  FilterElement.virtualProperty({
	    baseDrawArea: function(pending) {
	      var _currentSize, _radius, baseDrawArea, ref;
	      ref = this.getState(pending), _currentSize = ref._currentSize, _radius = ref._radius;
	      baseDrawArea = this.getElementSpaceSourceDrawArea(pending);
	      if (this._inverted) {
	        this.filterSourceDrawAreaInElementSpace.unionInto(baseDrawArea);
	      }
	      return baseDrawArea.grow(_radius);
	    }
	  });

	  FilterElement.getter({
	    requiresParentStagingBitmap: function() {
	      return true;
	    },
	    isFilter: function() {
	      return true;
	    }
	  });


	  /*
	  IN:
	    pending: if true, use pending data
	    returnChild: see OUT
	  
	  OUT: if returnChild
	      the child of FilterSourceElement which is @ or an ancestor of @
	    else
	      FilterSourceElement
	   */

	  FilterElement.prototype._getFilterSourceElement = function(pending, returnChild) {
	    var c, filterSource, p, state;
	    state = this.getState(pending);
	    if (filterSource = state._filterSource) {
	      p = state._parent;
	      c = this;
	      while (p && p.name !== filterSource) {
	        c = p;
	        p = p.getState(pending)._parent;
	      }
	      if (p) {
	        if (returnChild) {
	          return c;
	        } else {
	          return p;
	        }
	      }
	      console.warn(this.inspectedName + ": no ancestor's name matches filterSource:" + (inspect(filterSource)));
	    }
	    if (returnChild) {
	      return this;
	    } else {
	      return state._parent;
	    }
	  };


	  /*
	  Can only be called when filterSource._currentToTargetMatrix is valid.
	  I.E. in the middle of a draw cycle.
	   */

	  FilterElement.prototype._filterFilterSource = function(scale, bitmapFactory) {
	    var elementSpaceDrawArea, elementToFilterScratchMatrix, filterScratch, filterSource, filterSourceTargetToFilterScratchMatrix;
	    filterSource = this.getFilterSourceElement();
	    elementSpaceDrawArea = this.getElementSpaceDrawArea();
	    elementToFilterScratchMatrix = Matrix.translate(elementSpaceDrawArea.location.neg.add(this.radius)).scale(scale);
	    filterSourceTargetToFilterScratchMatrix = filterSource._currentToTargetMatrix.inv.scale(this.getFilterSourceSizeRatio()).mul(elementToFilterScratchMatrix);
	    filterScratch = bitmapFactory.newBitmap(elementSpaceDrawArea.size.add(this.radius * 2).mul(scale)).drawBitmap(filterSourceTargetToFilterScratchMatrix, filterSource._currentDrawTarget);
	    return {
	      filterTargetToElementMatrix: elementToFilterScratchMatrix.inv,
	      filterTarget: this.filter(filterScratch, scale)
	    };
	  };

	  FilterElement.virtualProperty({
	    filterSourceDrawArea: function(pending) {
	      var filterSourceChildElement, filterSourceElement;
	      filterSourceElement = this.getFilterSourceElement(pending);
	      filterSourceChildElement = this.getFilterSourceChildElement(pending);
	      return filterSourceElement._computeElementSpaceDrawArea(filterSourceChildElement);
	    },
	    filterSourceSize: function(pending) {
	      return this.getFilterSourceElement(pending).getCurrentSize(pending);
	    },
	    filterSourceSizeRatio: function(pending) {
	      var _currentSize, filterSourceSize;
	      _currentSize = this.getState(pending)._currentSize;
	      filterSourceSize = this.getFilterSourceSize(pending);
	      if (_currentSize.eq(filterSourceSize)) {
	        return 1;
	      } else {
	        return _currentSize.div(filterSourceSize);
	      }
	    },
	    elementSpaceSourceDrawArea: function(pending) {
	      return this.getFilterSourceDrawArea(pending).mul(this.getFilterSourceSizeRatio(pending));
	    },
	    filterSourceElement: function(pending) {
	      return this._getFilterSourceElement(pending);
	    },
	    filterSourceChildElement: function(pending) {
	      return this._getFilterSourceElement(pending, true);
	    },
	    filterSourceDrawAreaInElementSpace: function(pending) {
	      return this.getFilterSourceElement(pending).elementToElementMatrix(this).transformBoundingRect(this.getFilterSourceDrawArea(pending));
	    }
	  });

	  return FilterElement;

	})(CoreElementsBase));


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Color, FilterElement, Foundation, Matrix, Point, Rectangle, ShadowElement, color, createWithPostCreate, log, matrix, point, rect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	FilterElement = __webpack_require__(194);

	createWithPostCreate = Foundation.createWithPostCreate, log = Foundation.log;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;

	module.exports = createWithPostCreate(ShadowElement = (function(superClass) {
	  extend(ShadowElement, superClass);

	  function ShadowElement() {
	    return ShadowElement.__super__.constructor.apply(this, arguments);
	  }

	  ShadowElement.prototype.defaultCompositeMode = "destover";

	  ShadowElement.drawProperty({
	    inverted: {
	      "default": false
	    }
	  });

	  ShadowElement.prototype.filter = function(elementSpaceTarget, scale) {
	    elementSpaceTarget.blurAlpha(this._radius * scale, {
	      inverted: this.inverted
	    });
	    return elementSpaceTarget.drawRectangle(null, elementSpaceTarget.size, {
	      color: this._color,
	      compositeMode: "target_alphamask"
	    });
	  };


	  /*
	  NOTES
	    Okay, we have two options:
	  
	    a) we override fillShape here:
	      we render to a stagingBitmap in element-space, but with borders expanded sufficiently
	      Then we have to "fill" those borders with @_color after the filtered data has been provided.
	  
	    b) we hook it into the filter processes itself and pre-enlarge the filter-source bitmap to be large enough
	      to include the extra pixels we need. This means more filter work which isn't necessary.
	   */

	  return ShadowElement;

	})(FilterElement));


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var Widgets;

	module.exports = Widgets = __webpack_require__(197);

	Widgets.PagingScrollElement = __webpack_require__(198);

	Widgets.finishLoad(["PagingScrollElement"]);


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var Elements,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Elements = __webpack_require__(88);

	module.exports = Elements.Widgets || (Elements.Widgets = (function(superClass) {
	  extend(Widgets, superClass);

	  function Widgets() {
	    return Widgets.__super__.constructor.apply(this, arguments);
	  }

	  Widgets.namespace = Elements;

	  Widgets.namespacePath = "Neptune.Art.Engine.Elements.Widgets";

	  return Widgets;

	})(Neptune.Base));

	Elements.addNamespace(Elements.Widgets);


/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var AnimatorSupport, Atomic, BaseModule, BaseObject, Element, EventEpoch, Foundation, GestureRecognizer, Matrix, PagingScrollElement, Point, Rectangle, ScrollAnimator, abs, absGt, absGte, absLt, absLte, animatorSpringConstant, animatorSpringFriction, bound, brakingFactor, ceil, createGestureRecognizer, createWithPostCreate, crossScrollProperties, currentSecond, eventEpoch, first, flickSpeedMultiplier, inspect, isPlainArray, isPoint, last, log, matrix, max, maxChange, maxMagnitude, merge, min, minMagnitude, minimumFlickVelocity, peek, point, point0, pointNearInfinity, rect, requestAnimationFrame, round, scrollProperties, timeout,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	EventEpoch = __webpack_require__(135).EventEpoch;

	Element = __webpack_require__(148);

	GestureRecognizer = __webpack_require__(132);

	log = Foundation.log, inspect = Foundation.inspect, currentSecond = Foundation.currentSecond, bound = Foundation.bound, round = Foundation.round, first = Foundation.first, last = Foundation.last, peek = Foundation.peek, min = Foundation.min, max = Foundation.max, abs = Foundation.abs, merge = Foundation.merge, createWithPostCreate = Foundation.createWithPostCreate, BaseObject = Foundation.BaseObject, timeout = Foundation.timeout, ceil = Foundation.ceil, round = Foundation.round, isPlainArray = Foundation.isPlainArray, BaseModule = Foundation.BaseModule, absLt = Foundation.absLt, absLte = Foundation.absLte, absGt = Foundation.absGt, absGte = Foundation.absGte, minMagnitude = Foundation.minMagnitude, maxMagnitude = Foundation.maxMagnitude, maxChange = Foundation.maxChange, absLt = Foundation.absLt, requestAnimationFrame = Foundation.requestAnimationFrame;

	point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, isPoint = Atomic.isPoint;

	point0 = Point.point0, pointNearInfinity = Point.pointNearInfinity;

	eventEpoch = EventEpoch.eventEpoch;

	createGestureRecognizer = GestureRecognizer.createGestureRecognizer;

	scrollProperties = {
	  vertical: "y",
	  horizontal: "x"
	};

	crossScrollProperties = {
	  vertical: "x",
	  horizontal: "y"
	};

	brakingFactor = 3;

	minimumFlickVelocity = 300;

	animatorSpringConstant = 300;

	animatorSpringFriction = 25;

	flickSpeedMultiplier = 1;


	/*
	PagingScrollElement

	guarantee:
	  Will never scroll more than one "windowSize" per frame.
	  That means you need at least as many "pages" as it will take to display one more window-full of content
	  above or below the current displayed content.

	margins:
	  Margins on paging elements are currently not supported.
	  We could relatively easilly support constant margins.
	  Anything more complex gets a little tedious.
	  Recomendation: Use Padding instead of Margins.

	events:
	  currentPageChanged:
	    oldCurrentPage: element
	    currentPage:    element
	  scrollUpdate:
	    currentPage:          element           - @currentPage
	    currentGeometry:      plain object      - @currentGeometry
	    pagesBeforeBaseline:  array of elements - @pagesBeforeBaseline
	    pagesAfterBaseline:   array of elements - @pagesAfterBaseline

	naming:

	  All "positions" are scalers.
	  All "positions" are relative to the top/left of the PagingScrollElement.
	  Positive values indicate more to the bottom/right of the PagingScrollElement.

	  "scrollPosition" is the main geometry value for the PagingScrollElement.

	  I chose "scrollPosition" over just "position" or "location".
	  location vs position: http://www.eng-tips.com/viewthread.cfm?qid=180516
	    position can be used to refer to internal configuration, which scrollPosition is,
	    but location cannot. This avoids confusion with Element's currentLocations.

	Implementation Notes:

	  When to use "pending" property values:
	    - use pending values only as inputs to computation that results in setting another property
	    - use current (non-pending) poperty values for all getters
	 */


	/*
	ScrollAnimator

	scrollElement api:
	  @getter
	    minScrollPosition:
	    maxScrollPosition:
	    scrollPosition:

	  @setter
	    scrollPosition: (scrollPosition) ->

	onIdle is called when all animations and gestures have stopped.
	 */

	ScrollAnimator = (function(superClass) {
	  var frameCount, missCount;

	  extend(ScrollAnimator, superClass);

	  function ScrollAnimator(scrollElement, maximumVelocity1) {
	    this.scrollElement = scrollElement;
	    this.maximumVelocity = maximumVelocity1;
	    ScrollAnimator.__super__.constructor.apply(this, arguments);
	    this._referenceFrame = this.scrollElement.getPendingReferenceFrame();
	    this._velocity = 0;
	    this._mode = "tracking";

	    /*
	    modes:
	      braking:      friction only
	      spring:       spring
	      tracking:     direct tracking, no physics
	     */
	  }

	  ScrollAnimator.getter({
	    mode: function() {
	      return this._mode;
	    },
	    minScrollPosition: function() {
	      return this.scrollElement.getMinScrollPositionInReferenceFrame(this._referenceFrame);
	    },
	    maxScrollPosition: function() {
	      return this.scrollElement.getMaxScrollPositionInReferenceFrame(this._referenceFrame);
	    },
	    scrollPosition: function() {
	      return this.scrollElement.getScrollPositionInReferenceFrame(this._referenceFrame);
	    },
	    animationDone: function() {
	      switch (this.mode) {
	        case "spring":
	          return this.velocityIsSlow() && this._desiredScrollPosition === this.getScrollPosition();
	        case "braking":
	          return this.velocityIsSlow();
	        default:
	          return !this._activeTouch;
	      }
	    },
	    animationContinues: function() {
	      return !this.getAnimationDone();
	    }
	  });

	  ScrollAnimator.setter({
	    mode: function(v) {
	      return this._mode = v;
	    },
	    referenceFrame: function(v) {
	      return this._referenceFrame = v;
	    },
	    scrollPosition: function(l) {
	      return this.scrollElement.setScrollPositionInReferenceFrame(round(l), this._referenceFrame);
	    },
	    activeTouch: function(v) {
	      if (!(this._activeTouch = !!v)) {
	        this.mode = "spring";
	        return this._desiredScrollPosition = this.boundLocation(this._desiredScrollPosition);
	      }
	    },
	    desiredScrollPosition: function(l) {
	      return this._desiredScrollPosition = l;
	    }
	  });

	  ScrollAnimator.prototype.addToDesiredScrollPosition = function(delta) {
	    return this._desiredScrollPosition += delta;
	  };

	  ScrollAnimator.prototype.animateToLocation = function(desiredScrollPosition) {
	    this.mode = "spring";
	    return this._desiredScrollPosition = desiredScrollPosition;
	  };

	  ScrollAnimator.prototype.boundLocation = function(scrollPosition) {
	    return bound(this.getMinScrollPosition(), scrollPosition, this.getMaxScrollPosition());
	  };

	  ScrollAnimator.prototype.startTracking = function(desiredScrollPosition, referenceFrame) {
	    this._referenceFrame = referenceFrame;
	    this.mode = "tracking";
	    this._velocity = 0;
	    this.setDesiredScrollPosition(desiredScrollPosition);
	    return this._activeTouch = true;
	  };

	  ScrollAnimator.prototype.addVelocity = function(v) {
	    this._velocity = v;
	    return this.mode = "braking";
	  };

	  ScrollAnimator.prototype.velocityIsSlow = function() {
	    return absLte(this._velocity, 60);
	  };

	  frameCount = 0;

	  missCount = 0;

	  ScrollAnimator.prototype.frameUpdate = function(frameTime) {
	    var acceleration, boundedLocation, boundedTargetLocation, currentToTargetVector, distanceSquared, frictionAcceleration, frictionConstant, scrollPosition, springAcceleration, springConstant, targetScrollPosition, tookFrames;
	    tookFrames = Math.round(frameTime * 60);
	    frameCount++;
	    if (absLt(frameTime * 60 - 1, .25)) {

	    } else {
	      if (tookFrames > 1) {
	        missCount++;
	      }
	    }
	    scrollPosition = this.getScrollPosition();
	    targetScrollPosition = this._desiredScrollPosition;
	    this._velocity = maxMagnitude(this._velocity, this.maximumVelocity);
	    switch (this._mode) {
	      case "tracking":
	        boundedTargetLocation = this.boundLocation(targetScrollPosition);
	        targetScrollPosition = (targetScrollPosition + boundedTargetLocation) / 2;
	        this._velocity = 0;
	        this.setScrollPosition(targetScrollPosition);
	        break;
	      case "braking":
	        this._activeTouch = false;
	        frictionConstant = brakingFactor;
	        frictionAcceleration = this._velocity * -frictionConstant;
	        acceleration = frictionAcceleration;
	        this._velocity += acceleration * frameTime;
	        scrollPosition = scrollPosition + this._velocity * frameTime;
	        this.setScrollPosition(scrollPosition);
	        if (scrollPosition !== (boundedLocation = this.boundLocation(scrollPosition))) {
	          this.mode = "spring";
	          this._desiredScrollPosition = boundedLocation;
	        }
	        break;
	      case "spring":
	        currentToTargetVector = targetScrollPosition - scrollPosition;
	        distanceSquared = currentToTargetVector * currentToTargetVector;
	        springConstant = animatorSpringConstant;
	        frictionConstant = animatorSpringFriction;
	        springAcceleration = currentToTargetVector * springConstant;
	        frictionAcceleration = this._velocity * -frictionConstant;
	        acceleration = springAcceleration + frictionAcceleration;
	        this._velocity = this._velocity + acceleration * frameTime;
	        this.setScrollPosition(this.velocityIsSlow() && abs(scrollPosition - targetScrollPosition) <= 1 ? targetScrollPosition : scrollPosition + minMagnitude(this._velocity * frameTime, 1));
	    }
	    if (!this.getAnimationContinues()) {
	      console.log("frameUpdate " + this._mode + ": DONE (miss rate: " + missCount + " / " + frameCount + ")");
	    }
	    return this.getAnimationContinues();
	  };

	  return ScrollAnimator;

	})(BaseObject);

	AnimatorSupport = (function(superClass) {
	  extend(AnimatorSupport, superClass);

	  function AnimatorSupport() {
	    return AnimatorSupport.__super__.constructor.apply(this, arguments);
	  }

	  AnimatorSupport.getter({
	    animatorsActive: function() {
	      return !!this._activeAnimators;
	    }
	  });

	  AnimatorSupport.prototype.initAnimatorSupport = function() {
	    this._lastTime = 0;
	    this._activeAnimators = null;
	    return this._frameUpdateQueued = false;
	  };

	  AnimatorSupport.prototype.startAnimator = function(animator) {
	    if (this.getAnimatorsActive()) {
	      this._activeAnimators.push(animator);
	    } else {
	      this._activeAnimators = [animator];
	      this._lastTime = currentSecond();
	      this.getAnimatorsActive();
	    }
	    this._startAnimatorLoop();
	    return animator;
	  };


	  /*
	  OUT: newAnimator
	  SIDE-EFFECT:
	    if oldAnimator is in @_activeAnimators
	    then: replaced it with newAnimator
	    else: @startAnimator newAnimator
	  
	  POST ASSERTIONS
	    newAnimator is in @_activeAnimators
	    oldAnimator is NOT in @_activeAnimators
	   */

	  AnimatorSupport.prototype.replaceAnimator = function(newAnimator, oldAnimator) {
	    var index;
	    if (!(this._activeAnimators && oldAnimator)) {
	      return this.startAnimator(newAnimator);
	    }
	    index = this._activeAnimators.indexOf(oldAnimator);
	    if (!(index >= 0)) {
	      return this.startAnimator(newAnimator);
	    }
	    return this._activeAnimators[index] = newAnimator;
	  };

	  AnimatorSupport.prototype.stopAllAnimators = function() {
	    return this._activeAnimators = null;
	  };

	  AnimatorSupport.prototype._frameUpdate = function(frameTime) {
	    var animator, i, j, len, nextAnimators, now, ref;
	    if (!this._activeAnimators) {
	      return;
	    }
	    now = frameTime;
	    frameTime = now - this._lastTime;
	    nextAnimators = null;
	    ref = this._activeAnimators;
	    for (i = j = 0, len = ref.length; j < len; i = ++j) {
	      animator = ref[i];
	      if (animator.frameUpdate(frameTime)) {
	        if (nextAnimators != null) {
	          nextAnimators.push(animator);
	        }
	      } else {
	        this.queueEvent("animatorDone", {
	          animator: animator
	        });
	        nextAnimators || (nextAnimators = this._activeAnimators.slice(0, i));
	      }
	    }
	    if (nextAnimators) {
	      if (nextAnimators.length === 0) {
	        this._activeAnimators = null;
	        this.queueEvent("allAnimatorsDone");
	      } else {
	        this._activeAnimators = nextAnimators;
	      }
	    }
	    return this._lastTime = now;
	  };

	  AnimatorSupport.prototype._startAnimatorLoop = function() {
	    if (this._frameUpdateQueued) {
	      return;
	    }
	    return requestAnimationFrame((function(_this) {
	      return function(frameTimeMs) {
	        var queueNextFrameUpdate;
	        _this._lastTime = frameTimeMs / 1000;
	        queueNextFrameUpdate = function() {
	          if (!_this.getAnimatorsActive()) {
	            return;
	          }
	          _this._frameUpdateQueued = true;
	          return requestAnimationFrame(function(frameTimeMs) {
	            _this._frameUpdateQueued = false;
	            _this._frameUpdate(frameTimeMs / 1000);
	            return queueNextFrameUpdate();
	          });
	        };
	        return queueNextFrameUpdate();
	      };
	    })(this));
	  };

	  return AnimatorSupport;

	})(BaseModule);

	module.exports = createWithPostCreate(PagingScrollElement = (function(superClass) {
	  var defaultReferenceFrame;

	  extend(PagingScrollElement, superClass);

	  PagingScrollElement.include(AnimatorSupport);

	  function PagingScrollElement() {
	    this.initAnimatorSupport();
	    this._initGestureProps();
	    this._pages = null;
	    this._currentPage = null;
	    this._atEnd = false;
	    this._atStart = true;
	    this._scrollContents = this._pagesBeforeBaselineWrapper = this._pagesAfterBaselineWrapper = null;
	    this._setVerticalAxis();
	    PagingScrollElement.__super__.constructor.apply(this, arguments);
	    self.pagingScrollElement = this;
	    this._updateHiddenChildren();
	  }

	  PagingScrollElement.prototype.preprocessEventHandlers = function(handlerMap) {
	    return merge(this._externalHandlerMap = handlerMap, {
	      animatorDone: (function(_this) {
	        return function(arg) {
	          var animator, props;
	          props = arg.props;
	          animator = props.animator;
	          if (animator === _this._scrollAnimator) {
	            return _this._scrollAnimator = null;
	          }
	        };
	      })(this)
	    }, createGestureRecognizer({
	      custom: {
	        resume: this.gestureResume.bind(this),
	        recognize: this.gestureRecognize.bind(this),
	        begin: this.gestureBegin.bind(this),
	        move: this.gestureMove.bind(this),
	        end: this.gestureEnd.bind(this)
	      }
	    }));
	  };

	  PagingScrollElement.prototype._setVerticalAxis = function() {
	    this.newPoint = function(mainV, crossV) {
	      if (crossV == null) {
	        crossV = 0;
	      }
	      return point(crossV, mainV);
	    };
	    this.getPagePosition = function(page) {
	      return (page != null ? page.transformToAncestorSpaceY(0, this) : void 0) || 0;
	    };
	    return this.getMainCoordinate = function(pnt) {
	      return pnt.y;
	    };
	  };

	  PagingScrollElement.prototype._setHorizontalAxis = function() {
	    this.newPoint = function(mainV, crossV) {
	      if (crossV == null) {
	        crossV = 0;
	      }
	      return point(mainV, crossV);
	    };
	    this.getPagePosition = function(page) {
	      return (page != null ? page.transformToAncestorSpaceX(0, this) : void 0) || 0;
	    };
	    return this.getMainCoordinate = function(pnt) {
	      return pnt.x;
	    };
	  };

	  PagingScrollElement.prototype.getPageSize = function(page) {
	    if (!page) {
	      return 0;
	    } else {
	      return this.getMainCoordinate(page.getCurrentSize());
	    }
	  };

	  PagingScrollElement.prototype.getPageEdgeOffset = function(arg) {
	    var atEndEdge, page;
	    page = arg.page, atEndEdge = arg.atEndEdge;
	    if (atEndEdge) {
	      return this.getPageSize(page);
	    } else {
	      return 0;
	    }
	  };

	  PagingScrollElement.prototype.getPageCenter = function(page) {
	    return this.getPagePosition(page) + this.getPageSize(page) / 2;
	  };

	  defaultReferenceFrame = {
	    page: null,
	    atEndEdge: false
	  };

	  PagingScrollElement.concreteProperty({
	    referenceFrame: {
	      "default": defaultReferenceFrame,
	      postSetter: function(newReferenceFrame, previousReferenceFrame) {
	        var delta;
	        if (newReferenceFrame === previousReferenceFrame) {
	          console.warn("referenceFrame_postSetter - frame didnt' change");
	        }
	        this._addToScrollPosition(delta = this.getReferenceFrameDelta(newReferenceFrame, previousReferenceFrame));
	        this._updatePointerReferenceFrame(newReferenceFrame);
	        this._queueUpdateEvent(newReferenceFrame, previousReferenceFrame);
	        return this._updatePagesSplit();
	      }
	    },
	    pages: {
	      "default": [],
	      validate: function(pages) {
	        return isPlainArray(pages);
	      },
	      postSetter: function(pages, oldPages) {
	        var atEndEdge, page, ref, referenceFrame;
	        ref = referenceFrame = this.getPendingReferenceFrame(), page = ref.page, atEndEdge = ref.atEndEdge;
	        if (this._atEnd) {
	          atEndEdge = true;
	          page = last(pages);
	        }
	        if (this._atStart || !page) {
	          atEndEdge = false;
	          page = first(pages);
	        }
	        if (referenceFrame.page && 0 > pages.indexOf(referenceFrame.page)) {
	          console.warn("PagingScrollElement#pages setter: New page list does not contain the current referenceFrame. ALWAYS include the current referenceFrame when setting pages. Screen will jump!\n\npage keys: " + (inspect((function() {
	            var j, len, results;
	            results = [];
	            for (j = 0, len = pages.length; j < len; j++) {
	              page = pages[j];
	              results.push(page.key);
	            }
	            return results;
	          })())));
	        }
	        if (referenceFrame.page !== page || referenceFrame.atEndEdge !== atEndEdge) {
	          this.setReferenceFrame({
	            page: page,
	            atEndEdge: atEndEdge
	          });
	        } else {
	          this._updatePagesSplit();
	        }
	        if (oldPages.length > 0) {
	          return this.onNextReady((function(_this) {
	            return function() {
	              return _this._updateAtStartAndAtEnd();
	            };
	          })(this));
	        }
	      }
	    },
	    scrollPosition: {
	      "default": 0,
	      postSetter: function(position) {
	        this.onNextReady((function(_this) {
	          return function() {
	            return _this._updateAtStartAndAtEnd();
	          };
	        })(this));
	        return this._scrollContents.setLocation(this.newPoint(position));
	      }
	    }
	  });

	  PagingScrollElement.prototype._updatePagesSplit = function(pages, referenceFrame) {
	    var atEndEdge, page, splitIndex;
	    if (pages == null) {
	      pages = this.getPendingPages();
	    }
	    if (referenceFrame == null) {
	      referenceFrame = this.getPendingReferenceFrame();
	    }
	    page = referenceFrame.page, atEndEdge = referenceFrame.atEndEdge;
	    splitIndex = pages.indexOf(page);
	    if (splitIndex < 0) {
	      if (page) {
	        console.warn("PagingScrollElement#_updatePagesSplit: could not find the old referenceFrame.page(key: " + (page.key || page.inspectedName) + ") in the new children. New current page picked; display WILL jump.");
	      }
	      splitIndex = 0;
	    }
	    if (atEndEdge) {
	      splitIndex++;
	    }
	    this._pagesBeforeBaselineWrapper.setChildren(pages.slice(0, splitIndex));
	    return this._pagesAfterBaselineWrapper.setChildren(pages.slice(splitIndex));
	  };

	  PagingScrollElement.layoutProperty({
	    scroll: {
	      "default": "vertical",
	      validate: function(v) {
	        return v === "vertical" || v === "horizontal";
	      },
	      postSetter: function(newV, oldValue) {
	        if (newV === "vertical") {
	          this._setVerticalAxis();
	        } else {
	          this._setHorizontalAxis();
	        }
	        return this._updateHiddenChildren(newV);
	      }
	    }
	  });

	  PagingScrollElement.prototype.getReferenceFrameDelta = function(toReferenceFrame, fromReferenceFrame) {
	    var edgeDelta, positionDelta;
	    if (toReferenceFrame == null) {
	      toReferenceFrame = defaultReferenceFrame;
	    }
	    if (fromReferenceFrame == null) {
	      fromReferenceFrame = defaultReferenceFrame;
	    }
	    if (toReferenceFrame === fromReferenceFrame) {
	      return 0;
	    }
	    positionDelta = toReferenceFrame.page === fromReferenceFrame.page ? 0 : this.getPagePosition(toReferenceFrame.page) - this.getPagePosition(fromReferenceFrame.page);
	    edgeDelta = this.getPageEdgeOffset(toReferenceFrame) - this.getPageEdgeOffset(fromReferenceFrame);
	    return positionDelta + edgeDelta;
	  };

	  PagingScrollElement.prototype.getScrollPositionInReferenceFrame = function(targetReferenceFrame) {
	    return this.getScrollPosition() + this.getReferenceFrameDelta(targetReferenceFrame, this.getReferenceFrame());
	  };

	  PagingScrollElement.prototype.setScrollPositionInReferenceFrame = function(scrollPosition, referenceFrame) {
	    var pendingReferenceFrame;
	    this.onNextReady((function(_this) {
	      return function() {
	        return _this._updateReferenceFrame();
	      };
	    })(this));
	    pendingReferenceFrame = this.getPendingReferenceFrame();
	    scrollPosition += this.getReferenceFrameDelta(pendingReferenceFrame, referenceFrame);
	    return this.setScrollPosition(scrollPosition);
	  };

	  PagingScrollElement.prototype.getMinScrollPosition = function() {
	    return this.getMinScrollPositionInReferenceFrame(this.getReferenceFrame());
	  };

	  PagingScrollElement.prototype.getMaxScrollPosition = function() {
	    return this.getMaxScrollPositionInReferenceFrame(this.getReferenceFrame());
	  };

	  PagingScrollElement.prototype.getMinScrollPositionInReferenceFrame = function(referenceFrame) {
	    var afterSize, beforeSize, windowSize;
	    windowSize = this.getWindowSize();
	    beforeSize = this.getPagesBeforeBaselineSize();
	    afterSize = this.getPagesAfterBaselineSize();
	    if (beforeSize + afterSize <= windowSize) {
	      return 0;
	    }
	    return windowSize - afterSize + this.getReferenceFrameDelta(referenceFrame, this.getReferenceFrame());
	  };

	  PagingScrollElement.prototype.getMaxScrollPositionInReferenceFrame = function(referenceFrame) {
	    var afterSize, beforeSize, delta, windowSize;
	    windowSize = this.getWindowSize();
	    beforeSize = this.getPagesBeforeBaselineSize();
	    afterSize = this.getPagesAfterBaselineSize();
	    delta = this.getReferenceFrameDelta(referenceFrame, this.getReferenceFrame());
	    if (beforeSize + afterSize <= windowSize) {
	      return 0;
	    }
	    return beforeSize + delta;
	  };

	  PagingScrollElement.prototype.jumpToStart = function() {
	    return this.setScrollPositionInReferenceFrame(0, {
	      page: first(this.getPendingPages()),
	      atEndEdge: false
	    });
	  };

	  PagingScrollElement.prototype.jumpToEnd = function() {
	    if (this.getPagesFitInWindow()) {
	      return this.jumpToStart();
	    } else {
	      return this.setScrollPositionInReferenceFrame(this.getWindowSize(), {
	        page: last(this.getPendingPages()),
	        atEndEdge: true
	      });
	    }
	  };

	  PagingScrollElement.getter({
	    atEnd: function() {
	      return this._atEnd;
	    },
	    atStart: function() {
	      return this._atStart;
	    },
	    inMiddle: function() {
	      return !this._atEnd && !this._atStart;
	    },
	    pagesFitInWindow: function() {
	      return this.getWindowSize() >= this.getTotalPageSize();
	    },
	    windowSize: function() {
	      return this.getMainCoordinate(this.getCurrentSize());
	    },
	    currentPagePosition: function() {
	      return this.getMainCoordinate(this._scrollContents.getCurrentLocation());
	    },
	    pagesBeforeBaselineSize: function() {
	      return this.getMainCoordinate(this._pagesBeforeBaselineWrapper.getCurrentSize());
	    },
	    pagesAfterBaselineSize: function() {
	      return this.getMainCoordinate(this._pagesAfterBaselineWrapper.getCurrentSize());
	    },
	    pagesBeforeBaseline: function() {
	      return this._pagesBeforeBaselineWrapper.getChildren();
	    },
	    pagesAfterBaseline: function() {
	      return this._pagesAfterBaselineWrapper.getChildren();
	    },
	    totalPageSize: function() {
	      return this.getPagesBeforeBaselineSize() + this.getPagesAfterBaselineSize();
	    },
	    pagesOnScreenBeforeBaseline: function() {
	      var averagePageSize, count, j, page, pages, pixelsLeft, pixelsOnScreen, ref, totalSize;
	      pixelsOnScreen = this.getScrollPosition();
	      totalSize = 0;
	      count = 0;
	      ref = pages = this._pagesBeforeBaselineWrapper.getChildren();
	      for (j = ref.length - 1; j >= 0; j += -1) {
	        page = ref[j];
	        count++;
	        totalSize += this.getMainCoordinate(page.getCurrentSize());
	        if (totalSize >= pixelsOnScreen) {
	          break;
	        }
	      }
	      if (totalSize < pixelsOnScreen && pages.length > 0 && totalSize > 0) {
	        averagePageSize = totalSize / pages.length;
	        pixelsLeft = pixelsOnScreen - totalSize;
	        count += ceil(pixelsLeft / averagePageSize);
	      }
	      return count;
	    },
	    pagesOnScreenAfterBaseline: function() {
	      var averagePageSize, count, j, len, page, pages, pixelsLeft, pixelsOnScreen, ref, totalSize;
	      pixelsOnScreen = this.getWindowSize() - this.getScrollPosition();
	      totalSize = 0;
	      count = 0;
	      ref = pages = this._pagesAfterBaselineWrapper.getChildren();
	      for (j = 0, len = ref.length; j < len; j++) {
	        page = ref[j];
	        count++;
	        totalSize += this.getMainCoordinate(page.getCurrentSize());
	        if (totalSize >= pixelsOnScreen) {
	          break;
	        }
	      }
	      if (totalSize < pixelsOnScreen && pages.length > 0 && totalSize > 0) {
	        averagePageSize = totalSize / pages.length;
	        pixelsLeft = pixelsOnScreen - totalSize;
	        count += ceil(pixelsLeft / averagePageSize);
	      }
	      return count;
	    },
	    currentGeometry: function() {
	      var currentPos, numPages, pixelsAfter, pixelsBefore, suggestedPageSpread, totalPageSize, windowSize;
	      windowSize = this.getWindowSize();
	      currentPos = this.getCurrentPagePosition();
	      pixelsBefore = this.getPagesBeforeBaselineSize();
	      pixelsAfter = this.getPagesAfterBaselineSize();
	      numPages = this._pages.length;
	      totalPageSize = pixelsBefore + pixelsAfter;
	      suggestedPageSpread = this.getPagesOnScreenBeforeBaseline() + this.getPagesOnScreenAfterBaseline();
	      return {
	        currentPagePosition: currentPos,
	        windowSize: windowSize,
	        numPages: numPages,
	        numPagesBeforeBaseline: this._pagesBeforeBaselineWrapper.getChildren().length,
	        numPagesAfterBaseline: this._pagesAfterBaselineWrapper.getChildren().length,
	        totalPageSize: totalPageSize,
	        focusedPageBeforeBaseline: this.getReferenceFrame().atEndEdge,
	        suggestedPageSpread: suggestedPageSpread,
	        pixelsOffscreenBeforeWindow: pixelsBefore - currentPos,
	        pixelsOffscreenAfterWindow: pixelsAfter - windowSize + currentPos,
	        pagesBeforeBaselineSize: pixelsBefore,
	        pagesAfterBaselineSize: pixelsAfter
	      };
	    }
	  });

	  PagingScrollElement.prototype._initGestureProps = function() {
	    this._flicked = false;
	    this._pointerStartPosition = 0;
	    this._pointerReferenceFrame = null;
	    this._lastPointerEventTime = null;
	    this._flickSpeed = 0;
	    this._gestureActive = false;
	    return this._scrollAnimator = null;
	  };

	  PagingScrollElement.getter({
	    activeScrollAnimator: function() {
	      return this._scrollAnimator;
	    },
	    scrollAnimator: function() {
	      var maximumVelocity;
	      maximumVelocity = this.getWindowSize() * 60 / 2;
	      return this._scrollAnimator || (this._scrollAnimator = this.startAnimator(new ScrollAnimator(this, maximumVelocity)));
	    },
	    debugState: function() {
	      var child, ref, referenceFrame;
	      referenceFrame = this.referenceFrame;
	      return {
	        referenceFrame: {
	          page: (ref = referenceFrame.page) != null ? ref.inspectedName : void 0,
	          atEndEdge: referenceFrame.atEndEdge
	        },
	        pagesBefore: (function() {
	          var j, len, ref1, results;
	          ref1 = this._pagesBeforeBaselineWrapper.children;
	          results = [];
	          for (j = 0, len = ref1.length; j < len; j++) {
	            child = ref1[j];
	            results.push(child.inspectedName + " " + ((this.getMainCoordinate(child.currentSize)) | 0));
	          }
	          return results;
	        }).call(this),
	        pagesAfter: (function() {
	          var j, len, ref1, results;
	          ref1 = this._pagesAfterBaselineWrapper.children;
	          results = [];
	          for (j = 0, len = ref1.length; j < len; j++) {
	            child = ref1[j];
	            results.push(child.inspectedName + " " + ((this.getMainCoordinate(child.currentSize)) | 0));
	          }
	          return results;
	        }).call(this),
	        geometry: this.currentGeometry
	      };
	    }
	  });

	  PagingScrollElement.prototype.gestureRecognize = function(arg) {
	    var delta;
	    delta = arg.delta;
	    if (this._scroll === "vertical") {
	      return 1 > delta.absoluteAspectRatio;
	    } else {
	      return 1 < delta.absoluteAspectRatio;
	    }
	  };

	  PagingScrollElement.prototype.gestureBegin = function(e) {
	    var location, timeStamp;
	    location = e.location, timeStamp = e.timeStamp;
	    this._flickSpeed = 0;
	    this._gestureActive = true;
	    location = this.getMainCoordinate(location);
	    this._pointerReferenceFrame = this._referenceFrame;
	    this._pointerStartPosition = location - this._scrollPosition;
	    this._lastPointerEventTime = timeStamp;
	    if (this.getActiveScrollAnimator()) {
	      this._flicked = false;
	      return timeout(60, (function(_this) {
	        return function() {
	          var referenceFrame, scrollPosition;
	          if (!_this._flicked && _this._gestureActive) {
	            _this._pointerReferenceFrame = _this._referenceFrame;
	            scrollPosition = _this.getPendingScrollPosition();
	            referenceFrame = _this.getPendingReferenceFrame();
	            _this._pointerStartPosition = location - scrollPosition;
	            return _this.getScrollAnimator().startTracking(scrollPosition, referenceFrame);
	          }
	        };
	      })(this));
	    } else {
	      return this.getScrollAnimator().startTracking(this._scrollPosition, this._referenceFrame);
	    }
	  };

	  PagingScrollElement.prototype.gestureResume = function(e) {
	    return !!this.getActiveScrollAnimator();
	  };

	  PagingScrollElement.prototype.gestureMove = function(e) {
	    var delta, deltaV, location, scrollAnimator, timeStamp;
	    timeStamp = e.timeStamp, delta = e.delta, location = e.location;
	    location = this.getMainCoordinate(location);
	    delta = this.getMainCoordinate(deltaV = delta);
	    scrollAnimator = this.getScrollAnimator();
	    if (timeStamp > this._lastPointerEventTime) {
	      this._flickSpeed = deltaV.getMagnitude() / (timeStamp - this._lastPointerEventTime);
	      this._flickDirection = (delta / abs(delta)) || 1;
	      this._lastPointerEventTime = timeStamp;
	    }
	    return scrollAnimator.setDesiredScrollPosition(location - this._pointerStartPosition);
	  };

	  PagingScrollElement.prototype.gestureEnd = function(e) {
	    var scrollAnimator;
	    this._gestureActive = false;
	    if (absGt(this._flickSpeed, minimumFlickVelocity)) {
	      scrollAnimator = this.getScrollAnimator();
	      scrollAnimator.addVelocity(this._flickSpeed * this._flickDirection * flickSpeedMultiplier);
	      return this._flicked = true;
	    } else {
	      if (scrollAnimator = this.getActiveScrollAnimator()) {
	        scrollAnimator.setReferenceFrame(this.getReferenceFrame());
	        scrollAnimator.setDesiredScrollPosition(this.getScrollPosition());
	        return scrollAnimator.setActiveTouch(false);
	      }
	    }
	  };


	  /*
	  When children are set "from outside", we split them based on the @_currentPage and set then as
	  grandchildren - children of the direct, but hidden children:
	    _pagesBeforeBaselineWrapper or
	    _pagesAfterBaselineWrapper
	  
	  Why? This allows us to leverage existing row and column layouts to do most of
	  the heavy lifting for actual element layout.
	   */

	  PagingScrollElement.prototype.setChildren = function(newPages, oldChildren) {
	    var newChildren;
	    if (oldChildren == null) {
	      oldChildren = this.getPendingChildren();
	    }
	    newChildren = !((oldChildren != null ? oldChildren.length : void 0) > 0) ? (this._updateHiddenChildren(), [this._scrollContents]) : oldChildren;
	    this.setPages(newPages);
	    return PagingScrollElement.__super__.setChildren.call(this, newChildren);
	  };

	  PagingScrollElement.prototype._updatePointerReferenceFrame = function(newReferenceFrame) {
	    var delta, ref, ref1;
	    if (!this._pointerReferenceFrame) {
	      return;
	    }
	    delta = this.getReferenceFrameDelta(newReferenceFrame, this._pointerReferenceFrame);
	    this._pointerStartPosition -= delta;
	    if ((ref = this.getActiveScrollAnimator()) != null) {
	      ref.addToDesiredScrollPosition(delta);
	    }
	    return (ref1 = this.getActiveScrollAnimator()) != null ? ref1.setReferenceFrame(this._pointerReferenceFrame = newReferenceFrame) : void 0;
	  };

	  PagingScrollElement.prototype._getPageUnderPosition = function(testPosition) {
	    var child, j, len, ref, relativeTestPosition, size, wrapper;
	    relativeTestPosition = testPosition - this.getScrollPosition();
	    wrapper = relativeTestPosition < 0 ? (relativeTestPosition += this.getMainCoordinate(this._pagesBeforeBaselineWrapper.getCurrentSize()), this._pagesBeforeBaselineWrapper) : this._pagesAfterBaselineWrapper;
	    ref = wrapper.getChildren();
	    for (j = 0, len = ref.length; j < len; j++) {
	      child = ref[j];
	      size = this.getMainCoordinate(child.getCurrentSize());
	      if (relativeTestPosition < size) {
	        return child;
	      }
	      relativeTestPosition -= size;
	    }
	    console.warn("PagingScrollElement#_getPageUnderPosition: could not find page under position");
	    return null;
	  };

	  PagingScrollElement.prototype._updateAtStartAndAtEnd = function() {
	    var newAtEnd, newAtStart, pages, scrollPosition;
	    scrollPosition = this.getScrollPosition();
	    if (this.getTotalPageSize() <= this.getWindowSize()) {
	      newAtStart = true;
	      newAtEnd = false;
	    } else {
	      newAtEnd = scrollPosition <= this.getMinScrollPosition();
	      newAtStart = scrollPosition >= this.getMaxScrollPosition();
	    }
	    pages = this.getPages();
	    if (newAtStart && newAtStart !== this._atStart) {
	      this.setReferenceFrame({
	        page: first(pages)
	      });
	    } else if (newAtEnd && newAtEnd !== this._atEnd) {
	      this.setReferenceFrame({
	        atEndEdge: true,
	        page: last(pages)
	      });
	    }
	    this._atEnd = newAtEnd;
	    this._atStart = newAtStart;
	    return newAtEnd || newAtStart;
	  };

	  PagingScrollElement.prototype._addToScrollPosition = function(delta) {
	    return this.setScrollPosition(this.getPendingScrollPosition() + delta);
	  };


	  /*
	  update currentPage to be the page that overlaps the center-line of the view-window
	  
	  need to:
	    update scrollPosition
	    need to @_setChildren
	   */

	  PagingScrollElement.prototype._updateReferenceFrame = function() {
	    var atEndEdge, centerPosition, newCurrentPage, pageCenterPosition, referenceFrame, scrollPosition;
	    if (this._updateAtStartAndAtEnd()) {
	      return;
	    }
	    scrollPosition = this.getScrollPosition();
	    centerPosition = this.getWindowSize() / 2;
	    newCurrentPage = this._getPageUnderPosition(centerPosition);
	    if (!newCurrentPage) {
	      console.warn("_updateReferenceFrame: no newCurrentPage");
	    }
	    pageCenterPosition = this.getPageCenter(newCurrentPage);
	    atEndEdge = centerPosition > pageCenterPosition;
	    referenceFrame = this.getReferenceFrame();
	    if (referenceFrame.page !== newCurrentPage || referenceFrame.atEndEdge !== atEndEdge) {
	      return this.setReferenceFrame({
	        page: newCurrentPage,
	        atEndEdge: atEndEdge
	      });
	    }
	  };

	  PagingScrollElement.prototype._queueUpdateEvent = function(newReferenceFrame, previousReferenceFrame) {
	    return this.onNextReady((function(_this) {
	      return function() {
	        var referenceFrame;
	        referenceFrame = _this.getReferenceFrame();
	        return _this.queueEvent("scrollUpdate", {
	          previousReferenceFrame: previousReferenceFrame,
	          referenceFrame: referenceFrame,
	          focusedPage: referenceFrame.page,
	          currentGeometry: _this.getCurrentGeometry(),
	          pagesBeforeBaseline: _this.getPagesBeforeBaseline(),
	          pagesAfterBaseline: _this.getPagesAfterBaseline()
	        });
	      };
	    })(this));
	  };

	  PagingScrollElement.prototype._sizeChanged = function(newSize, oldSize) {
	    this._queueUpdateEvent();
	    return PagingScrollElement.__super__._sizeChanged.apply(this, arguments);
	  };

	  PagingScrollElement.prototype._updateHiddenChildren = function(scrollMode) {
	    var commonSizeLayout;
	    if (scrollMode == null) {
	      scrollMode = this.getPendingScroll();
	    }
	    this._scrollContents || (this._scrollContents = new Element({
	      key: "scrollContents",
	      receivePointerEvents: "passToChildren"
	    }, this._pagesBeforeBaselineWrapper = new Element({
	      key: "pagesBeforeBaseline"
	    }), this._pagesAfterBaselineWrapper = new Element({
	      key: "pagesAfterBaseline"
	    })));
	    if (scrollMode === "horizontal") {
	      commonSizeLayout = {
	        hh: 1,
	        wcw: 1
	      };
	      this._pagesBeforeBaselineWrapper.setAxis("topRight");
	      this._pagesBeforeBaselineWrapper.setChildrenLayout("row");
	      this._pagesAfterBaselineWrapper.setChildrenLayout("row");
	    } else {
	      commonSizeLayout = {
	        ww: 1,
	        hch: 1
	      };
	      this._pagesBeforeBaselineWrapper.setAxis("bottomLeft");
	      this._pagesBeforeBaselineWrapper.setChildrenLayout("column");
	      this._pagesAfterBaselineWrapper.setChildrenLayout("column");
	    }
	    this._scrollContents.setSize(commonSizeLayout);
	    this._pagesBeforeBaselineWrapper.setSize(commonSizeLayout);
	    return this._pagesAfterBaselineWrapper.setSize(commonSizeLayout);
	  };

	  return PagingScrollElement;

	})(Element));


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var ShapeChildren;

	module.exports = ShapeChildren = __webpack_require__(200);

	ShapeChildren.FillElement = __webpack_require__(201);

	ShapeChildren.OutlineElement = __webpack_require__(202);

	ShapeChildren.finishLoad(["FillElement", "OutlineElement"]);


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var Elements,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Elements = __webpack_require__(88);

	module.exports = Elements.ShapeChildren || (Elements.ShapeChildren = (function(superClass) {
	  extend(ShapeChildren, superClass);

	  function ShapeChildren() {
	    return ShapeChildren.__super__.constructor.apply(this, arguments);
	  }

	  ShapeChildren.namespace = Elements;

	  ShapeChildren.namespacePath = "Neptune.Art.Engine.Elements.ShapeChildren";

	  return ShapeChildren;

	})(Neptune.Base));

	Elements.addNamespace(Elements.ShapeChildren);


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Canvas, Color, FillElement, FillableBase, Foundation, GradientFillStyle, Matrix, Point, Rectangle, color, createWithPostCreate, log, matrix, point, point0, point1, rect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Canvas = __webpack_require__(129);

	FillableBase = __webpack_require__(179);

	log = Foundation.log, createWithPostCreate = Foundation.createWithPostCreate;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix, point0 = Atomic.point0, point1 = Atomic.point1;

	GradientFillStyle = Canvas.GradientFillStyle;

	module.exports = createWithPostCreate(FillElement = (function(superClass) {
	  var _drawOptionsTemp;

	  extend(FillElement, superClass);

	  function FillElement() {
	    return FillElement.__super__.constructor.apply(this, arguments);
	  }

	  FillElement.prototype.getBaseDrawArea = function() {
	    return this.getParent().getBaseDrawArea();
	  };

	  FillElement.prototype.getPendingBaseDrawArea = function() {
	    return this.getPendingParent().getPendingBaseDrawArea();
	  };


	  /*
	  NOTE:
	  
	  _prepareDrawOptions replaces values, even with null ones.
	  Hence, we prepare two separate draw optons and the merge them.
	   */

	  _drawOptionsTemp = {};

	  FillElement.prototype.drawBasic = function(target, elementToTargetMatrix, compositeMode, opacity) {
	    var base, k, v;
	    if (typeof (base = this._parent)._prepareDrawOptions === "function") {
	      base._prepareDrawOptions(this._drawOptions, compositeMode, opacity);
	    }
	    this._prepareDrawOptions(_drawOptionsTemp, compositeMode, opacity);
	    for (k in _drawOptionsTemp) {
	      v = _drawOptionsTemp[k];
	      if (v) {
	        this._drawOptions[k] = v;
	      }
	    }
	    return this._parent.fillShape(target, elementToTargetMatrix, this._drawOptions);
	  };

	  return FillElement;

	})(FillableBase));


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Color, FillableBase, Foundation, Matrix, OutlineElement, Point, Rectangle, color, createWithPostCreate, log, matrix, merge, point, rect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	FillableBase = __webpack_require__(179);

	merge = Foundation.merge, createWithPostCreate = Foundation.createWithPostCreate, log = Foundation.log;

	color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, rect = Atomic.rect, Rectangle = Atomic.Rectangle, matrix = Atomic.matrix, Matrix = Atomic.Matrix;

	module.exports = createWithPostCreate(OutlineElement = (function(superClass) {
	  var validLineCaps, validLineJoins;

	  extend(OutlineElement, superClass);

	  function OutlineElement() {
	    return OutlineElement.__super__.constructor.apply(this, arguments);
	  }

	  validLineCaps = ["butt", "round", "square"];

	  validLineJoins = ["round", "bevel", "miter"];

	  OutlineElement.drawProperty({
	    lineWidth: {
	      "default": 1,
	      validate: function(v) {
	        return typeof v === "number";
	      }
	    },
	    lineCap: {
	      "default": "butt",
	      validate: function(v) {
	        return indexOf.call(validLineCaps, v) >= 0;
	      }
	    },
	    lineJoin: {
	      "default": "miter",
	      validate: function(v) {
	        return indexOf.call(validLineJoins, v) >= 0;
	      }
	    },
	    filled: {
	      "default": false
	    },
	    miterLimit: {
	      "default": 10,
	      validate: function(v) {
	        return !v || typeof v === "number";
	      },
	      preprocess: function(v) {
	        if (v != null) {
	          return v;
	        } else {
	          return 10;
	        }
	      }
	    }
	  });

	  OutlineElement.virtualProperty({
	    drawAreaPadding: function(pending) {
	      var _lineJoin, _lineWidth, _miterLimit, ref;
	      ref = this.getState(pending), _lineWidth = ref._lineWidth, _lineJoin = ref._lineJoin, _miterLimit = ref._miterLimit;
	      return _lineWidth * (_lineJoin === "miter" ? _miterLimit / 2 : .5);
	    },
	    baseDrawArea: function(pending) {
	      return this.getState(pending)._parent.getBaseDrawArea(pending).grow(this.getDrawAreaPadding(pending));
	    }
	  });

	  OutlineElement.getter({
	    cacheable: function() {
	      return this.getHasChildren();
	    }
	  });

	  OutlineElement.prototype.fillShape = function(target, elementToTargetMatrix, options) {
	    if (this._filled) {
	      this._parent.fillShape(target, elementToTargetMatrix, options);
	    }
	    return this._parent.strokeShape(target, elementToTargetMatrix, options);
	  };

	  OutlineElement.prototype._prepareDrawOptions = function(drawOptions, compositeMode, opacity) {
	    OutlineElement.__super__._prepareDrawOptions.apply(this, arguments);
	    drawOptions.strokeStyle = this._drawOptions.fillStyle;
	    drawOptions.color = this._color;
	    drawOptions.lineWidth = this._lineWidth;
	    drawOptions.lineCap = this._lineCap;
	    drawOptions.lineJoin = this._lineJoin;
	    return drawOptions.miterLimit = this._miterLimit;
	  };

	  return OutlineElement;

	})(FillableBase));


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	var Animation;

	module.exports = Animation = __webpack_require__(204);

	Animation.Animator = __webpack_require__(149);

	Animation.EasingFunctions = __webpack_require__(150);

	Animation.EasingPersistantAnimator = __webpack_require__(173);

	Animation.PersistantAnimator = __webpack_require__(172);

	Animation.finishLoad(["Animator", "EasingFunctions", "EasingPersistantAnimator", "PersistantAnimator"]);


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Animation || (Engine.Animation = (function(superClass) {
	  extend(Animation, superClass);

	  function Animation() {
	    return Animation.__super__.constructor.apply(this, arguments);
	  }

	  Animation.namespace = Engine;

	  Animation.namespacePath = "Neptune.Art.Engine.Animation";

	  return Animation;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Animation);


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	var Forms;

	module.exports = Forms = __webpack_require__(206);

	Forms.SynchronizedDomOverlay = __webpack_require__(207);

	Forms.TextInput = __webpack_require__(208);

	Forms.finishLoad(["SynchronizedDomOverlay", "TextInput"]);


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.Forms || (Engine.Forms = (function(superClass) {
	  extend(Forms, superClass);

	  function Forms() {
	    return Forms.__super__.constructor.apply(this, arguments);
	  }

	  Forms.namespace = Engine;

	  Forms.namespacePath = "Neptune.Art.Engine.Forms";

	  return Forms;

	})(Neptune.Base));

	Engine.addNamespace(Engine.Forms);


/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Element, Foundation, SynchronizedDomOverlay, float32Eq, inspect, log, merge, point, point1, rect,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Element = __webpack_require__(148);

	log = Foundation.log, merge = Foundation.merge, inspect = Foundation.inspect, float32Eq = Foundation.float32Eq;

	rect = Atomic.rect, point1 = Atomic.point1, point = Atomic.point;

	module.exports = SynchronizedDomOverlay = (function(superClass) {
	  extend(SynchronizedDomOverlay, superClass);

	  function SynchronizedDomOverlay(options) {
	    if (options == null) {
	      options = {};
	    }
	    this._attachedToCanvasElement = null;
	    this._updateQueued = false;
	    this.setDomElement(options.domElement);
	    SynchronizedDomOverlay.__super__.constructor.apply(this, arguments);
	  }

	  SynchronizedDomOverlay.getter({
	    domElement: function() {
	      return this._domElement;
	    }
	  });

	  SynchronizedDomOverlay.setter({
	    domElement: function(domElement) {
	      this._detachDomElement();
	      this._domElement = domElement;
	      this._domElement.style.position = "absolute";
	      this._domElement.style.top = "0";
	      return this.onNextReady((function(_this) {
	        return function() {
	          return _this._attachDomElement();
	        };
	      })(this));
	    }
	  });

	  SynchronizedDomOverlay.prototype.preprocessEventHandlers = function(handlerMap) {
	    return SynchronizedDomOverlay.__super__.preprocessEventHandlers.call(this, merge(handlerMap, {
	      rootElementChanged: (function(_this) {
	        return function(e) {
	          return _this._rootElementChanged(e);
	        };
	      })(this)
	    }));
	  };

	  SynchronizedDomOverlay.prototype._rootElementChanged = function(e) {
	    return this.onNextReady((function(_this) {
	      return function() {
	        return _this._attachDomElement();
	      };
	    })(this));
	  };

	  SynchronizedDomOverlay.prototype._queueUpdate = function() {
	    if (this._updateQueued || !this._attachedToCanvasElement) {
	      return;
	    }
	    this._updateQueued = true;
	    return this.onNextReady((function(_this) {
	      return function() {
	        _this._updateQueued = false;
	        _this._updateDomLayout();
	        return _this._queueUpdate();
	      };
	    })(this), false);
	  };

	  SynchronizedDomOverlay.prototype._updateDomLayout = function() {
	    var m, newCanvasElement, opacity, r, size, sx, sy, x, y, zIndex;
	    if (this._attachedToCanvasElement !== (newCanvasElement = this.getCanvasElement())) {
	      this._attachDomElement(newCanvasElement);
	    }
	    if (!this._attachedToCanvasElement) {
	      return;
	    }
	    m = this.getElementToDocumentMatrix();
	    x = m.getLocationX();
	    y = m.getLocationY();
	    size = this.getPaddedSize();
	    sx = m.getScaleX();
	    sy = m.getScaleY();
	    r = rect(x, y, size.x, size.y).round();
	    opacity = this.getAbsOpacity();
	    zIndex = Foundation.Browser.Dom.zIndex(canvasElement._canvas) + 1;
	    this._domElement.style.zIndex = zIndex;
	    this._domElement.style.opacity = opacity;
	    this._domElement.style.left = r.x + "px";
	    this._domElement.style.top = r.y + "px";
	    this._domElement.style.width = r.w + "px";
	    this._domElement.style.height = r.h + "px";
	    return this._domElement.style.transform = !float32Eq(sx, 1) || !float32Eq(sy, 1) ? (this._domElement.style["transform-origin"] = "left top", "scale(" + sx + ", " + sy + ")") : "none";
	  };

	  SynchronizedDomOverlay.prototype._detachDomElement = function() {
	    var ref;
	    if (!this._attachedToCanvasElement) {
	      return;
	    }
	    if ((ref = this._domElement) != null) {
	      ref.parentNode.removeChild(this._domElement);
	    }
	    return this._attachedToCanvasElement = null;
	  };

	  SynchronizedDomOverlay.prototype._attachDomElement = function() {
	    var canvasElement;
	    canvasElement = this.getCanvasElement();
	    if (this._attachedToCanvasElement) {
	      if (canvasElement === this._attachedToCanvasElement) {
	        return;
	      }
	      this._detachDomElement();
	    }
	    if (canvasElement) {
	      this._attachedToCanvasElement = canvasElement;
	      document.body.appendChild(this._domElement);
	      return this._queueUpdate();
	    }
	  };

	  return SynchronizedDomOverlay;

	})(Element);


/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, Foundation, SynchronizedDomOverlay, TextInput, color, createElementFromHtml, createWithPostCreate, inspect, log, merge, select,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	SynchronizedDomOverlay = __webpack_require__(207);

	color = Atomic.color;

	createElementFromHtml = Foundation.Browser.Dom.createElementFromHtml;

	log = Foundation.log, merge = Foundation.merge, select = Foundation.select, inspect = Foundation.inspect, createWithPostCreate = Foundation.createWithPostCreate;

	module.exports = createWithPostCreate(TextInput = (function(superClass) {
	  extend(TextInput, superClass);

	  function TextInput(options) {
	    var el, k, props, propsString, ref, style, tagType, v;
	    if (options == null) {
	      options = {};
	    }
	    props = select(options, "placeholder", "type", "autocapitalize", "autocomplete", "autocorrect");
	    tagType = props.type === "textarea" ? (delete props.type, "textarea") : (props.type || (props.type = 'text'), "input");
	    propsString = ((function() {
	      var results;
	      results = [];
	      for (k in props) {
	        v = props[k];
	        results.push(k + "=" + (inspect(v)));
	      }
	      return results;
	    })()).join(" ");
	    options.domElement = el = createElementFromHtml("<" + tagType + " " + propsString + "'></input>");
	    el.value = options.value || "";
	    style = merge(options.style, {
	      padding: (options.padding || 5) + "px",
	      border: '0px',
	      color: color(options.color || "black").toString(),
	      padding: "0",
	      margin: "0",
	      "vertical-align": "bottom",
	      'text-align': options.align || "left",
	      'font-size': (options.fontSize || 16) + "px",
	      'background-color': 'transparent',
	      'font-family': options.fontFamily || "Arial"
	    });
	    for (k in style) {
	      v = style[k];
	      el.style[k] = v;
	    }
	    if (options.attrs) {
	      ref = options.attrs;
	      for (k in ref) {
	        v = ref[k];
	        options.domElement.attr(k, v);
	      }
	    }
	    TextInput.__super__.constructor.apply(this, arguments);
	    this.lastValue = this.value;
	    this.domElement.onchange = (function(_this) {
	      return function(event) {
	        return _this.checkIfValueChanged();
	      };
	    })(this);
	    this.domElement.oninput = (function(_this) {
	      return function(event) {
	        return _this.checkIfValueChanged();
	      };
	    })(this);
	    this.domElement.onselect = (function(_this) {
	      return function(event) {
	        return _this.queueEvent("selectionChanged");
	      };
	    })(this);
	    this.domElement.onblur = (function(_this) {
	      return function(event) {
	        return _this.blur();
	      };
	    })(this);
	    this.domElement.onfocus = (function(_this) {
	      return function(event) {
	        return _this.focus();
	      };
	    })(this);
	  }

	  TextInput.prototype.preprocessEventHandlers = function(handlerMap) {
	    return merge(TextInput.__super__.preprocessEventHandlers.apply(this, arguments), {
	      focus: (function(_this) {
	        return function() {
	          return _this.domElement.focus();
	        };
	      })(this),
	      blur: (function(_this) {
	        return function() {
	          return _this.domElement.blur();
	        };
	      })(this),
	      keyUp: (function(_this) {
	        return function(arg) {
	          var props;
	          props = arg.props;
	          if (props.key === "enter") {
	            return _this.handleEvent("enter", {
	              value: _this.value
	            });
	          }
	        };
	      })(this)
	    });
	  };

	  TextInput.prototype.checkIfValueChanged = function() {
	    if (this.lastValue !== this.value) {
	      this.lastValue = this.value;
	      return this.queueEvent("valueChanged", {
	        value: this.value,
	        lastValue: this.lastValue
	      });
	    }
	  };

	  TextInput.virtualProperty({
	    value: {
	      getter: function(pending) {
	        return this.domElement.value;
	      },
	      setter: function(v) {
	        return this.domElement.value = v;
	      }
	    },
	    color: {
	      getter: function() {
	        return color(this.domElement.style.color);
	      },
	      setter: function(c) {
	        self.domElement = this.domElement;
	        return this.domElement.style.color = color(c).toString();
	      }
	    }
	  });

	  TextInput.prototype.selectAll = function() {
	    return this.domElement.select();
	  };

	  return TextInput;

	})(SynchronizedDomOverlay));


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, FullScreenApp, Promise;

	Promise = (Foundation = __webpack_require__(11)).Promise;

	module.exports = FullScreenApp = (function() {
	  function FullScreenApp() {}

	  FullScreenApp._domReady = function() {
	    var DomConsole, Engine, query;
	    Engine = __webpack_require__(82);
	    query = Foundation.Browser.Parse.query();
	    console.log("Art.Engine.FullScreenApp options:\n  ?dev=true\n    show DomConsole\n  ?perfGraphs=true\n    show performance graphs");
	    if (query.dev === "true" || query.perfGraphs === "true") {

	      /*
	      TODO:
	      this indirectly requires jquery...
	      1) dom-console doesn't really need jquery, it just needs a refactor
	      2) I'd like a way to easily build production vs dev code.
	      3) DomConsole should only be included in dev code.
	       */
	      DomConsole = __webpack_require__(210);
	      DomConsole.enable();
	      Engine.Core.CanvasElement.prototype.defaultSize = {
	        hh: 1,
	        w: (query.w | 0) || 375
	      };
	      if (query.perfGraphs === "true") {
	        Engine.DevTools.GlobalEpochStats.enable();
	      }
	    }
	    return console.log("Art.Engine.FullScreenApp: app ready");
	  };

	  FullScreenApp.init = function(config) {
	    var appReadyPromise;
	    if (config == null) {
	      config = {};
	    }
	    document.onreadystatechange = (function(_this) {
	      return function() {
	        if (document.readyState === "interactive") {
	          _this._domReady();
	          return appReadyPromise.resolve();
	        }
	      };
	    })(this);
	    module.exports = appReadyPromise = new Promise;
	    this.writeDom(config);
	    return appReadyPromise;
	  };

	  FullScreenApp.writeDom = function(arg) {
	    var fontFamilies, fontFamily, fontFamilyInits, html, newLine, scriptLinks, scriptUrl, scripts, sheetUrl, styleSheetLinks, styleSheets, title;
	    title = arg.title, styleSheets = arg.styleSheets, scripts = arg.scripts, fontFamilies = arg.fontFamilies;
	    title || (title = "Art App");
	    scripts || (scripts = []);
	    styleSheets || (styleSheets = []);
	    fontFamilies || (fontFamilies = []);
	    styleSheetLinks = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = styleSheets.length; i < len; i++) {
	        sheetUrl = styleSheets[i];
	        results.push("<link rel='stylesheet' href='" + sheetUrl + "' />");
	      }
	      return results;
	    })();
	    scriptLinks = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = scripts.length; i < len; i++) {
	        scriptUrl = scripts[i];
	        if (scriptUrl) {
	          results.push("<script type='text/javascript' src='" + scriptUrl + "'></script>");
	        }
	      }
	      return results;
	    })();

	    /*
	    To include an external font:
	    
	      Make sure you load your font with @font-face first in one of the included styleSheets.
	      Make sure you add the font-family string specified in your font-face definition to the fontFamilies list.
	    
	    This is needed to ensure the font loads.
	    TODO: should we us an actual font-loader?
	     */
	    fontFamilyInits = (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = fontFamilies.length; i < len; i++) {
	        fontFamily = fontFamilies[i];
	        results.push("<div style='font-family:" + fontFamily + ";position:absolute;font-size:0;'>T</div>");
	      }
	      return results;
	    })();
	    newLine = "\n    ";
	    html = "<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"description\" content=\"\">\n\n    <meta name=\"viewport\" content=\"user-scalable=no, width=device-width, initial-scale=1.0\" />\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n    <meta name=\"format-detection\" content=\"telephone=no\" />\n\n    <title>" + title + "</title>\n    " + (styleSheetLinks.join(newLine)) + "\n  </head>\n\n  <style>\n    body {\n      padding: 0px;\n      margin: 0px;\n      background-color: #eee;\n      overflow: hidden;\n      font-size: 0px;\n    }\n    canvas {\n      width: 100%;\n      height: 100%;\n    }\n    input:focus {\n      outline: 0;\n    }\n  </style>\n\n  <body>\n    " + (fontFamilyInits.join(newLine)) + "\n    <canvas id=\"artCanvas\" moz-opaque></canvas>\n    " + (scriptLinks.join(newLine)) + "\n  </body>\n</html>";
	    return document.write(html);
	  };

	  return FullScreenApp;

	})();


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(211);


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	var DomConsole;

	module.exports = DomConsole = __webpack_require__(212);

	DomConsole.Chart = __webpack_require__(214);

	DomConsole.Main = __webpack_require__(215);

	DomConsole.finishLoad(["Chart", "Main"]);


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	var DevTools,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	DevTools = __webpack_require__(213);

	module.exports = DevTools.DomConsole || (DevTools.DomConsole = (function(superClass) {
	  extend(DomConsole, superClass);

	  function DomConsole() {
	    return DomConsole.__super__.constructor.apply(this, arguments);
	  }

	  DomConsole.namespace = DevTools;

	  DomConsole.namespacePath = "Neptune.Art.DevTools.DomConsole";

	  return DomConsole;

	})(Neptune.Base));

	DevTools.addNamespace(DevTools.DomConsole);


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(14);

	module.exports = Art.DevTools || (Art.DevTools = (function(superClass) {
	  extend(DevTools, superClass);

	  function DevTools() {
	    return DevTools.__super__.constructor.apply(this, arguments);
	  }

	  DevTools.namespace = Art;

	  DevTools.namespacePath = "Neptune.Art.DevTools";

	  return DevTools;

	})(Neptune.Base));

	Art.addNamespace(Art.DevTools);


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(93), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Atomic, Foundation) {
	  var Chart, Matrix, color, inspect, log, point, rect;
	  point = Atomic.point, color = Atomic.color, rect = Atomic.rect, Matrix = Atomic.Matrix;
	  inspect = Foundation.inspect, log = Foundation.log;
	  return Chart = (function() {
	    function Chart() {}

	    Chart.bar = function(numbers, options) {
	      var barArea, barColor, barWidth, bgColor, chartBgColor, drawArea, drawMatrix, fontSize, height, i, j, k, len, len1, margin, maxNumber, minWidth, out, percent, pixelsPerPoint, pos, range, size, textColor;
	      if (options == null) {
	        options = {};
	      }
	      range = options.range;
	      pixelsPerPoint = options.pixelsPerPoint || 2;
	      fontSize = options.fontSize || 10;
	      margin = options.margin || (range ? fontSize * 1.4 : 0);
	      bgColor = color(options.bgColor || color(1, 1, 1, 0));
	      chartBgColor = color(options.chartBgColor || "#fff7f0");
	      barColor = color(options.barColor || "rgba(0,0,0,.5)");
	      textColor = color(options.textColor || "orange");
	      minWidth = options.minWidth || 50;
	      size = options.size || point(numbers.length * 4, 50 + 2 * margin);
	      if (options.barWidth) {
	        size = size.withX(numbers.length * options.barWidth);
	      }
	      if (size.x < minWidth) {
	        size = size.withX(minWidth);
	      }
	      barWidth = size.x / numbers.length;
	      drawMatrix = Matrix.scale(pixelsPerPoint);
	      out = new Art.Canvas.Bitmap(size.mul(pixelsPerPoint));
	      out.pixelsPerPoint = pixelsPerPoint;
	      out.clear(bgColor);
	      drawArea = rect(0, margin, size.w, size.h - 2 * margin);
	      out.drawRectangle(drawMatrix, drawArea, chartBgColor);
	      pos = drawArea.left;
	      maxNumber = 0;
	      for (j = 0, len = numbers.length; j < len; j++) {
	        i = numbers[j];
	        if (i > maxNumber) {
	          maxNumber = i;
	        }
	      }
	      for (k = 0, len1 = numbers.length; k < len1; k++) {
	        i = numbers[k];
	        percent = i / maxNumber;
	        height = drawArea.h * percent;
	        barArea = rect(pos, drawArea.bottom - height, barWidth, height).round();
	        out.drawRectangle(drawMatrix, barArea, barColor);
	        pos += barWidth;
	      }
	      if (range) {
	        out.drawText(Matrix.translate(0, fontSize).mul(drawMatrix), "max: " + maxNumber, {
	          size: fontSize,
	          color: textColor
	        });
	        out.drawText(Matrix.translate(0, size.y).mul(drawMatrix), range[0], {
	          size: fontSize,
	          color: textColor
	        });
	        out.drawText(Matrix.translate(size).mul(drawMatrix), range[1], {
	          size: fontSize,
	          color: textColor,
	          align: "right"
	        });
	      }
	      return out;
	    };

	    return Chart;

	  })();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
	/*
	 * SASS
	 * compile it with: http://sassmeister.com/
	 */
	var slice = [].slice,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(216);

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(220), __webpack_require__(11), __webpack_require__(93), __webpack_require__(212)], __WEBPACK_AMD_DEFINE_RESULT__ = function($, Foundation, Atomic, DomConsole) {
	  var BaseObject, Color, Map, Matrix, Point, Rectangle, clone, color, colorRegex, createWithPostCreate, domConsoleId, flatten, htmlEscape, insertBetweenEveryElement, inspect, isArray, isFunction, isImage, isNumber, isString, matrix, merge, nextTick, packageLogArgs, point, rect, timeout, wrapDomElement;
	  color = Atomic.color, Color = Atomic.Color, point = Atomic.point, Point = Atomic.Point, matrix = Atomic.matrix, Matrix = Atomic.Matrix, rect = Atomic.rect, Rectangle = Atomic.Rectangle;
	  BaseObject = Foundation.BaseObject, inspect = Foundation.inspect, clone = Foundation.clone, merge = Foundation.merge, Map = Foundation.Map, nextTick = Foundation.nextTick, timeout = Foundation.timeout, flatten = Foundation.flatten, isArray = Foundation.isArray, isString = Foundation.isString, isFunction = Foundation.isFunction, isNumber = Foundation.isNumber, createWithPostCreate = Foundation.createWithPostCreate, colorRegex = Foundation.colorRegex;
	  isImage = function(o) {
	    return o && ((typeof o.toImage === "function") || o.constructor === HTMLImageElement);
	  };
	  htmlEscape = function(str) {
	    return str;
	  };
	  insertBetweenEveryElement = function(array, el) {
	    var first, j, len, res, v;
	    res = [];
	    first = true;
	    for (j = 0, len = array.length; j < len; j++) {
	      v = array[j];
	      if (first) {
	        first = false;
	      } else {
	        res.push(el);
	      }
	      res.push(v);
	    }
	    return res;
	  };
	  domConsoleId = 'Art-Dom-Console';
	  DomConsole.enable = function() {
	    Foundation.Log.alternativeLogger = DomConsole.Console.console;
	    DomConsole.enabled = true;
	    return DomConsole.Console.console.show();
	  };
	  DomConsole.disable = function() {
	    DomConsole.enabled = false;
	    Foundation.Log.alternativeLogger = null;
	    DomConsole.Console.console.hide();
	    return DomConsole.Console.console.reset();
	  };
	  DomConsole.hide = function() {
	    return DomConsole.Console.console.hide();
	  };
	  DomConsole.show = function() {
	    return DomConsole.Console.console.show();
	  };
	  DomConsole.reset = function() {
	    return DomConsole.Console.console.reset();
	  };
	  DomConsole.logCore = function(m, callStack, contextName) {
	    return DomConsole.Console.console.logCore(m, callStack, contextName);
	  };
	  DomConsole.logF = function(options) {
	    return DomConsole.Console.console.logF(options);
	  };
	  DomConsole.log = function() {
	    var args, ref;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return (ref = DomConsole.Console.console).log.apply(ref, args);
	  };
	  packageLogArgs = function(args) {
	    if (args.length === 1) {
	      return args[0];
	    } else {
	      return args;
	    }
	  };
	  wrapDomElement = function(a, withB) {
	    var bElement;
	    bElement = $(withB);
	    bElement.append(a);
	    return bElement;
	  };
	  return createWithPostCreate(DomConsole.Console = (function(superClass) {
	    extend(Console, superClass);

	    Console.singletonClass();

	    Console.postCreate = function() {
	      self.domConsole = DomConsole.singleton;
	      return Console.__super__.constructor.postCreate.apply(this, arguments);
	    };

	    function Console() {
	      window.domConsole = this;
	      this._devicePixelRatio = Foundation.Browser.Dom.getDevicePixelRatio();
	      this.initDom();
	    }

	    Console.prototype.reset = function() {
	      return this.domContainer.html("");
	    };

	    Console.prototype.hide = function() {
	      return this.domContainer.hide();
	    };

	    Console.prototype.show = function() {
	      return this.domContainer.show();
	    };

	    Console.prototype.initDom = function() {
	      var delay, domEl, fixMochaStats, maxAttempts, mocha;
	      domEl = $("<div></div>", {
	        id: domConsoleId,
	        "class": "domConsole"
	      });
	      domEl.on("click", ".collapsable", (function(_this) {
	        return function(e) {
	          var $target;
	          $target = $(e.target).closest(".collapsable");
	          $target.siblings().show();
	          return $target.hide();
	        };
	      })(this));
	      if ((mocha = $("#mocha")).length > 0) {
	        maxAttempts = 8;
	        delay = 125 / 2;
	        fixMochaStats = function() {
	          var ms;
	          if (!maxAttempts--) {
	            console.log("fixMochaStats... giving up; sorry for the ugly screen");
	            return;
	          }
	          delay *= 2;
	          ms = $("#mocha-stats");
	          if (ms.length === 0) {
	            console.log("fixMochaStats... (waiting " + delay + "ms for #mocha-stats div to appear: " + maxAttempts + ")");
	            return timeout(delay, fixMochaStats);
	          } else {
	            return ms.css({
	              "right": "530px"
	            });
	          }
	        };
	        timeout(delay, function() {
	          return fixMochaStats();
	        });
	        mocha.css({
	          "margin-right": "530px"
	        });
	      }
	      domEl.appendTo($("body"));
	      return this.domContainer = $("#" + domConsoleId);
	    };

	    Console.prototype.appendLog = function(domElement) {
	      this.domContainer.append(domElement);
	      return nextTick((function(_this) {
	        return function() {
	          return _this.domContainer.scrollTop(_this.domContainer[0].scrollHeight);
	        };
	      })(this));
	    };

	    Console.prototype.newLogLine = function() {
	      return $("<div/>", {
	        "class": "logLine"
	      });
	    };

	    Console.prototype.log = function() {
	      var args;
	      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	      this.logCore(packageLogArgs(args));
	      return args[args.length - 1];
	    };

	    Console.prototype.logF = function(options) {
	      this.logCore(options.log, null, null, options);
	      return options.log;
	    };

	    Console.prototype.format = function(domEl, options) {
	      if (options && options.tag) {
	        domEl = wrapDomElement(domEl, "<" + options.tag + "/>");
	      }
	      return domEl;
	    };

	    Console.prototype.arrayKidsToDomArray = function(arrayOfInspectedObjects, tagName, options, addCommasAndBrackets) {
	      var child, i, kids;
	      options.maxDepth--;
	      kids = (function() {
	        var j, len, results;
	        results = [];
	        for (i = j = 0, len = arrayOfInspectedObjects.length; j < len; i = ++j) {
	          child = arrayOfInspectedObjects[i];
	          if (i > 50) {
	            break;
	          }
	          if (i === 50) {
	            results.push($(tagName, {
	              "class": "value"
	            }).append("array length: " + arrayOfInspectedObjects.length + " (showing the first " + i + ")"));
	          } else {
	            results.push($(tagName, {
	              "class": "value"
	            }).append(this.toDom(child, options)));
	          }
	        }
	        return results;
	      }).call(this);
	      options.maxDepth++;
	      if (addCommasAndBrackets) {
	        kids = this.addCommasAndBrackets(kids, "[", "]");
	      }
	      return kids;
	    };

	    Console.prototype.arrayToDomBasic = function(arrayOfInspectedObjects, options) {
	      if (options.maxDepth === 0) {
	        return $("<span/>", {
	          "class": "array maxdepth"
	        }).text(arrayOfInspectedObjects.length === 0 ? "[]" : "[... " + arrayOfInspectedObjects.length + "]");
	      }
	      return $("<span/>", {
	        "class": "array"
	      }).append(this.arrayKidsToDomArray(arrayOfInspectedObjects, "<span/>", options, true));
	    };

	    Console.prototype.arrayToDom = function(arrayOfInspectedObjects, options) {
	      if (options.treeView) {
	        return this.arrayToDomTreeView(arrayOfInspectedObjects, options);
	      } else {
	        return this.arrayToDomBasic(arrayOfInspectedObjects, options);
	      }
	    };

	    Console.prototype.addCommasAndBrackets = function(kids, leftBracket, rightBracket, typeName) {
	      var i, j, kid, len;
	      for (i = j = 0, len = kids.length; j < len; i = ++j) {
	        kid = kids[i];
	        if (i + 1 < kids.length) {
	          kid.append(", ");
	        }
	      }
	      return flatten(leftBracket, typeName, kids, rightBracket);
	    };

	    Console.prototype.mapKidsToDomArray = function(inspectedObject, tagName, options, addCommasAndBrackets) {
	      var k, kids, v;
	      options.maxDepth--;
	      kids = (function() {
	        var ref, results;
	        ref = inspectedObject.children;
	        results = [];
	        for (k in ref) {
	          v = ref[k];
	          results.push($(tagName).append([
	            $("<span/>", {
	              "class": "key"
	            }).append(k + ": "), $("<span/>", {
	              "class": "value"
	            }).append(this.toDom(v, options))
	          ]));
	        }
	        return results;
	      }).call(this);
	      options.maxDepth++;
	      if (addCommasAndBrackets) {
	        if (inspectedObject.instanceOf) {
	          return this.addCommasAndBrackets(kids, "&lt;", "&gt;", inspectedObject.instanceOf + " ");
	        } else {
	          return this.addCommasAndBrackets(kids, "{", "}");
	        }
	      } else {
	        if (inspectedObject.instanceOf) {
	          return flatten(inspectedObject.instanceOf + " ", kids);
	        } else {
	          return kids;
	        }
	      }
	    };

	    Console.prototype.objectToDomBasic = function(inspectedObject, options) {
	      var inside;
	      if (options.maxDepth === 0) {
	        inside = inspectedObject.length === 0 ? "" : "... " + inspectedObject.length;
	        if (inspectedObject.instanceOf) {
	          return this.instanceOfDomElement(inspectedObject, inside);
	        } else {
	          return $("<span/>", {
	            "class": "object maxdepth"
	          }).text("{" + inside + "}");
	        }
	      }
	      return $("<span/>", {
	        "class": "object"
	      }).append(this.mapKidsToDomArray(inspectedObject, "<span/>", options, true));
	    };

	    Console.prototype.treeViewCollapsable = function(collapsablePair, options) {
	      collapsablePair[options.collapsed ? 0 : 1].hide();
	      return collapsablePair;
	    };

	    Console.prototype.instanceOfDomElement = function(inspectedObject, inside) {
	      return $("<span/>", {
	        "class": "object maxdepth"
	      }).text("<" + inspectedObject.instanceOf + (inside || "") + ">");
	    };

	    Console.prototype.arrayToDomTreeView = function(arrayOfInspectedObjects, options) {
	      var el;
	      if (arrayOfInspectedObjects.length === 0) {
	        el = $("<span/>", {
	          "class": "array"
	        });
	        return el.append("[]");
	      }
	      return this.treeViewCollapsable([
	        $("<ul/>", {
	          "class": "collapsable open array"
	        }).append(this.arrayKidsToDomArray(arrayOfInspectedObjects, "<li/>", options)), $(this.arrayToDomBasic(arrayOfInspectedObjects, merge(options, {
	          maxDepth: 0,
	          treeView: false
	        }))).addClass("collapsable closed")
	      ], options);
	    };

	    Console.prototype.objectToDomTreeView = function(inspectedObject, options) {
	      var el;
	      if (inspectedObject.length === 0) {
	        if (inspectedObject.instanceOf) {
	          return this.instanceOfDomElement(inspectedObject);
	        } else {
	          el = $("<span/>", {
	            "class": "object"
	          });
	          return el.append("{}");
	        }
	      }
	      return this.treeViewCollapsable([
	        $("<ul/>", {
	          "class": "object open collapsable"
	        }).append(this.mapKidsToDomArray(inspectedObject, "<li/>", options)), $(this.objectToDomBasic(inspectedObject, merge(options, {
	          maxDepth: 0,
	          treeView: false
	        }))).addClass("collapsable closed")
	      ], options);
	    };

	    Console.prototype.objectToDom = function(inspectedObject, options) {
	      if (options.treeView) {
	        return this.objectToDomTreeView(inspectedObject, options);
	      } else {
	        return this.objectToDomBasic(inspectedObject, options);
	      }
	    };

	    Console.prototype.literalToDom = function(inspectedObject) {
	      return $("<span/>", {
	        "class": "literal"
	      }).text(inspectedObject.toString());
	    };

	    Console.prototype.literalWithInspectedToDom = function(inspectedObject) {
	      return $("<span/>", {
	        "class": "inspected literal"
	      }).append(inspectedObject.inspected);
	    };

	    Console.prototype.colorToDom = function(clr) {
	      var clrString, displayString, style;
	      displayString = isString(clrString = clr) ? (clr = color(clr), "'" + clrString + "'") : clr.toString();
	      style = "background-color: " + clr + "; padding:0 5px; color: " + (clr.perceptualLightness < .8 && clr.a > .25 ? 'white' : 'black') + ";";
	      return $("<span/>", {
	        "class": "inspected",
	        style: style
	      }).append("" + displayString);
	    };

	    Console.prototype.toDom = function(inspectedObject, options) {
	      var children, domEl, image, inspectedString, maxImageDisplaySize, minImageDisplaySize, scale, size;
	      if (options == null) {
	        options = {};
	      }
	      if (image = inspectedObject.image) {
	        minImageDisplaySize = point(0);
	        maxImageDisplaySize = point(1024, 512).mul(this._devicePixelRatio);
	        domEl = $(inspectedObject.image).clone();
	        size = point(image.width, image.height);
	        scale = 1 / this._devicePixelRatio;
	        if (!size.gte(minImageDisplaySize)) {
	          scale *= Math.ceil(minImageDisplaySize.div(size).min());
	        } else if (!size.lt(maxImageDisplaySize)) {
	          scale *= maxImageDisplaySize.div(size).min();
	        }
	        domEl.css("width", (image.naturalWidth * scale | 0) + "px");
	        domEl.css("height", (image.naturalHeight * scale | 0) + "px");
	        return domEl;
	      } else if (inspectedObject.inspected) {
	        if (inspectedObject.originalObject instanceof Color) {
	          return this.colorToDom(inspectedObject.originalObject);
	        } else {
	          return this.literalWithInspectedToDom(inspectedObject);
	        }
	      } else if (children = inspectedObject.children) {
	        if (isArray(children)) {
	          return this.arrayToDom(children, options);
	        } else {
	          return this.objectToDom(inspectedObject, options);
	        }
	      } else if (isString(inspectedString = inspectedObject.string) && inspectedString.match(colorRegex)) {
	        return this.colorToDom(inspectedString);
	      } else {
	        return this.literalToDom(inspectedObject);
	      }
	    };

	    Console.prototype.logCore = function(m, callStack, name, options) {
	      var domEl, inspector, maxDepth;
	      if (options == null) {
	        options = {};
	      }
	      console.log(m);
	      options.treeView = true;
	      maxDepth = options.maxDepth;
	      if (!isNumber(maxDepth)) {
	        maxDepth = 10;
	      }
	      inspector = new Foundation.Inspect.Inspector2({
	        withImages: true,
	        maxDepth: maxDepth
	      });
	      domEl = this.newLogLine();
	      if (typeof m === "string") {
	        return this.appendLog(this.format(domEl.append($("<pre/>").text(m)), options));
	      }
	      return inspector.inspect(m, (function(_this) {
	        return function(inspected) {
	          domEl.append(_this.toDom(inspected, options));
	          return _this.appendLog(_this.format(domEl, options));
	        };
	      })(this));
	    };

	    return Console;

	  })(BaseObject));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(217);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(219)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../../../node_modules/css-loader/index.js!./style.css", function() {
				var newContent = require("!!./../../../../../node_modules/css-loader/index.js!./style.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(218)();
	// imports


	// module
	exports.push([module.id, "@charset \"UTF-8\";\n.domConsole {\n  position: fixed;\n  top: 0;\n  right: 0;\n  width: 500px;\n  bottom: 0;\n  border-left: 1px solid #aaaaaa;\n  padding: 5px;\n  overflow: auto;\n  background-color: white; }\n  .domConsole img {\n    image-rendering: -moz-crisp-edges;\n    image-rendering: -o-crisp-edges;\n    image-rendering: -webkit-optimize-contrast;\n    image-rendering: crisp-edges;\n    -ms-interpolation-mode: nearest-neighbor;\n    border: 1px solid rgba(255, 255, 255, 0); }\n    .domConsole img:hover {\n      border: 1px solid #bbbbbb; }\n  .domConsole ul {\n    list-style-type: none; }\n  .domConsole .collapsable {\n    cursor: pointer;\n    margin: 0;\n    padding: 0;\n    padding-left: 12px;\n    margin-bottom: 5px;\n    position: relative;\n    border-left: 1px solid transparent; }\n    .domConsole .collapsable:before {\n      content: \"\\25BE\";\n      position: absolute;\n      left: 2px;\n      top: 0;\n      bottom: 0; }\n    .domConsole .collapsable:hover {\n      border-left: 1px solid #cccc44;\n      border-radius: 5px; }\n  .domConsole .collapsable.closed.array:before {\n    content: \"\\25B9\"; }\n  .domConsole .collapsable.open.array:before {\n    content: \"\\25BF\"; }\n  .domConsole .collapsable.closed.object:before {\n    content: \"\\25B8\"; }\n  .domConsole .collapsable.open.object:before {\n    content: \"\\25BE\"; }\n  .domConsole pre {\n    margin: 0;\n    color: #555555; }\n  .domConsole .logLine {\n    font-family: \"Courier\";\n    font-size: 12px;\n    color: #aaaaaa;\n    border-right: 2px solid transparent; }\n    .domConsole .logLine .literal {\n      color: green; }\n    .domConsole .logLine .object .key {\n      color: #bbbb00; }\n    .domConsole .logLine:hover {\n      border-right: 2px solid #e0e0e0; }\n  .domConsole h1 {\n    margin-bottom: 20px;\n    margin-top: 40px; }\n  .domConsole h2 {\n    margin-bottom: 15px;\n    margin-top: 30px; }\n  .domConsole h3 {\n    margin-bottom: 10px;\n    margin-top: 20px; }\n  .domConsole h1 .logLine {\n    font-size: 24px;\n    border-bottom: 4px solid #e0e0e0; }\n  .domConsole h2 .logLine {\n    font-size: 20px;\n    border-bottom: 3px solid #e0e0e0; }\n  .domConsole h3 .logLine {\n    font-size: 16px;\n    border-bottom: 2px solid #e0e0e0; }\n", ""]);

	// exports


/***/ },
/* 218 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.0
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-08T20:02Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];

	var document = window.document;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "2.2.0",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isPlainObject: function( obj ) {

			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}

			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {

				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {

					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval

					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {

							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		register: function( owner, initial ) {
			var value = initial || {};

			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;

			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key === undefined ) {
				this.register( owner );

			} else {

				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );

					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {

						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;

				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data, camelKey;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||

						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );

					if ( data !== undefined ) {
						return data;
					}

					camelKey = jQuery.camelCase( key );

					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {

					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	function manipulationTarget( elem, content ) {
		if ( jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =

				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild( container );
		}

		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );

				documentElement.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					style[ name ] = value;
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}

			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;

				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );

		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// Handle most common string cases
						ret.replace( rreturn, "" ) :

						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					// Support: IE<11
					// option.value not trimmed (#14858)
					return jQuery.trim( elem.value );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
								jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// But now, this "simulate" function is used only for events
					// for which stopPropagation() is noop, so there is no need for that anymore.
					//
					// For the compat branch though, guard for "click" and "submit"
					// events is still used, but was moved to jQuery.event.stopPropagation function
					// because `originalEvent` should point to the original event for the constancy
					// with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	support.focusin = "onfocusin" in window;


	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );

					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				// Subtract offsetParent scroll positions
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ) -
					offsetParent.scrollTop();
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true ) -
					offsetParent.scrollLeft();
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	var DevTools;

	module.exports = DevTools = __webpack_require__(222);

	DevTools.GlobalEpochStats = __webpack_require__(223);

	DevTools.finishLoad(["GlobalEpochStats"]);


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.DevTools || (Engine.DevTools = (function(superClass) {
	  extend(DevTools, superClass);

	  function DevTools() {
	    return DevTools.__super__.constructor.apply(this, arguments);
	  }

	  DevTools.namespace = Engine;

	  DevTools.namespacePath = "Neptune.Art.Engine.DevTools";

	  return DevTools;

	})(Neptune.Base));

	Engine.addNamespace(Engine.DevTools);


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(93), __webpack_require__(129), __webpack_require__(90)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, Atomic, Canvas, EngineCore) {
	  var GlobalEpochCycle, GlobalEpochStat, GlobalEpochStats, Map, Matrix, aimColor, color, currentSecond, floor, globalEpochCycle, log, max, min, miniInspect, peek, point, reactColor, rect, timeout;
	  log = Foundation.log, Map = Foundation.Map, miniInspect = Foundation.miniInspect, currentSecond = Foundation.currentSecond, max = Foundation.max, min = Foundation.min, timeout = Foundation.timeout, peek = Foundation.peek;
	  point = Atomic.point, rect = Atomic.rect, Matrix = Atomic.Matrix, color = Atomic.color;
	  GlobalEpochCycle = EngineCore.GlobalEpochCycle;
	  globalEpochCycle = GlobalEpochCycle.globalEpochCycle;
	  floor = Math.floor;
	  reactColor = color("gold");
	  aimColor = color("#9c3");
	  GlobalEpochStat = (function(superClass) {
	    var statColors, statFields;

	    extend(GlobalEpochStat, superClass);

	    function GlobalEpochStat(sampleTime1, total1, sampleSet1) {
	      this.sampleTime = sampleTime1;
	      this.total = total1;
	      this.sampleSet = sampleSet1;
	    }

	    GlobalEpochStat.statFields = statFields = ["total", "draw", "aim", "aimLayout", "aimTL", "aimRR", "react", "reactAim", "reactLC", "reactRender", "event", "flux"];

	    GlobalEpochStat.statColors = statColors = {
	      total: "gray",
	      draw: "#39c",
	      aim: aimColor,
	      aimLayout: aimColor.withLightness(aimColor.lightness * .9),
	      aimTL: aimColor.withLightness(aimColor.lightness * .8),
	      aimRR: aimColor.withLightness(aimColor.lightness * .7),
	      react: reactColor,
	      reactAim: reactColor.withLightness(reactColor.lightness * .9),
	      reactLC: reactColor.withLightness(reactColor.lightness * .8),
	      reactRender: reactColor.withLightness(reactColor.lightness * .7),
	      event: "#ff6347",
	      flux: "#d936a3"
	    };

	    GlobalEpochStat.prototype.getStacked = function(sampleName) {
	      var i, sn, sum;
	      if (sampleName === "total") {
	        return this.total;
	      }
	      sum = 0;
	      for (i = statFields.length - 1; i >= 0; i += -1) {
	        sn = statFields[i];
	        sum += this.sampleSet[sn] || 0;
	        if (sn === sampleName) {
	          break;
	        }
	      }
	      return sum;
	    };

	    GlobalEpochStat.prototype.drawSample = function(bitmap, drawMatrix, sampleWidth, sampleField, h) {
	      var sample, sampleTime, x, y;
	      sampleTime = this.sampleTime;
	      sample = this.getStacked(sampleField);
	      x = floor(drawMatrix.transformX(sampleTime, sample));
	      y = floor(drawMatrix.transformY(sampleTime, sample));
	      return bitmap.drawRectangle(null, rect(x, y, sampleWidth, h - y), {
	        color: statColors[sampleField]
	      });
	    };

	    return GlobalEpochStat;

	  })(Foundation.BaseObject);
	  return GlobalEpochStats = (function(superClass) {
	    extend(GlobalEpochStats, superClass);

	    GlobalEpochStats.classGetter({
	      enabled: function() {
	        return !!globalEpochCycle.globalEpochStats;
	      }
	    });

	    GlobalEpochStats.enable = function() {
	      log("Enabled globalEpochStats");
	      globalEpochCycle.globalEpochStats = new this;
	      return true;
	    };

	    GlobalEpochStats.toggle = function() {
	      if (this.enabled) {
	        return this.disable();
	      } else {
	        return this.enable();
	      }
	    };

	    GlobalEpochStats.disable = function() {
	      log("Disabled globalEpochStats");
	      globalEpochCycle.globalEpochStats = null;
	      return false;
	    };

	    function GlobalEpochStats() {
	      this.reset();
	    }

	    GlobalEpochStats.prototype.reset = function() {
	      this.maxMs = 2 / 60;
	      this.stats = [];
	      this.nextEventIdIndex = 0;
	      this.eventsById = {};
	      this.eventLegend = {};
	      this._minSampleTime = null;
	      return this._maxSampleTime = null;
	    };

	    GlobalEpochStats.prototype.add = function(sampleTime, total, sampleSet) {
	      var ges;
	      this.stats.push(ges = new GlobalEpochStat(sampleTime, total, sampleSet));
	      this.maxMs = max(this.maxMs, total * 1.5);
	      this.logAndResetWhenIdle();
	      return this.addSampleTime(sampleTime);
	    };

	    GlobalEpochStats.prototype.addSampleTime = function(time) {
	      this._minSampleTime = min(time, this._minSampleTime || time);
	      return this._maxSampleTime = max(time, this._maxSampleTime || time);
	    };

	    GlobalEpochStats.prototype.logEvent = function(name, id) {
	      var base, clr, colors, ebi, now;
	      now = currentSecond();
	      this.addSampleTime(now);
	      colors = {
	        generateDrawCache: "green",
	        animation: "#77f",
	        animationAborted: "#f77",
	        animationDone: "#77f",
	        "default": "gray"
	      };
	      clr = colors[name] || colors["default"];
	      ebi = (base = this.eventsById)[id] || (base[id] = {
	        startTime: now,
	        endTime: now,
	        index: this.nextEventIdIndex++,
	        events: [],
	        name: name,
	        clr: clr
	      });
	      ebi.startTime = min(now, ebi.startTime);
	      ebi.endTime = max(now, ebi.endTime);
	      this.eventLegend[name] = clr;
	      return ebi.events.push({
	        time: now,
	        name: name,
	        clr: clr
	      });
	    };

	    GlobalEpochStats.getter({
	      minSampleTime: function() {
	        return this._minSampleTime;
	      },
	      maxSampleTime: function() {
	        return this._maxSampleTime;
	      },
	      sampleTimeRange: function() {
	        return this.maxSampleTime - this.minSampleTime;
	      }
	    });

	    GlobalEpochStats.prototype.drawAllSamplesForOneField = function(bitmap, drawMatrix, sampleField) {
	      var h, i, len, sampleTimeRange, sampleWidth, size, stat, stats, w;
	      size = bitmap.size;
	      w = size.w, h = size.h;
	      sampleTimeRange = this.sampleTimeRange, stats = this.stats;
	      sampleWidth = floor((w / sampleTimeRange) / 60);
	      for (i = 0, len = stats.length; i < len; i++) {
	        stat = stats[i];
	        stat.drawSample(bitmap, drawMatrix, sampleWidth, sampleField, h);
	      }
	      return null;
	    };

	    GlobalEpochStats.prototype.getDrawMatrix = function(size) {
	      var h, legendWidth, maxMs, minSampleTime, sampleTimeRange, sampleWidth, w, xScale, yScale;
	      w = size.w, h = size.h;
	      legendWidth = 80;
	      w -= legendWidth;
	      sampleTimeRange = this.sampleTimeRange, minSampleTime = this.minSampleTime, maxMs = this.maxMs;
	      sampleWidth = floor((w / sampleTimeRange) / 60);
	      xScale = (w - sampleWidth) / sampleTimeRange;
	      yScale = h / maxMs;
	      return Matrix.scale(1, -1).translate(-minSampleTime, 0).scale(xScale, yScale).translate(legendWidth, h);
	    };

	    GlobalEpochStats.prototype.drawLabeledHLine = function(bitmap, x1, x2, y, clr, label) {
	      bitmap.drawRectangle(null, rect(x1, y, x2 - x1, 1), {
	        color: color(clr)
	      });
	      return bitmap.drawText(point(x1, y - 5), label, {
	        size: 14,
	        color: color(clr)
	      });
	    };

	    GlobalEpochStats.prototype.drawEvents = function(bitmap, drawMatrix) {
	      var clr, endTime, eventTimeLineHeight, events, h, id, index, name, ref, ref1, ref2, results, startTime, time, w, x, x1, x2, y;
	      ref = bitmap.size, w = ref.w, h = ref.h;
	      eventTimeLineHeight = floor(h / 20);
	      ref1 = this.eventsById;
	      results = [];
	      for (id in ref1) {
	        ref2 = ref1[id], index = ref2.index, startTime = ref2.startTime, endTime = ref2.endTime, clr = ref2.clr, events = ref2.events, name = ref2.name;
	        x1 = floor(drawMatrix.transformX(startTime, 0));
	        x2 = floor(drawMatrix.transformX(endTime, 0));
	        y = (index + 1) * eventTimeLineHeight;
	        this.drawLabeledHLine(bitmap, x1, x2, y, clr, name);
	        results.push((function() {
	          var i, len, ref3, results1;
	          results1 = [];
	          for (i = 0, len = events.length; i < len; i++) {
	            ref3 = events[i], time = ref3.time, name = ref3.name, clr = ref3.clr;
	            x = floor(drawMatrix.transformX(time, 0));
	            results1.push(bitmap.drawRectangle(null, rect(x, y, 1, eventTimeLineHeight * (1 / 3)), {
	              color: clr
	            }));
	          }
	          return results1;
	        })());
	      }
	      return results;
	    };

	    GlobalEpochStats.prototype.log = function() {
	      var averageFps, averageFrameTimeMs, averageFrameTimeMsY, bitmap, ce, clr, drawMatrix, field, fiveMsY, h, i, j, legend, len, len1, missedFrames, perfectFrameCount, ref, ref1, ref2, sampleField, size, tenMsY, totalFrames, w, y;
	      if (!(this.stats.length > 0)) {
	        return;
	      }
	      !((ref = Neptune.Art.DevTools.DomConsole) != null ? ref.enabled : void 0) && (ce = GlobalEpochCycle.activeCanvasElements[0]);
	      bitmap = new Canvas.Bitmap(size = ce ? ce.canvasBitmap.size : point(1000, 600));
	      w = size.w, h = size.h;
	      bitmap.clear("#fff");
	      drawMatrix = this.getDrawMatrix(size);
	      y = floor(drawMatrix.transformY(0, 1 / 60));
	      tenMsY = floor(drawMatrix.transformY(0, 1 / 100));
	      fiveMsY = floor(drawMatrix.transformY(0, 1 / 200));
	      bitmap.drawRectangle(null, rect(0, y, w, 1), {
	        color: "#0007"
	      });
	      ref1 = GlobalEpochStat.statFields;
	      for (i = 0, len = ref1.length; i < len; i++) {
	        sampleField = ref1[i];
	        this.drawAllSamplesForOneField(bitmap, drawMatrix, sampleField);
	      }
	      legend = {};
	      this.drawLabeledHLine(bitmap, 40, w, tenMsY, "#0007", "10ms");
	      this.drawLabeledHLine(bitmap, 40, w, fiveMsY, "#0007", "5ms");
	      this.drawEvents(bitmap, drawMatrix);
	      totalFrames = this.stats.length;
	      averageFrameTimeMs = this.sampleTimeRange / totalFrames;
	      perfectFrameCount = this.sampleTimeRange * 60 + .5 | 0;
	      missedFrames = perfectFrameCount - totalFrames;
	      averageFrameTimeMsY = floor(drawMatrix.transformY(0, averageFrameTimeMs));
	      if ((averageFps = 1 / averageFrameTimeMs + .5 | 0) < 55) {
	        this.drawLabeledHLine(bitmap, 40, w, y, "#0007", "60fps - 16.7ms");
	      }
	      this.drawLabeledHLine(bitmap, 40, w, averageFrameTimeMsY, "#0007", "average: " + averageFps + "fps (miss-rate: " + ((100 * missedFrames / perfectFrameCount).toPrecision(2)) + "% " + missedFrames + "/" + perfectFrameCount + ")");
	      y = 0;
	      ref2 = GlobalEpochStat.statFields;
	      for (j = 0, len1 = ref2.length; j < len1; j++) {
	        field = ref2[j];
	        clr = GlobalEpochStat.statColors[field];
	        bitmap.drawRectangle(null, rect(0, y, 75, 23), {
	          color: clr
	        });
	        bitmap.drawText(point(5, y + 18), field, {
	          size: 16,
	          color: color("white")
	        });
	        y += 25;
	      }
	      bitmap.drawBorder(null, bitmap.size, "#eee");
	      if (ce) {
	        log("showing GlobalEpochStats");
	        return ce.canvasBitmap.drawBitmap(null, bitmap, {
	          opacity: .9
	        });
	      } else {
	        return log(bitmap);
	      }
	    };

	    GlobalEpochStats.prototype.logAndResetWhenIdle = function() {
	      var samples;
	      samples = this.stats.length;
	      if (samples > 0) {
	        return timeout(1000, (function(_this) {
	          return function() {
	            if (samples === _this.stats.length && GlobalEpochStats.enabled) {
	              _this.log();
	              return _this.reset();
	            }
	          };
	        })(this));
	      }
	    };

	    return GlobalEpochStats;

	  })(Foundation.BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var File;

	module.exports = File = __webpack_require__(225);

	File.Model = __webpack_require__(226);

	File.V1Loader = __webpack_require__(227);

	File.finishLoad(["Model", "V1Loader"]);


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	var Engine,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Engine = __webpack_require__(84);

	module.exports = Engine.File || (Engine.File = (function(superClass) {
	  extend(File, superClass);

	  function File() {
	    return File.__super__.constructor.apply(this, arguments);
	  }

	  File.namespace = Engine;

	  File.namespacePath = "Neptune.Art.Engine.File";

	  return File;

	})(Neptune.Base));

	Engine.addNamespace(Engine.File);


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	var Model,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	module.exports = Model = (function(superClass) {
	  extend(Model, superClass);

	  function Model() {
	    return Model.__super__.constructor.apply(this, arguments);
	  }

	  return Model;

	})(__webpack_require__(148));


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	var Atomic, BaseObject, Binary, Canvas, Core, Element, Elements, EncodedImage, Foundation, Model, Promise, StateEpoch, V1Loader, Xbd, compositeModes, inspect, layoutModes, log, lowerCamelCase, matrix, merge, mergeInto, point, rect, stateEpoch, supportedCompositeModes,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Atomic = __webpack_require__(93);

	Canvas = __webpack_require__(129);

	Xbd = __webpack_require__(228);

	Core = __webpack_require__(90);

	Elements = __webpack_require__(87);

	Model = __webpack_require__(226);

	Binary = Foundation.Binary, inspect = Foundation.inspect, BaseObject = Foundation.BaseObject, Promise = Foundation.Promise, log = Foundation.log, mergeInto = Foundation.mergeInto, lowerCamelCase = Foundation.lowerCamelCase, merge = Foundation.merge;

	point = Atomic.point, rect = Atomic.rect, matrix = Atomic.matrix;

	EncodedImage = Binary.EncodedImage;

	Element = Core.Element, StateEpoch = Core.StateEpoch;

	stateEpoch = StateEpoch.stateEpoch;

	compositeModes = {
	  normal: 0,
	  add: 1,
	  sub: 2,
	  mul: 3,
	  destOver: 4,
	  replace: 5,
	  alphaMask: 6,
	  inverseAlphaMask: 7,
	  erase: 8,
	  0: "normal",
	  1: "add",
	  2: "sub",
	  3: "mul",
	  4: "destOver",
	  5: "replace",
	  6: "alphaMask",
	  7: "inverseAlphaMask",
	  8: "erase"
	};

	supportedCompositeModes = {
	  normal: "normal",
	  add: "add"
	};

	layoutModes = {
	  leftAddWidthFixed: 0,
	  rightAddWidthFixed: 1,
	  centeredWidthFixed: 2,
	  leftAddWidthChildren: 3,
	  rightAddWidthChildren: 4,
	  centeredWidthChildren: 5,
	  bothAdd: 6,
	  bothMul: 7,
	  bothStretch: 8,
	  0: "leftAddWidthFixed",
	  1: "rightAddWidthFixed",
	  2: "centeredWidthFixed",
	  3: "leftAddWidthChildren",
	  4: "rightAddWidthChildren",
	  5: "centeredWidthChildren",
	  6: "bothAdd",
	  7: "bothMul",
	  8: "bothStretch"
	};

	module.exports = V1Loader = (function(superClass) {
	  extend(V1Loader, superClass);

	  V1Loader.load = function(data, bitmapFactory) {
	    return new V1Loader(bitmapFactory || Canvas.Bitmap).load(data);
	  };

	  function V1Loader(bitmapFactory) {
	    this.bitmapFactory = bitmapFactory;
	  }

	  V1Loader.prototype.load = function(data) {
	    return new Promise((function(_this) {
	      return function(resolve) {
	        var topTag, xbd;
	        xbd = Xbd.parse(data);
	        topTag = xbd.tag("art_file");
	        return _this.decodeTopTag(topTag, function(artFile) {
	          var child;
	          artFile.axis = point();
	          artFile.location = point();
	          artFile.children = (function() {
	            var i, len, ref, results;
	            ref = artFile.getPendingChildren();
	            results = [];
	            for (i = 0, len = ref.length; i < len; i++) {
	              child = ref[i];
	              if (!child.getPendingIsMask()) {
	                results.push(child);
	              }
	            }
	            return results;
	          })();
	          artFile.bitmapFactory = _this.bitmapFactory;
	          return stateEpoch.onNextReady(function() {
	            return resolve(artFile);
	          });
	        });
	      };
	    })(this));
	  };

	  V1Loader.objectFactory = {
	    art_file: function() {
	      return new Model;
	    },
	    pego: function() {
	      return new Element;
	    },
	    art_stencil_shape: function() {
	      return new Element;
	    },
	    art_bitmap: function(tag, loader) {
	      var bitmap, bitmap_id;
	      bitmap_id = tag.attributes["bitmap_id"];
	      bitmap = loader.bitmaps[bitmap_id];
	      return new Elements.Bitmap({
	        bitmap: bitmap
	      });
	    }
	  };

	  V1Loader.prototype.decodeBitmaps = function(bitmaps, keys, index, callBack) {
	    var key;
	    if (index >= keys.length) {
	      return callBack(bitmaps);
	    }
	    key = keys[index];
	    return EncodedImage.toImage(bitmaps[key]).then((function(_this) {
	      return function(decodedBitmap) {
	        bitmaps[key] = _this.bitmapFactory ? _this.bitmapFactory.newBitmap(decodedBitmap) : new Canvas.Bitmap(decodedBitmap);
	        return _this.decodeBitmaps(bitmaps, keys, index + 1, callBack);
	      };
	    })(this));
	  };

	  V1Loader.prototype.decodeBitmapsTag = function(bitmapsTag, callBack) {
	    var bitmapData, bitmaps, i, id, len, ref, tag;
	    bitmaps = {};
	    ref = bitmapsTag.tags;
	    for (i = 0, len = ref.length; i < len; i++) {
	      tag = ref[i];
	      id = tag.attributes["bitmap_id"] | 0;
	      bitmapData = tag.attributes["pixel_data"];
	      bitmaps[id] = bitmapData;
	    }
	    return this.decodeBitmaps(bitmaps, Object.keys(bitmaps), 0, callBack);
	  };

	  V1Loader.prototype.decodeContext = function(topTag, callBack) {
	    var bitmapsTag, postDecodeBitmaps;
	    bitmapsTag = topTag.tag("bitmaps");
	    postDecodeBitmaps = (function(_this) {
	      return function(bitmaps) {
	        _this.bitmaps = bitmaps;
	        return callBack();
	      };
	    })(this);
	    if (bitmapsTag) {
	      return this.decodeBitmapsTag(bitmapsTag, postDecodeBitmaps);
	    } else {
	      return postDecodeBitmaps(null);
	    }
	  };

	  V1Loader.prototype.decodeTopTag = function(topTag, callBack) {
	    return this.decodeContext(topTag, (function(_this) {
	      return function() {
	        var topElement;
	        topElement = _this.createElementFromTag(topTag);
	        return callBack(topElement);
	      };
	    })(this));
	  };

	  V1Loader.prototype.createElement = function(tag) {
	    var constructor;
	    constructor = V1Loader.objectFactory[tag.name];
	    if (!constructor) {
	      this.log("WARNING: unknown object type: " + tag.name + ". Defaulting to Art.Engine.Core.Element");
	      return new Element;
	    } else {
	      return constructor(tag, this);
	    }
	  };

	  V1Loader.prototype.populateChildrenFromTag = function(parent, childrenTag) {
	    var child, children, i, j, len, len1, postChildren, ref, results, route, shapeChildren;
	    shapeChildren = [];
	    children = [];
	    postChildren = [];
	    route = {
	      "-stencil": shapeChildren,
	      "+stencil": shapeChildren,
	      "stencil": shapeChildren,
	      "normal": children,
	      "post": postChildren
	    };
	    ref = childrenTag.tags;
	    for (i = 0, len = ref.length; i < len; i++) {
	      child = ref[i];
	      route[child.attributes.stack_mode || "normal"].push(this.createElementFromTag(child, parent));
	    }
	    parent.setChildren(children);
	    if (shapeChildren.length > 0) {
	      shapeChildren[0].isMask = true;
	      parent.addChild(shapeChildren[0]);
	      if (shapeChildren.length > 1) {
	        this.log("WARNING - loading more than one mask (shape/stencil) child not currently supported! (using first one only)");
	      }
	    }
	    results = [];
	    for (j = 0, len1 = postChildren.length; j < len1; j++) {
	      child = postChildren[j];
	      results.push(parent.addChild(child));
	    }
	    return results;
	  };

	  V1Loader.prototype.decodeHorizontalLinearLayout = function(object, layout, l, s, locationOut, sizeOut) {
	    switch (layout) {
	      case layoutModes.leftAddWidthFixed:
	        mergeInto(locationOut, {
	          x: l
	        });
	        return mergeInto(sizeOut, {
	          w: s
	        });
	      case layoutModes.rightAddWidthFixed:
	        mergeInto(locationOut, {
	          x: l,
	          xpw: 1
	        });
	        return mergeInto(sizeOut, {
	          w: s
	        });
	      case layoutModes.centeredWidthFixed:
	        mergeInto(locationOut, {
	          xpw: l
	        });
	        return mergeInto(sizeOut, {
	          w: s
	        });
	      case layoutModes.bothAdd:
	        mergeInto(locationOut, {
	          x: l
	        });
	        return mergeInto(sizeOut, {
	          w: s,
	          wpw: 1
	        });
	      case layoutModes.bothMul:
	        mergeInto(locationOut, {
	          xpw: l
	        });
	        return mergeInto(sizeOut, {
	          wpw: s
	        });
	      case layoutModes.bothStretch:
	      case layoutModes.centeredWidthChildren:
	      case layoutModes.rightAddWidthChildren:
	      case layoutModes.leftAddWidthChildren:
	        return this.log("WARNING: unsupported layout " + layoutModes[layout] + " for " + channel + " loc=" + location + " size=" + size);
	    }
	  };

	  V1Loader.prototype.decodeVerticalLinearLayout = function(object, layout, l, s, locationOut, sizeOut) {
	    switch (layout) {
	      case layoutModes.leftAddWidthFixed:
	        mergeInto(locationOut, {
	          y: l
	        });
	        return mergeInto(sizeOut, {
	          h: s
	        });
	      case layoutModes.rightAddWidthFixed:
	        mergeInto(locationOut, {
	          y: l,
	          yph: 1
	        });
	        return mergeInto(sizeOut, {
	          h: s
	        });
	      case layoutModes.centeredWidthFixed:
	        mergeInto(locationOut, {
	          yph: l
	        });
	        return mergeInto(sizeOut, {
	          h: s
	        });
	      case layoutModes.bothAdd:
	        mergeInto(locationOut, {
	          y: l
	        });
	        return mergeInto(sizeOut, {
	          h: s,
	          hph: 1
	        });
	      case layoutModes.bothMul:
	        mergeInto(locationOut, {
	          yph: l
	        });
	        return mergeInto(sizeOut, {
	          hph: s
	        });
	      case layoutModes.bothStretch:
	      case layoutModes.centeredWidthChildren:
	      case layoutModes.rightAddWidthChildren:
	      case layoutModes.leftAddWidthChildren:
	        return this.log("WARNING: unsupported layout " + layoutModes[layout] + " for " + channel + " loc=" + location + " size=" + size);
	    }
	  };

	  V1Loader.prototype.decodeLayout = function(object, tag, parent) {
	    var hVal, location, size, wVal, xLayout, xVal, yLayout, yVal;
	    xLayout = (tag.attributes.x_layout_mode || layoutModes.leftAddWidthFixed) | 0;
	    yLayout = (tag.attributes.y_layout_mode || layoutModes.leftAddWidthFixed) | 0;
	    xVal = (tag.attributes.x_val || 0) - 0;
	    yVal = (tag.attributes.y_val || 0) - 0;
	    wVal = (tag.attributes.w_val || 0) - 0;
	    hVal = (tag.attributes.h_val || 0) - 0;
	    location = {};
	    size = {};
	    this.decodeHorizontalLinearLayout(object, xLayout, xVal, wVal, location, size);
	    this.decodeVerticalLinearLayout(object, yLayout, yVal, hVal, location, size);
	    object.location = location;
	    return object.size = size;
	  };

	  V1Loader.prototype.setCompositeMode = function(object, mode) {
	    if (!supportedCompositeModes[compositeModes[mode]]) {
	      this.log("WARNING: unknown composite mode: " + mode);
	    }
	    return object.compositeMode = supportedCompositeModes[compositeModes[mode]] || "normal";
	  };

	  V1Loader.prototype.createElementFromTag = function(tag, parent) {
	    var children, k, object, ref, tagKey, userProperties, v;
	    if (parent == null) {
	      parent = null;
	    }
	    object = this.createElement(tag);
	    object.axis = point(tag.attributes.handle || point(.5, .5));
	    this.decodeLayout(object, tag, parent);
	    userProperties = {};
	    ref = tag.attributes;
	    for (k in ref) {
	      v = ref[k];
	      switch (k) {
	        case "name":
	          object.name = v;
	          break;
	        case "matrix":
	          object.elementToParentMatrix = matrix(v);
	          break;
	        case "art_engine_version":
	          break;
	        case "kimi_editor_version":
	          break;
	        case "composite_mode":
	          this.setCompositeMode(object, v);
	          break;
	        case "drop_in_enabled":
	          userProperties.dropInEnabled = true;
	          break;
	        case "lock_mode":
	          break;
	        case "handle":
	        case "w_val":
	        case "h_val":
	        case "x_val":
	        case "y_val":
	        case "x_layout_mode":
	        case "y_layout_mode":
	        case "stack_mode":
	          break;
	        default:
	          tagKey = tag.name + ":" + k;
	          switch (tagKey) {
	            case "art_file:bitmaps":
	            case "art_bitmap:bitmap_id":
	              break;
	            default:
	              userProperties[lowerCamelCase(k)] = v.toString();
	              this.log("WARNING: unknown tag:attribute: " + tagKey + " (ignored)");
	          }
	      }
	    }
	    object.userProperties = userProperties;
	    if (children = tag.tags.children) {
	      this.populateChildrenFromTag(object, children);
	    }
	    return object;
	  };

	  return V1Loader;

	})(BaseObject);


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(229);


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var Xbd;

	module.exports = Xbd = __webpack_require__(230);

	Xbd.Dictionary = __webpack_require__(232);

	Xbd.Tag = __webpack_require__(233);

	Xbd.Xbd = __webpack_require__(234);

	Xbd.finishLoad(["Dictionary", "Tag", "Xbd"]);


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(231);

	module.exports = Art.Xbd || (Art.Xbd = (function(superClass) {
	  extend(Xbd, superClass);

	  function Xbd() {
	    return Xbd.__super__.constructor.apply(this, arguments);
	  }

	  Xbd.namespace = Art;

	  Xbd.namespacePath = "Neptune.Art.Xbd";

	  return Xbd;

	})(Neptune.Base));

	Art.addNamespace(Art.Xbd);


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, Dictionary, binary, stream;

	Binary = __webpack_require__(11).Binary;

	binary = Binary.binary;

	stream = Binary.stream;

	module.exports = Dictionary = (function() {
	  Dictionary.parse = function(stream, name) {
	    var encoded_dictionary, lengths, num_entries, strings;
	    encoded_dictionary = stream.read_asi_string();
	    num_entries = encoded_dictionary.read_asi();
	    lengths = [];
	    while (num_entries--) {
	      lengths.push(encoded_dictionary.read_asi());
	    }
	    strings = lengths.map(function(len) {
	      return encoded_dictionary.read(len);
	    });
	    return new Dictionary(strings, name);
	  };

	  function Dictionary(strings, name) {
	    this.strings = strings;
	    this.name = name;
	  }

	  Dictionary.prototype.read_string = function(stream) {
	    var id, string;
	    id = stream.read_asi();
	    string = this.strings[id];
	    if (!string) {
	      throw "string id(" + id + ") not in " + this.name + " dictionary. keys = '" + (Element.keys(this.strings)) + "'";
	    }
	    return string;
	  };

	  return Dictionary;

	})();


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, Tag, Xbd, binary, stream,
	  slice = [].slice;

	Binary = __webpack_require__(11).Binary;

	Xbd = __webpack_require__(230);

	binary = Binary.binary;

	stream = Binary.stream;

	module.exports = Tag = (function() {
	  Tag.parse = function(stream, tagsd, attrsd, valuesd) {
	    var attr_data, attributes, n, name, name1, subTag, tag_data, tags, v;
	    tag_data = stream.read_asi_string();
	    name = tagsd.read_string(tag_data).toString();
	    attr_data = tag_data.read_asi_string();
	    attributes = null;
	    while (!attr_data.done()) {
	      if (!attributes) {
	        attributes = {};
	      }
	      n = attrsd.read_string(attr_data).toString();
	      v = valuesd.read_string(attr_data);
	      attributes[n] = v;
	    }
	    tags = [];
	    while (!tag_data.done()) {
	      subTag = Xbd.Tag.parse(tag_data, tagsd, attrsd, valuesd);
	      tags.push(subTag);
	      tags[name1 = subTag.name] || (tags[name1] = subTag);
	    }
	    return new Xbd.Tag(name, attributes, tags);
	  };

	  function Tag(name, attributes, tags) {
	    if (attributes == null) {
	      attributes = {};
	    }
	    if (tags == null) {
	      tags = [];
	    }
	    this.name = name;
	    this.attributes = attributes;
	    if (tags instanceof Function) {
	      this.tags = [];
	      tags(this);
	    } else {
	      this.tags = tags;
	    }
	  }

	  Tag.prototype.add = function() {
	    var args;
	    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
	    return this.tags.push((function(func, args, ctor) {
	      ctor.prototype = func.prototype;
	      var child = new ctor, result = func.apply(child, args);
	      return Object(result) === result ? result : child;
	    })(Xbd.Tag, args, function(){}));
	  };

	  Tag.prototype.tag = function(name) {
	    var i, len, ref, tag;
	    ref = this.tags;
	    for (i = 0, len = ref.length; i < len; i++) {
	      tag = ref[i];
	      if (tag.name === name) {
	        return tag;
	      }
	    }
	    return null;
	  };

	  Tag.prototype.decode_attribute_values = function(func) {
	    var i, k, len, ref, ref1, results, t, v;
	    ref = this.attributes;
	    for (k in ref) {
	      v = ref[k];
	      this.attributes[k] = func(v, k, this.name);
	    }
	    ref1 = this.tags;
	    results = [];
	    for (i = 0, len = ref1.length; i < len; i++) {
	      t = ref1[i];
	      results.push(t.decode_attribute_values(func));
	    }
	    return results;
	  };

	  Tag.prototype.toString = function() {
	    return this.toXml("  ");
	  };

	  Tag.prototype.attributesXml = function() {
	    var k, out, v;
	    out = (function() {
	      var ref, results;
	      ref = this.attributes;
	      results = [];
	      for (k in ref) {
	        v = ref[k];
	        results.push(k + "='" + v + "'");
	      }
	      return results;
	    }).call(this);
	    return out.join(" ");
	  };

	  Tag.prototype.tagsXml = function(indent) {
	    var out;
	    out = this.tags.map(function(tag) {
	      return tag.toXml(indent);
	    });
	    return Xbd.indent(out.join("\n"), indent);
	  };

	  Tag.prototype.toXml = function(indent) {
	    var attr_xml;
	    if (indent == null) {
	      indent = "";
	    }
	    attr_xml = "";
	    if (this.attributes && (attr_xml = this.attributesXml())) {
	      attr_xml = " " + attr_xml;
	    }
	    if (this.tags.length === 0) {
	      return "<" + this.name + attr_xml + "/>";
	    } else {
	      return "<" + this.name + attr_xml + ">\n" + (this.tagsXml(indent)) + "\n</" + this.name + ">";
	    }
	  };

	  return Tag;

	})();


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	var Binary, Dictionary, Tag, Xbd, stream;

	Binary = __webpack_require__(11).Binary;

	stream = Binary.stream;

	Tag = __webpack_require__(233);

	Dictionary = __webpack_require__(232);

	module.exports = Xbd = __webpack_require__(230);

	Xbd.indent = function(str, indentStr) {
	  return indentStr + str.split("\n").join("\n" + indentStr);
	};

	Xbd.parse = function(input) {
	  var attrsd, header, header_should_match, tagsd, valuesd;
	  input = stream(input);
	  header_should_match = "SBDXML\x01\x00";
	  header = input.read(header_should_match.length);
	  tagsd = Xbd.Dictionary.parse(input, "tag names");
	  attrsd = Xbd.Dictionary.parse(input, "attribute names");
	  valuesd = Xbd.Dictionary.parse(input, "attribute values");
	  return Xbd.Tag.parse(input, tagsd, attrsd, valuesd);
	};


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(82);

	module.exports = __webpack_require__(236);


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	var React;

	module.exports = React = __webpack_require__(237);

	React.Aim = __webpack_require__(239);

	React.All = __webpack_require__(243);

	React.Component = __webpack_require__(244);

	React.HotStyleProps = __webpack_require__(249);

	React.ReactArtEngineEpoch = __webpack_require__(242);

	React.VirtualElement = __webpack_require__(240);

	React.VirtualNode = __webpack_require__(241);

	React.finishLoad(["Aim", "All", "Component", "HotStyleProps", "ReactArtEngineEpoch", "VirtualElement", "VirtualNode"]);


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(238);

	module.exports = Art.React || (Art.React = (function(superClass) {
	  extend(React, superClass);

	  function React() {
	    return React.__super__.constructor.apply(this, arguments);
	  }

	  React.namespace = Art;

	  React.namespacePath = "Neptune.Art.React";

	  return React;

	})(Neptune.Base));

	Art.addNamespace(Art.React);


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	var Aim, ArtEngineCore, Foundation, VirtualElement, bound, classForElement, createVirtualElementFactory, elementClassName, elementClassNames, elementFactory, i, len, log, max, min, ref;

	Foundation = __webpack_require__(11);

	VirtualElement = __webpack_require__(240);

	log = Foundation.log;

	createVirtualElementFactory = VirtualElement.createVirtualElementFactory;

	classForElement = (ArtEngineCore = Neptune.Art.Engine.Core) ? ((ref = ArtEngineCore.ElementFactory, elementFactory = ref.elementFactory, ref), function(e) {
	  var klass;
	  if (!(klass = elementFactory.classForElement(e))) {
	    console.error("Could not find Class for Element: " + e);
	  }
	  return klass;
	}) : function(e) {
	  return e;
	};

	elementClassNames = "BitmapElement BlurElement CanvasElement ShapeElement Element FillElement OutlineElement PagingScrollElement RectangleElement ShadowElement TextElement TextInput".split(/\s+/);

	module.exports = Aim = (function() {
	  function Aim() {}

	  Aim.addElement = function(elementClassName) {
	    return Aim[elementClassName] || (Aim[elementClassName] = createVirtualElementFactory(classForElement(elementClassName)));
	  };

	  return Aim;

	})();

	for (i = 0, len = elementClassNames.length; i < len; i++) {
	  elementClassName = elementClassNames[i];
	  Aim.addElement(elementClassName);
	}

	Aim.Bitmap = Aim.BitmapElement;

	Aim.Fill = Aim.FillElement;

	Aim.Outline = Aim.OutlineElement;

	Aim.Rectangle = Aim.RectangleElement;

	Aim.Blur = Aim.BlurElement;

	Aim.Shadow = Aim.ShadowElement;


	/*
	SBD: I'm not sure where best to put getNextPageIndexes, so I'm putting it here for now.
	It is potentially needed by any react component using PagingScrollElement. I'd put it on the
	actual PagingScrollElement Element class, but that class isn't loaded when doing React in
	a web-worker.

	getNextPageIndexes could be reusable with any PagingScrollElement where pages are indexed
	and the maxPageIndex and minPageIndex are known. It's even OK if maxPageIndex and
	minPageIndex change - as long as they don't change too much per frame.

	IN:
	  lastPageIndexes =
	      firstPageIndex: 0
	      lastPageIndex:  2

	    essentially, this is the output from last call. For the first call, do 0 and 2

	  currentGeometry =
	      suggestedPagesBeforeFocusedPage: 1
	      suggestedPagesAfterFocusedPage:  1

	    set from currentGeometry from the last onScollChange event

	  focusedPageIndex = integer;       the current focused page index
	  maxKeep =          integer >= 0;  see below
	  maxPrerender =     integer >= 0;  see below
	  maxPageIndex =     integer;       see below
	  minPageIndex =     0 (integer);   see below

	OUT:
	  null if nothing changed, else, returns the next range of pages to render for PagingScrollElement:
	    firstPageIndex: integer
	    lastPageIndex:  integer

	Supports:
	  minPageIndex / maxPageIndex: output page indexes will be: minPageIndex <= output page index <= maxPageIndex
	  maxKeep: maximum number of already rendered pages to keep even though they are no longer
	    in the suggested + prerender window
	  maxPrerender: in addition to the suggestedPages from PagingScrollElement, render this many extra pages.
	    This is useful if the pages trigger external network requests which ideally would be complete before
	    the page is displayed on screen. If pages are showing up that are not fully loaded, increase this
	    value.

	    Down-sides:
	      increased initial render time
	      increased memory use

	    Up-sides:
	      should not significantly effect performance after initial render, even during scrolling
	      gives external data requests triggered by page renders more time to complete before the page is onscreen
	 */

	max = Foundation.max, min = Foundation.min, bound = Foundation.bound;

	Aim.PagingScrollElement.getNextPageIndexes = function(lastPageIndexes, suggestedPageSpread, focusedPageIndex, maxKeep, maxPrerender, maxPageIndex, minPageIndex) {
	  var firstPageIndex, lastPageIndex, newFirstPageIndex, newLastPageIndex;
	  if (minPageIndex == null) {
	    minPageIndex = 0;
	  }
	  firstPageIndex = lastPageIndexes.firstPageIndex, lastPageIndex = lastPageIndexes.lastPageIndex;
	  newFirstPageIndex = focusedPageIndex - suggestedPageSpread - maxPrerender;
	  newLastPageIndex = focusedPageIndex + suggestedPageSpread + maxPrerender;
	  firstPageIndex = max(minPageIndex, bound(newFirstPageIndex - maxKeep, firstPageIndex, newFirstPageIndex));
	  lastPageIndex = min(maxPageIndex, bound(newLastPageIndex, lastPageIndex, newLastPageIndex + maxKeep));
	  if (firstPageIndex === lastPageIndexes.firstPageIndex && lastPageIndex === lastPageIndexes.lastPageIndex) {
	    return null;
	  } else {
	    return {
	      firstPageIndex: firstPageIndex,
	      lastPageIndex: lastPageIndex
	    };
	  }
	};


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(241)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, VirtualNode) {
	  var ArtEngineCore, BaseObject, Browser, CanvasElement, Element, Promise, Rectangle, VirtualElement, VirtualElementLocalBase, VirtualElementRemoteBase, compactFlatten, errorElementProps, globalCount, inspect, isPlainObject, isWebWorker, keepIfRubyTrue, log, merge, objectDiff, propsEq, shallowClone, stackTime, time;
	  log = Foundation.log, compactFlatten = Foundation.compactFlatten, globalCount = Foundation.globalCount, time = Foundation.time, stackTime = Foundation.stackTime, BaseObject = Foundation.BaseObject, shallowClone = Foundation.shallowClone, inspect = Foundation.inspect, keepIfRubyTrue = Foundation.keepIfRubyTrue, stackTime = Foundation.stackTime, isPlainObject = Foundation.isPlainObject, compactFlatten = Foundation.compactFlatten, isWebWorker = Foundation.isWebWorker, objectDiff = Foundation.objectDiff, Browser = Foundation.Browser, merge = Foundation.merge, Promise = Foundation.Promise;
	  propsEq = VirtualNode.propsEq;
	  CanvasElement = null;
	  Element = null;
	  Rectangle = "Rectangle";
	  if (ArtEngineCore = Neptune.Art.Engine.Core) {
	    Rectangle = Neptune.Art.Engine.Elements.Shapes.Rectangle;
	    CanvasElement = ArtEngineCore.CanvasElement, Element = ArtEngineCore.Element;
	  }
	  errorElementProps = {
	    key: "ART_REACT_ERROR_CREATING_CHILD_PLACEHOLDER",
	    color: "orange"
	  };
	  VirtualElementLocalBase = (function(superClass) {
	    extend(VirtualElementLocalBase, superClass);

	    function VirtualElementLocalBase() {
	      return VirtualElementLocalBase.__super__.constructor.apply(this, arguments);
	    }

	    VirtualElementLocalBase.getter({
	      elementClassName: function() {
	        return this.elementClass.name;
	      }
	    });

	    VirtualElementLocalBase.prototype._updateElementProps = function(newProps) {
	      var addedOrChanged, removed;
	      addedOrChanged = (function(_this) {
	        return function(k, v) {
	          return _this.element.setProperty(k, v);
	        };
	      })(this);
	      removed = (function(_this) {
	        return function(k, v) {
	          return _this.element.resetProperty(k);
	        };
	      })(this);
	      return this._updateElementPropsHelper(newProps, addedOrChanged, removed);
	    };

	    VirtualElementLocalBase.prototype._setElementChildren = function(childElements) {
	      return this.element.setChildren(childElements);
	    };

	    VirtualElementLocalBase.prototype._newElement = function(elementClass, props, childElements, bindToElementOrNewCanvasElementProps) {
	      var element;
	      element = new elementClass(props, childElements);
	      if (bindToElementOrNewCanvasElementProps) {
	        if (bindToElementOrNewCanvasElementProps instanceof Element) {
	          bindToElementOrNewCanvasElementProps.addChild(element);
	        } else {
	          props = merge(bindToElementOrNewCanvasElementProps, {
	            webgl: Browser.Parse.query().webgl === "true",
	            children: [element]
	          });
	          new CanvasElement(props);
	        }
	      }
	      element.creator = this;
	      return element;
	    };


	    /*
	    execute the function 'f' on the Art.Engine Element associated with this VirtualElement.
	    IN: f = (Art.Engine.Core.Element) -> x
	    OUT: Promise returning x
	     */

	    VirtualElementLocalBase.prototype.withElement = function(f) {
	      return new Promise(function(resolve) {
	        return resolve(f(this.element));
	      });
	    };

	    return VirtualElementLocalBase;

	  })(VirtualNode);
	  VirtualElementRemoteBase = (function(superClass) {
	    extend(VirtualElementRemoteBase, superClass);

	    function VirtualElementRemoteBase() {
	      VirtualElementRemoteBase.__super__.constructor.apply(this, arguments);
	      this._sendRemoteQueuePending = false;
	    }

	    VirtualElementRemoteBase.getter({
	      elementClassName: function() {
	        return this.elementClass;
	      }
	    });

	    VirtualElementRemoteBase.prototype._setElementChildren = function(childElements) {
	      remote.updateElement(this.element, {
	        children: childElements
	      });
	      return this._sendRemoteQueue();
	    };

	    VirtualElementRemoteBase.prototype._newElement = function(elementClass, props, childElements, newCanvasElementProps) {
	      var remoteId;
	      remoteId = remote.newElement(this.elementClass, merge(props, {
	        children: childElements
	      }), newCanvasElementProps);
	      this._sendRemoteQueue();
	      return remoteId;
	    };

	    VirtualElementRemoteBase.prototype._updateElementProps = function(newProps) {
	      var addedOrChanged, changed, removed, resetProps, setProps;
	      setProps = {};
	      resetProps = [];
	      addedOrChanged = (function(_this) {
	        return function(k, v) {
	          return setProps[k] = v;
	        };
	      })(this);
	      removed = (function(_this) {
	        return function(k, v) {
	          return resetProps.push(k);
	        };
	      })(this);
	      if (changed = this._updateElementPropsHelper(newProps, addedOrChanged, removed)) {
	        remote.updateElement(this.element, setProps, resetProps);
	        this._sendRemoteQueue();
	      }
	      return changed;
	    };

	    VirtualElementRemoteBase.prototype._sendRemoteQueue = function() {
	      if (!this._sendRemoteQueuePending) {
	        this._sendRemoteQueuePending = true;
	        return this.onNextReady((function(_this) {
	          return function() {
	            remote.sendRemoteQueue();
	            return _this._sendRemoteQueuePending = false;
	          };
	        })(this));
	      }
	    };


	    /*
	    execute the function 'f' on the Art.Engine Element associated with this VirtualElement.
	    NOTE: runs in the main thread. 'f' is serialized, so it loses all closure state.
	    IN: f = (Art.Engine.Core.Element) -> x
	    OUT: Promise returning x
	    
	    TODO: we could allow additional arguments to be passed which would in turn be
	    passed to 'f' on when invoked on the main thread:
	    
	      withElement: (f, args...) -> remote.evalWithElement @element, f, args
	     */

	    VirtualElementRemoteBase.prototype.withElement = function(f) {
	      return remote.evalWithElement(this.element, f);
	    };

	    return VirtualElementRemoteBase;

	  })(VirtualNode);
	  return VirtualElement = (function(superClass) {
	    var emptyProps;

	    extend(VirtualElement, superClass);

	    VirtualElement.created = 0;

	    VirtualElement.instantiated = 0;

	    VirtualElement.createVirtualElementFactory = function(elementClass) {
	      return VirtualNode.factoryFactory(function(props, children) {
	        return new VirtualElement(elementClass, props, children);
	      });
	    };

	    emptyProps = {};

	    function VirtualElement(elementClass, props, children) {
	      VirtualElement.created++;
	      this.elementClass = elementClass;
	      VirtualElement.__super__.constructor.call(this, props || emptyProps);
	      this.children = this._validateChildren(compactFlatten(children, keepIfRubyTrue));
	    }

	    VirtualElement.getter({
	      inspectedName: function() {
	        return "<React.VirtualElement:" + this.uniqueId + " elementClass: " + this.elementClassName + ", props: " + (inspect(this.props)) + ">";
	      }
	    });

	    VirtualElement.prototype.toCoffeescript = function(indent) {
	      var child, k, subIndent, v;
	      if (indent == null) {
	        indent = "";
	      }
	      return compactFlatten([
	        "" + indent + this.elementClassName, (function() {
	          var ref, results;
	          if (Object.keys(this.props).length === 0) {
	            return "{}";
	          } else {
	            ref = this.props;
	            results = [];
	            for (k in ref) {
	              v = ref[k];
	              results.push("\n  " + indent + k + ": " + (inspect(v)));
	            }
	            return results;
	          }
	        }).call(this), (function() {
	          var j, len, ref, ref1, results;
	          if (((ref = this.children) != null ? ref.length : void 0) > 0) {
	            subIndent = indent + "  ";
	            ref1 = this.children;
	            results = [];
	            for (j = 0, len = ref1.length; j < len; j++) {
	              child = ref1[j];
	              results.push("\n" + (child.toCoffeescript(subIndent)));
	            }
	            return results;
	          }
	        }).call(this)
	      ]).join('');
	    };

	    VirtualElement.prototype._findOldChildToUpdate = function(child) {
	      var i, j, len, oldChild, oldChildren;
	      oldChildren = this.children;
	      for (i = j = 0, len = oldChildren.length; j < len; i = ++j) {
	        oldChild = oldChildren[i];
	        if (oldChild) {
	          if (oldChild._canUpdateFrom(child)) {
	            oldChildren[i] = null;
	            return oldChild;
	          }
	        }
	      }
	      return null;
	    };

	    VirtualElement.prototype._canUpdateFrom = function(b) {
	      return this.elementClass === b.elementClass && this.key === b.key;
	    };


	    /*
	    _fastUpdateChildren
	      if no Nodes were added, removed or changed "types"
	        _updateFrom newChild for all oldChildren
	        return true
	      else
	         * use _slowUpdateChildren instead
	        return false
	     */

	    VirtualElement.prototype._fastUpdateChildren = function(newChildren) {
	      var i, j, l, len, len1, oldChild, oldChildren;
	      oldChildren = this.children;
	      if (oldChildren.length !== newChildren.length) {
	        return false;
	      }
	      for (i = j = 0, len = oldChildren.length; j < len; i = ++j) {
	        oldChild = oldChildren[i];
	        if (!oldChild._canUpdateFrom(newChildren[i])) {
	          return false;
	        }
	      }
	      for (i = l = 0, len1 = oldChildren.length; l < len1; i = ++l) {
	        oldChild = oldChildren[i];
	        oldChild._updateFrom(newChildren[i]);
	      }
	      return true;
	    };

	    VirtualElement.prototype._slowUpdateChildren = function(newChildren) {
	      var child, childElements, finalChild, i, j, len, newChild, oldChild, oldChildren;
	      oldChildren = this.children;
	      childElements = (function() {
	        var j, len, results;
	        results = [];
	        for (i = j = 0, len = newChildren.length; j < len; i = ++j) {
	          newChild = newChildren[i];
	          finalChild = (oldChild = this._findOldChildToUpdate(newChild)) ? newChildren[i] = oldChild._updateFrom(newChild) : newChild._instantiate(this._parentComponent);
	          results.push(finalChild.element);
	        }
	        return results;
	      }).call(this);
	      for (j = 0, len = oldChildren.length; j < len; j++) {
	        child = oldChildren[j];
	        if (child) {
	          child._unmount();
	        }
	      }
	      this._setElementChildren(childElements);
	      return this.children = newChildren;
	    };


	    /*
	    returns true if children changed
	      if true, element.setChildren was called
	      if false, the children individually may change, but
	        this element's children are the same set
	     */

	    VirtualElement.prototype._updateChildren = function(newChildren) {
	      if (this._fastUpdateChildren(newChildren)) {
	        return false;
	      } else {
	        this._slowUpdateChildren(newChildren);
	        return true;
	      }
	    };

	    VirtualElement.prototype._unmount = function() {
	      var child, j, len, ref, results;
	      ref = this.children;
	      results = [];
	      for (j = 0, len = ref.length; j < len; j++) {
	        child = ref[j];
	        results.push(child._unmount());
	      }
	      return results;
	    };

	    VirtualElement.prototype._updateFrom = function(newNode) {
	      var childrenChanged, propsChanged;
	      VirtualElement.__super__._updateFrom.apply(this, arguments);
	      if (!this.element) {
	        return;
	      }
	      propsChanged = this._updateElementProps(newNode.props);
	      childrenChanged = this._updateChildren(newNode.children);
	      return this;
	    };


	    /*
	    create element or componentInstance
	    fully generate Virtual-AIM subbranch
	    fully create all AIM elements
	    returns this
	     */

	    VirtualElement.prototype._instantiate = function(parentComponent, bindToElementOrNewCanvasElementProps) {
	      var c, childElements, e, i;
	      VirtualElement.__super__._instantiate.apply(this, arguments);
	      VirtualElement.instantiated++;
	      childElements = (function() {
	        var error, j, len, ref, results;
	        ref = this.children;
	        results = [];
	        for (i = j = 0, len = ref.length; j < len; i = ++j) {
	          c = ref[i];
	          try {
	            c._instantiate(parentComponent);
	            results.push(c.element);
	          } catch (error) {
	            e = error;
	            console.error(e.stack);
	            console.error("Error instantiating child:\n  childIndex " + i + "\n  error: " + e + "\n  child: " + c + "\n  elementClass: " + this.elementClassName + "\n  props: " + (inspect(this.props)));
	            results.push(this._newErrorElement());
	          }
	        }
	        return results;
	      }).call(this);
	      this.element = this._newElement(this.elementClass, this.props, childElements, bindToElementOrNewCanvasElementProps);
	      return this;
	    };

	    VirtualElement.prototype._newErrorElement = function() {
	      return this._newElement(Rectangle, errorElementProps);
	    };

	    VirtualElement.prototype._updateElementPropsHelper = function(newProps, addedOrChanged, removed) {
	      var newPropsLength, noChange, noChangeCount, oldProps, oldPropsLength;
	      oldPropsLength = this.getPropsLength();
	      oldProps = this.props;
	      noChangeCount = 0;
	      noChange = function() {
	        return noChangeCount++;
	      };
	      newPropsLength = this.setPropsLength(objectDiff(newProps, oldProps, addedOrChanged, removed, addedOrChanged, noChange, propsEq));
	      if (newPropsLength === noChangeCount && oldPropsLength === newPropsLength) {
	        return false;
	      } else {
	        this.props = newProps;
	        return true;
	      }
	    };

	    return VirtualElement;

	  })((isWebWorker ? VirtualElementRemoteBase : VirtualElementLocalBase));
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  slice = [].slice;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(242)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, ReactArtEngineEpoch) {
	  var BaseObject, VirtualNode, compact, deepEach, emptyObject, flatten, globalCount, inspect, isObject, isPlainObject, keepIfRubyTrue, log, objectKeyCount, plainObjectsDeepEq, reactArtEngineEpoch, shallowClone;
	  log = Foundation.log, compact = Foundation.compact, globalCount = Foundation.globalCount, flatten = Foundation.flatten, BaseObject = Foundation.BaseObject, shallowClone = Foundation.shallowClone, inspect = Foundation.inspect, objectKeyCount = Foundation.objectKeyCount, isObject = Foundation.isObject, deepEach = Foundation.deepEach, isPlainObject = Foundation.isPlainObject, keepIfRubyTrue = Foundation.keepIfRubyTrue, plainObjectsDeepEq = Foundation.plainObjectsDeepEq;
	  reactArtEngineEpoch = ReactArtEngineEpoch.reactArtEngineEpoch;
	  emptyObject = {};
	  return VirtualNode = (function(superClass) {
	    var deepArgsProcessing, propsEq;

	    extend(VirtualNode, superClass);

	    VirtualNode.propsEq = propsEq = plainObjectsDeepEq;

	    VirtualNode.prototype.onNextReady = function(f) {
	      return reactArtEngineEpoch.onNextReady(f);
	    };

	    deepArgsProcessing = function(array, children) {
	      var el, i, len;
	      for (i = 0, len = array.length; i < len; i++) {
	        el = array[i];
	        if (el) {
	          if (el.constructor === Array) {
	            deepArgsProcessing(el, children);
	          } else {
	            children.push(el);
	          }
	        }
	      }
	      return null;
	    };

	    VirtualNode.factoryFactory = function(factory) {
	      var ret;
	      ret = function() {
	        var children, el, i, k, len, oneProps, props, v;
	        oneProps = null;
	        props = null;
	        children = [];
	        for (i = 0, len = arguments.length; i < len; i++) {
	          el = arguments[i];
	          if (el) {
	            switch (el.constructor) {
	              case Object:
	                if (oneProps) {
	                  props = {};
	                  for (k in oneProps) {
	                    v = oneProps[k];
	                    props[k] = v;
	                  }
	                  oneProps = null;
	                }
	                if (props) {
	                  for (k in el) {
	                    v = el[k];
	                    props[k] = v;
	                  }
	                } else {
	                  oneProps = el;
	                }
	                break;
	              case Array:
	                deepArgsProcessing(el, children);
	                break;
	              default:
	                children.push(el);
	            }
	          }
	        }
	        props || (props = oneProps || {});
	        return factory(props, children);
	      };
	      ret.instantiateAsTopComponent = function(spec, options) {
	        return ret(spec).instantiateAsTopComponent(options);
	      };
	      return ret;
	    };

	    VirtualNode.assignRefsTo = null;

	    function VirtualNode(props) {
	      if (props == null) {
	        props = emptyObject;
	      }
	      this._updateTarget = null;
	      this._parentComponent = null;
	      this.key = props.key;
	      this.props = props;
	      this._propsLength = -1;
	      this.element = null;
	      VirtualNode._assignRefs(this);
	    }

	    VirtualNode.getter({
	      propsLength: function() {
	        if (this._propsLength >= 0) {
	          return this._propsLength;
	        } else {
	          return this._propsLength = objectKeyCount(this.props);
	        }
	      }
	    });

	    VirtualNode.setter({
	      propsLength: function(v) {
	        return this._propsLength = v;
	      }
	    });


	    /*
	    Evaluate "f" in the thread the Element exists in.
	    
	    IN: (element) -> plainObjects
	    OUT: promise returning function's plain-object-result
	    
	     * TODO: add worker support
	     */

	    VirtualNode.prototype.withElement = function(f) {
	      return new Promise((function(_this) {
	        return function(resolve) {
	          return resolve(f(_this.element));
	        };
	      })(this));
	    };


	    /*
	    Lighter-weight than "withElement"
	    
	    IN:
	      method: string
	      args: 0 or more additional arguments
	    OUT: promise returning function's plain-object-result
	    
	    Equivelent to:
	      @withElement (element) -> element[method] args...
	     */

	    VirtualNode.prototype.sendToElement = function() {
	      var args, method;
	      method = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	      return new Promise((function(_this) {
	        return function(resolve) {
	          var ref;
	          return resolve((ref = _this.element)[method].apply(ref, args));
	        };
	      })(this));
	    };

	    VirtualNode._separateConstructionParams = function(args, propsOut, childrenOut) {
	      return deepEach(args, function(obj) {
	        var k, results, v;
	        if (isPlainObject(obj)) {
	          results = [];
	          for (k in obj) {
	            v = obj[k];
	            results.push(propsOut[k] = v);
	          }
	          return results;
	        } else if (keepIfRubyTrue(obj)) {
	          return childrenOut.push(obj);
	        }
	      });
	    };

	    VirtualNode._assignRefs = function(node) {
	      var key;
	      if ((key = node.key) && this.assignRefsTo) {
	        if (this.assignRefsTo[key]) {
	          return console.warn("WARNING: Duplicate key found. This MUST be fixed for correct operation.\n  key: " + (inspect(key)) + "\n  VirtualNode: " + node.inspectedName);
	        } else {
	          return this.assignRefsTo[key] = node;
	        }
	      }
	    };

	    VirtualNode.prototype._validateChildren = function(children) {
	      var child, i, len;
	      if (!children) {
	        return children;
	      }
	      for (i = 0, len = children.length; i < len; i++) {
	        child = children[i];
	        if (!(child instanceof VirtualNode)) {
	          console.warn({
	            "invalid VirtualNode child": child,
	            parent: this
	          });
	          if (isObject(child)) {
	            console.warn("Hint: Did you place properties AFTER a child element?");
	          }
	          throw new Error("VirtualNode child is not a VirtualNode.\ninvalid child: " + (inspect(child)) + "\nparent: " + this.inspectedName);
	        }
	      }
	      return children;
	    };

	    VirtualNode.prototype._propsChanged = function(virtualNode) {
	      var _propsLength, k, newProps, ref, v;
	      newProps = virtualNode.props;
	      _propsLength = 0;
	      ref = this.props;
	      for (k in ref) {
	        v = ref[k];
	        _propsLength++;
	        if (!propsEq(v, newProps[k])) {
	          return true;
	        }
	      }
	      this._propsLength = _propsLength;
	      return _propsLength !== virtualNode.getPropsLength();
	    };

	    VirtualNode.prototype._updateFrom = function(sourceNode) {
	      return sourceNode._updateTarget = this;
	    };

	    VirtualNode.prototype._canUpdateFrom = function(sourceNode) {
	      return false;
	    };

	    VirtualNode.prototype._instantiate = function(parentComponent, bindToElementOrNewCanvasElementProps) {
	      this._parentComponent = parentComponent;
	      return this;
	    };

	    return VirtualNode;

	  })(BaseObject);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	var ArtEngineCore, BaseObject, Epoch, Foundation, GlobalEpochCycle, ReactArtEngineEpoch, clone, globalCount, inspect, isWebWorker, log, merge, peek, stackTime, timeout,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	log = Foundation.log, merge = Foundation.merge, clone = Foundation.clone, peek = Foundation.peek, inspect = Foundation.inspect, timeout = Foundation.timeout, BaseObject = Foundation.BaseObject, Epoch = Foundation.Epoch, globalCount = Foundation.globalCount, stackTime = Foundation.stackTime, isWebWorker = Foundation.isWebWorker, timeout = Foundation.timeout;

	module.exports = ReactArtEngineEpoch = (function(superClass) {
	  extend(ReactArtEngineEpoch, superClass);

	  function ReactArtEngineEpoch() {
	    return ReactArtEngineEpoch.__super__.constructor.apply(this, arguments);
	  }

	  ReactArtEngineEpoch.singletonClass();

	  ReactArtEngineEpoch.prototype.addChangingComponent = function(component) {
	    return this.queueItem(component);
	  };

	  ReactArtEngineEpoch.prototype.processEpochItems = function(changingComponents) {
	    return globalCount("ReactArtEngineEpoch processEpochItems", stackTime((function(_this) {
	      return function() {
	        var component, i, len, results;
	        results = [];
	        for (i = 0, len = changingComponents.length; i < len; i++) {
	          component = changingComponents[i];
	          results.push(component._applyPendingState());
	        }
	        return results;
	      };
	    })(this)));
	  };

	  return ReactArtEngineEpoch;

	})(Epoch);

	if (ArtEngineCore = Neptune.Art.Engine.Core) {
	  GlobalEpochCycle = ArtEngineCore.GlobalEpochCycle;
	  GlobalEpochCycle.singleton.includeReact(ReactArtEngineEpoch.singleton);
	}


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(237), __webpack_require__(244), __webpack_require__(242), __webpack_require__(239)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, React, Component, ReactArtEngineEpoch, Aim) {
	  var createAllClass, log, reactArtEngineEpoch, select;
	  log = Foundation.log, createAllClass = Foundation.createAllClass, select = Foundation.select;
	  reactArtEngineEpoch = ReactArtEngineEpoch.reactArtEngineEpoch;
	  return createAllClass(React, select(Component, "createAndInstantiateTopComponent", "createComponentFactory"), {
	    instantiateTopComponent: function(componentInstance, bindToElementOrNewCanvasElementProps) {
	      console.warn("React.instantiateTopComponent is DEPRICATED. Use: componentInstance.instantiateAsTopComponent");
	      return componentInstance.instantiateAsTopComponent(bindToElementOrNewCanvasElementProps);
	    },
	    onNextReady: function(callback) {
	      return reactArtEngineEpoch.onNextReady(callback);
	    }
	  }, Aim);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var ArtEngineCore, BaseObject, Component, Element, Foundation, GlobalEpochCycle, HotLoader, ReactArtEngineEpoch, StateEpoch, VirtualNode, arrayWithout, clone, compactFlatten, countStep, createWithPostCreate, fastBind, globalCount, globalEpochCycle, inspect, isArray, isFunction, isObject, isString, keepIfRubyTrue, log, merge, mergeInto, onNextStateEpochReady, reactArtEngineEpoch, runHot, shallowClone, slice, stackTime, stateEpoch, time, timePerformance, upperCamelCase,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

	Foundation = __webpack_require__(11);

	VirtualNode = __webpack_require__(241);

	Element = __webpack_require__(239).Element;

	ReactArtEngineEpoch = __webpack_require__(242);

	log = Foundation.log, merge = Foundation.merge, mergeInto = Foundation.mergeInto, clone = Foundation.clone, shallowClone = Foundation.shallowClone, inspect = Foundation.inspect, compactFlatten = Foundation.compactFlatten, keepIfRubyTrue = Foundation.keepIfRubyTrue, BaseObject = Foundation.BaseObject, fastBind = Foundation.fastBind, slice = Foundation.slice, isObject = Foundation.isObject, isString = Foundation.isString, isArray = Foundation.isArray, isFunction = Foundation.isFunction, globalCount = Foundation.globalCount, time = Foundation.time, stackTime = Foundation.stackTime, countStep = Foundation.countStep, createWithPostCreate = Foundation.createWithPostCreate, arrayWithout = Foundation.arrayWithout, upperCamelCase = Foundation.upperCamelCase;

	reactArtEngineEpoch = ReactArtEngineEpoch.reactArtEngineEpoch;

	HotLoader = __webpack_require__(245).HotLoader;

	runHot = HotLoader.runHot;

	if (ArtEngineCore = Neptune.Art.Engine.Core) {
	  StateEpoch = ArtEngineCore.StateEpoch, GlobalEpochCycle = ArtEngineCore.GlobalEpochCycle;
	  stateEpoch = StateEpoch.stateEpoch;
	  globalEpochCycle = GlobalEpochCycle.globalEpochCycle;
	  onNextStateEpochReady = function(f) {
	    return stateEpoch.onNextReady(f);
	  };
	  timePerformance = function(name, f) {
	    return globalEpochCycle.timePerformance(name, f);
	  };
	} else {
	  onNextStateEpochReady = function(f) {
	    return reactArtEngineEpoch.onNextReady(f);
	  };
	  timePerformance = function(name, f) {
	    return f();
	  };
	}


	/*
	React.js vs ReactArtEngine
	--------------------------

	Generaly, ReactArtEngine is designed to work just like React.js. There is
	some evolution, though, which I try to note below. -SBD

	ReactArtEngine: "Instantiation"
	-------------------------------

	This is not a concept in React.js. It isn't important to the client, but it
	is useful to understand in the implementation.

	In-short: an non-instantiated component only has properties. It doesn't have
	state and it isn't rendered. An instantiated component has state and gets
	rendered at least once.

	When a component is used in a render function, and with every re-render, it
	an instance-object is created with standard javascript "new ComponentType."
	However, that component instance is only a shell - it contains the
	properties passed into the constructor and nothing else.

	Once the entire render is done, the result is diffed against the current
	Virtual-AIM. The component instance is compared against existing components
	via the diff rules. If an existing, matching component exists, that
	component is updated and the new instance is discard. However, if an
	existing match doesn't exist, then the new component instance is
	"instantiated" and added to the virtual-Aim.

	TODO
	----

	I think I want to add a "lifecycle" method that Facebook.React doesn't have:

	  preprocessProps: (props) -> props

	This will allow us to apply default props and normalize props instead of the current
	method of storing normalized props in the state object. The current method is really awkward since
	you have to do this in two places - will receive props and getInitialState.

	QUESTIONS
	---------

	I just discovered it is possible, and useful, for a component to be rendered
	after it is unmounted. I don't think this is consistent with Facebook-React.

	Possible: if @setState is called after it is unmounted, it will trigger a
	render. This can happen in FluxComponents when a subscription updates.

	Useful: Why does this even make sense? Well, with Art.Engine we have
	removedAnimations. That means the element still exists even though it has been
	"removed." It exists until the animation completes. It is therefor useful to
	continue to receive updates from React, where appropriate, during that "sunset"
	time.

	Thoughts: I think this is OK, though this changes what "unmounted" means. I just
	fixed a bug where @state got altered without going through preprocessState first
	when state changes after the component was unmounted. How should I TEST this???
	 */

	module.exports = Component = (function(superClass) {
	  var defaultComponentDidMount, defaultComponentDidUpdate, defaultComponentWillMount, defaultComponentWillReceiveProps, defaultComponentWillUnmount, defaultComponentWillUpdate, defaultPreprocessProps, defaultPreprocessState, emptyArray, emptyProps, getModule, nonBindingFunctions, unknownModule;

	  extend(Component, superClass);

	  Component.created = 0;

	  Component.topComponentInstances = [];

	  Component.rerenderAll = function() {
	    var component, j, len, ref, results;
	    ref = this.topComponentInstances;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      component = ref[j];
	      results.push(component.rerenderAll());
	    }
	    return results;
	  };

	  Component.prototype.rerenderAll = function() {
	    var component, j, len, ref, results;
	    this._queueRerender();
	    ref = this.subComponents;
	    results = [];
	    for (j = 0, len = ref.length; j < len; j++) {
	      component = ref[j];
	      results.push(component.rerenderAll());
	    }
	    return results;
	  };

	  Component.createAndInstantiateTopComponent = function(spec) {
	    return Component.createComponentFactory(spec).instantiateAsTopComponent();
	  };

	  unknownModule = {};

	  Component.createComponentFactory = function(spec, BaseClass) {
	    var AnonymousComponent, _module, anonymousComponentName, componentClass;
	    if (BaseClass == null) {
	      BaseClass = Component;
	    }
	    componentClass = (function() {
	      if ((spec != null ? spec.prototype : void 0) instanceof Component) {
	        return spec;
	      } else if ((spec != null ? spec.constructor : void 0) === Object) {
	        _module = getModule(spec) || unknownModule;
	        _module.uniqueComponentNameId || (_module.uniqueComponentNameId = 1);
	        anonymousComponentName = "Anonymous" + (BaseClass.getClassName());
	        anonymousComponentName += "_" + (_module.uniqueComponentNameId++);
	        anonymousComponentName += _module.id ? "_Module" + _module.id : '_ModuleUnknown';
	        return AnonymousComponent = (function(superClass1) {
	          var k, v;

	          extend(AnonymousComponent, superClass1);

	          function AnonymousComponent() {
	            return AnonymousComponent.__super__.constructor.apply(this, arguments);
	          }

	          AnonymousComponent._name = anonymousComponentName;

	          for (k in spec) {
	            v = spec[k];
	            AnonymousComponent.prototype[k] = v;
	          }

	          return AnonymousComponent;

	        })(BaseClass);
	      } else {
	        throw new Error("Specification Object or class inheriting from Component required.");
	      }
	    }).call(this);
	    return createWithPostCreate(componentClass);
	  };

	  Component.getModule = getModule = function(spec) {
	    if (spec == null) {
	      spec = this.prototype;
	    }
	    return spec.module || spec.hotModule;
	  };

	  Component.getCanHotReload = function() {
	    var ref;
	    return (ref = this.getModule()) != null ? ref.hot : void 0;
	  };

	  Component.hotReload = function() {
	    return runHot(this.getModule(), (function(_this) {
	      return function(_moduleState) {
	        var base, instance, j, k, len, name, oldPrototype, ref, ref1, ref2, v;
	        _this._moduleState = _moduleState;
	        if (_this._moduleState) {
	          name = _this.getClassName();
	          if ((oldPrototype = (ref = _this._moduleState.prototypesToUpdate) != null ? ref[name] : void 0) && oldPrototype !== _this.prototype) {
	            log("Component.hotReload - have oldPrototype to update");
	            ref1 = _this.prototype;
	            for (k in ref1) {
	              v = ref1[k];
	              if (_this.prototype.hasOwnProperty(k)) {
	                oldPrototype[k] = v;
	              }
	            }
	            for (k in oldPrototype) {
	              v = oldPrototype[k];
	              if (!_this.prototype.hasOwnProperty(k) && oldPrototype.hasOwnProperty(k)) {
	                delete oldPrototype[k];
	              }
	            }
	            self.hotReload = _this;
	            console.log("Component.hotReload " + (_this.getClassName()) + ": updating instance bindings and hotReload them");
	            ref2 = _this._moduleState.hotInstances || [];
	            for (j = 0, len = ref2.length; j < len; j++) {
	              instance = ref2[j];
	              instance._bindFunctions();
	              try {
	                instance.componentDidHotReload();
	              } catch (undefined) {}
	            }
	            console.log("Component.hotReload " + (_this.getClassName()) + ": updating instance bindings done");
	          }
	          return ((base = _this._moduleState).prototypesToUpdate || (base.prototypesToUpdate = {}))[name] = oldPrototype || _this.prototype;
	        }
	      };
	    })(this));
	  };

	  Component.allComponents = {};

	  Component.postCreate = function() {
	    this.hotReload();
	    return this.toComponentFactory();
	  };

	  nonBindingFunctions = "getInitialState componentWillReceiveProps componentWillMount componentWillUnmount componentWillUpdate componentDidMount componentDidUpdate render".split(/\s+/);

	  Component.getBindList = function() {
	    if (this.hasOwnProperty("_bindList")) {
	      return this._bindList;
	    } else {
	      return this._bindList = this.detectBindList();
	    }
	  };

	  Component.detectBindList = function() {
	    var k, prototype, results, v;
	    prototype = this.prototype;
	    results = [];
	    for (k in prototype) {
	      v = prototype[k];
	      if (k !== "constructor" && isFunction(v) && prototype.hasOwnProperty(k) && indexOf.call(nonBindingFunctions, k) < 0) {
	        results.push(k);
	      }
	    }
	    return results;
	  };

	  Component.toComponentFactory = function() {
	    return VirtualNode.factoryFactory((function(_this) {
	      return function(props, children) {
	        var instance;
	        if (children.length > 0) {
	          props.children = children;
	        }
	        instance = new _this(props);
	        instance._validateChildren(props != null ? props.children : void 0);
	        return instance;
	      };
	    })(this));
	  };

	  Component.stateFields = function(fields) {
	    var field, initialValue, results;
	    this._stateFields = mergeInto(this._stateFields, fields);
	    results = [];
	    for (field in fields) {
	      initialValue = fields[field];
	      results.push((function(_this) {
	        return function(field) {
	          _this._addSetter(_this.prototype, field, function(v) {
	            return this.setState(field, v);
	          });
	          return _this._addGetter(_this.prototype, field, function() {
	            return this.state[field];
	          });
	        };
	      })(this)(field));
	    }
	    return results;
	  };

	  Component.createdComponents = null;

	  Component.pushCreatedComponent = function(c) {
	    this.createdComponents || (this.createdComponents = []);
	    return this.createdComponents.push(c);
	  };

	  Component.resetCreatedComponents = function() {
	    return this.createdComponents = null;
	  };

	  emptyProps = {};

	  function Component(props) {
	    if (props == null) {
	      props = emptyProps;
	    }
	    Component.created++;
	    globalCount("ReactComponent_Created");
	    Component.__super__.constructor.call(this, props);
	    this.state = {};
	    this.refs = null;
	    this._pendingState = null;
	    this._virtualAimBranch = null;
	    this._mounted = false;
	    this._wasMounted = false;
	    this._bindList = null;
	    this._applyingPendingState = false;
	    Component.pushCreatedComponent(this);
	  }

	  Component.prototype.instantiateAsTopComponent = function(bindToElementOrNewCanvasElementProps) {
	    Component.topComponentInstances.push(this);
	    return this._instantiate(null, bindToElementOrNewCanvasElementProps);
	  };

	  Component.getter({
	    inspectedName: function() {
	      return "" + this.className + (this.key ? "-" + this.key : '');
	    },
	    mounted: function() {
	      return this._mounted;
	    }
	  });

	  Component.prototype.onNextReady = function(callback) {
	    return reactArtEngineEpoch.onNextReady(callback);
	  };

	  Component.prototype.setState = function(newState, callback, callbackB) {
	    var _state, k, testState, v;
	    if (isString(newState)) {
	      return this._setSingleState(newState, callback, callbackB);
	    }
	    this.onNextReady(callback);
	    if (newState) {
	      testState = this._pendingState || this.state;
	      _state = null;
	      for (k in newState) {
	        v = newState[k];
	        if (!(testState[k] !== v)) {
	          continue;
	        }
	        _state || (_state = this._getStateToSet());
	        _state[k] = v;
	      }
	    }
	    return newState;
	  };

	  Component.prototype.replaceState = function(newState, callback) {
	    this._setPendingState(newState);
	    return this.onNextReady(callback);
	  };

	  Component.prototype.forceUpdate = function(callback) {
	    this._getPendingState();
	    return this.onNextReady(callback);
	  };

	  Component.prototype.getInitialState = function() {
	    return {};
	  };

	  Component.prototype.render = function() {
	    return Element();
	  };


	  /*
	  Called each time webpack hot-reloads a module.
	  It is important that this change the components state to trigger a rerender.
	  Make sure you add module: module to your component definition or
	  run your definition in a runHot module, -> function
	   */

	  Component.prototype.componentDidHotReload = function() {
	    var count;
	    count = (this.state._hotModuleReloadCount || 0) + 1;
	    return this.setState({
	      _hotModuleReloadCount: count
	    });
	  };

	  Component.prototype.componentWillReceiveProps = defaultComponentWillReceiveProps = function(newProps) {};

	  Component.prototype.componentWillMount = defaultComponentWillMount = function() {};

	  Component.prototype.componentWillUnmount = defaultComponentWillUnmount = function() {};

	  Component.prototype.componentWillUpdate = defaultComponentWillUpdate = function(newProps, newState) {};

	  Component.prototype.componentDidMount = defaultComponentDidMount = function() {};

	  Component.prototype.componentDidUpdate = defaultComponentDidUpdate = function(oldProps, oldState) {};


	  /*
	  Function:     preprocessProps
	  
	  When:         Called on component instantiation and any time props are updated
	  
	  IN:           newProps - The props received from the render call which created/updated this component
	  
	  OUT:          plain Object - becomes @props. Can be newProps, based on newProps or entirely new.
	  
	  Guarantee:    @props will allways be passed through preprocessProps before it is set.
	                i.e. Your code will never see a @props that hasen't been preprocessed.
	  
	  Requirements:
	    Must return a plain Object
	    Must not modify newProps passed in.
	    Shouldn't have any side effects.   (SBD - why?)
	    Shouldn't read any external state. (SBD - why?)
	  
	  Description:
	    Either return exactly newProps which were passed in OR create a new, plain object.
	    The returned object can contain anything you want.
	    These are the props the component will see in any subsequent lifecycle calls.
	  
	  NOTE: Unique to Art.React. Not in Facebook's React.
	  
	  NOTES RE Facebook.React:
	    Why add this? Well, often you want to apply a transformation to @props whenever its set OR it changes.
	    With Facebook.React there is no one lifecycle place for this. Component instantiation/mounting
	    and component updating are kept separate. I have found it is very error-prone to implement
	    this common functionality manually on each component that needs it.
	   */

	  Component.prototype.preprocessProps = defaultPreprocessProps = function(newProps) {
	    return newProps;
	  };


	  /*
	  Function:     preprocessState
	  
	  When:         preprocessState is called:
	                  immediatly after getInitialState
	                  after preprocessProps
	                  after componentWillUpdate
	                  before rendering
	  
	  IN:           newState - the state which is proposed to become @state
	  OUT:          object which will become @state. Can be newState, be based on newState or completely new.
	  
	  Guarantees:   @state will allways be passed through preprocessState before it is set.
	                i.e. Your code will never see a @state that hasen't been preprocessed.
	  
	  NOTES RE Facebook.React:
	    Why add this? Well, often you want to apply a transformation to @state whenever it is initialized
	    OR it changes. With Facebook.React there is no one lifecycle place for this. Component
	    instantiation/mounting and component updating are kept separate. I have found it is very
	    error-prone to implement this common functionality manually on each component that needs it.
	  
	    An example of this is FluxComponents. They alter state implicitly as the subscription data comes in, and
	    and component instantiation. preprocessState makes it easy to transform any data written via FluxComponents
	    into a standard form.
	  
	  SBD NOTES TO SELF:
	    I think:
	      - it is OK to directly mutate newState, can we declare this offically part of the API?
	      - calls to @setState in preprocessState will be applied NEXT epoch.
	      - could make getInitialState obsolete, but I think we'll keep it around for convenience and consistency
	   */

	  Component.prototype.preprocessState = defaultPreprocessState = function(newState) {
	    return newState;
	  };

	  Component.prototype.find = function(pattern, arg, matches, path) {
	    var child, findAll, functionResult, j, len, matchFound, pathString, ref, ref1, usedFunction, verbose;
	    ref = arg != null ? arg : {}, findAll = ref.findAll, verbose = ref.verbose;
	    if (matches == null) {
	      matches = [];
	    }
	    pathString = path ? path + "/" + this.inspectedName : this.inspectedName;
	    matchFound = (usedFunction = isFunction(pattern)) ? !!(functionResult = pattern(this)) : pathString.match(pattern);
	    if (matchFound) {
	      if (verbose) {
	        this.log(usedFunction ? {
	          matched: pathString,
	          functionResult: functionResult
	        } : {
	          matched: pathString
	        });
	      }
	      matches.push(this);
	    } else if (verbose === "all") {
	      this.log(usedFunction ? {
	        notMatched: pathString,
	        functionResult: functionResult
	      } : {
	        notMatched: pathString
	      });
	    }
	    if ((!matchFound || findAll) && this.subComponents) {
	      ref1 = this.subComponents;
	      for (j = 0, len = ref1.length; j < len; j++) {
	        child = ref1[j];
	        child.find(pattern, arguments[1], matches);
	      }
	    }
	    return matches;
	  };

	  Component.prototype.toCoffeescript = function(indent) {
	    return this._virtualAimBranch.toCoffeescript(indent);
	  };

	  Component.prototype.getPendingState = function() {
	    return this._pendingState || this.state;
	  };

	  Component.prototype.onNextReady = function(f) {
	    if (stateEpoch) {
	      return stateEpoch != null ? stateEpoch.onNextReady(f) : void 0;
	    } else {
	      return Component.__super__.onNextReady.apply(this, arguments);
	    }
	  };

	  Component.prototype._getStateToSet = function() {
	    if (this._wasMounted) {
	      return this._getPendingState();
	    } else {
	      return this.state;
	    }
	  };

	  Component.prototype._setSingleState = function(stateKey, stateValue, callback) {
	    this.onNextReady(callback);
	    if (this._pendingState || this.state[stateKey] !== stateValue) {
	      this._getStateToSet()[stateKey] = stateValue;
	    }
	    return stateValue;
	  };

	  Component.prototype._queueRerender = function() {
	    return this._getPendingState();
	  };

	  Component.prototype._setPendingState = function(state) {
	    if (!(this._pendingState || this._applyingPendingState)) {
	      reactArtEngineEpoch.addChangingComponent(this);
	    }
	    return this._pendingState = state ? shallowClone(state) : {};
	  };

	  Component.prototype._getPendingState = function() {
	    return this._pendingState || this._setPendingState(this.state);
	  };

	  Component.prototype._unmount = function() {
	    var ref;
	    this._removeHotInstance();
	    this._componentWillUnmount();
	    if ((ref = this._virtualAimBranch) != null) {
	      ref._unmount();
	    }
	    return this._mounted = false;
	  };

	  Component.prototype._addHotInstance = function() {
	    var moduleState;
	    if (moduleState = this["class"]._moduleState) {
	      return (moduleState.hotInstances || (moduleState.hotInstances = [])).push(this);
	    }
	  };

	  Component.prototype._removeHotInstance = function() {
	    var hotInstances, index, moduleState;
	    if (moduleState = this["class"]._moduleState) {
	      hotInstances = moduleState.hotInstances;
	      if (hotInstances && 0 <= (index = hotInstances.indexOf(this))) {
	        return moduleState.hotInstances = arrayWithout(hotInstances, index);
	      }
	    }
	  };

	  Component.prototype._instantiate = function(parentComponent, bindToElementOrNewCanvasElementProps) {
	    Component.__super__._instantiate.apply(this, arguments);
	    globalCount("ReactComponent_Instantiated");
	    this._bindFunctions();
	    this.props = this._preprocessProps(this.props);
	    this._addHotInstance();
	    this._componentWillMount();
	    this.setState(this._preprocessState(merge(this["class"]._stateFields, this.getInitialState())));
	    this._virtualAimBranch = this._renderCaptureRefs();
	    this._virtualAimBranch._instantiate(this, bindToElementOrNewCanvasElementProps);
	    this.element = this._virtualAimBranch.element;
	    this._componentDidMount();
	    this._wasMounted = this._mounted = true;
	    return this;
	  };

	  emptyArray = [];

	  Component.prototype._renderCaptureRefs = function() {
	    var ret;
	    ret = null;
	    timePerformance("reactRender", (function(_this) {
	      return function() {
	        globalCount("ReactComponent_Rendered");
	        VirtualNode.assignRefsTo = _this.refs = {};
	        Component.resetCreatedComponents();
	        ret = _this.render();
	        if (!(ret instanceof VirtualNode)) {
	          throw new Error(_this.className + ": render must return a VirtualNode. Got: " + (inspect(ret)));
	        }
	        _this.subComponents = Component.createdComponents || emptyArray;
	        return VirtualNode.assignRefsTo = null;
	      };
	    })(this));
	    return ret;
	  };

	  Component.prototype._updateRefsAfterReRender = function() {
	    var _updateTarget, c, i, j, k, len, ref, ref1, results, update, v;
	    ref = this.refs;
	    for (k in ref) {
	      v = ref[k];
	      if (_updateTarget = this.refs[k]._updateTarget) {
	        this.refs[k] = _updateTarget;
	      }
	    }
	    ref1 = this.subComponents;
	    results = [];
	    for (i = j = 0, len = ref1.length; j < len; i = ++j) {
	      c = ref1[i];
	      if (update = c._updateTarget) {
	        results.push(this.subComponents[i] = update);
	      }
	    }
	    return results;
	  };

	  Component.prototype._canUpdateFrom = function(b) {
	    return this["class"] === b["class"] && this.key === b.key;
	  };

	  Component.prototype._shouldReRenderComponent = function(componentInstance) {
	    return this._propsChanged(componentInstance) || this._pendingState;
	  };

	  Component.prototype._reRenderComponent = function() {
	    var newRenderResult, ref;
	    newRenderResult = this._renderCaptureRefs();
	    if (this._virtualAimBranch._canUpdateFrom(newRenderResult)) {
	      this._virtualAimBranch._updateFrom(newRenderResult);
	      this._updateRefsAfterReRender();
	    } else {
	      console.error("REACT-ART-ENGINE ERROR - The render function's top-level Component/VirtualElement changed 'too much.' The VirtualNode returned by a component's render function cannot change its Type or Key.\n\nSolution: Wrap your changing VirtualNode with a non-changing VirtualElement.\n\nOffending component: " + this.classPathName);
	      if ((ref = this._virtualAimBranch) != null) {
	        ref._unmount();
	      }
	      (this._virtualAimBranch = newRenderResult)._instantiate(this);
	    }
	    return this.element = this._virtualAimBranch.element;
	  };

	  Component.prototype._updateFrom = function(componentInstance) {
	    Component.__super__._updateFrom.apply(this, arguments);
	    if (this._shouldReRenderComponent(componentInstance)) {
	      globalCount("ReactComponent_UpdateFromTemporaryComponent_Changed");
	      this._applyPendingState(componentInstance.props);
	    } else {
	      globalCount("ReactComponent_UpdateFromTemporaryComponent_NoChange");
	    }
	    return this;
	  };

	  Component.prototype._applyPendingState = function(newProps) {
	    var newState, oldProps, oldState;
	    if (!(this._pendingState || newProps)) {
	      return;
	    }
	    this._applyingPendingState = true;
	    if (newProps) {
	      newProps = this._preprocessProps(newProps);
	      this._componentWillReceiveProps(newProps);
	    }
	    oldProps = this.props;
	    oldState = this.state;
	    newProps || (newProps = oldProps);
	    newState = this._pendingState || oldState;
	    this._componentWillUpdate(newProps, newState);

	    /*
	    React.js forbids calling setState from componentWillUpdate, but I see no reason for this.
	    This next line safely supports state updates in componentWillUpdate in a pure-functionalish way:
	      after a setState in @componentWillUpdate,
	      the new state will not be visible in the remainder of that @componetWillUpdate call
	      but it will be visible in any subsquent lifecycle call such as @render
	     */
	    newState = this._pendingState || oldState;
	    this._pendingState = null;
	    this.props = newProps;
	    this.state = this._preprocessState(newState);
	    this._applyingPendingState = false;
	    this._reRenderComponent();
	    return this._componentDidUpdate(oldProps, oldState);
	  };

	  Component.prototype._bindFunctions = function() {
	    var j, k, l, len, len1, newBindList, oldBindList;
	    oldBindList = this._bindList;
	    newBindList = this["class"].getBindList();
	    if (oldBindList) {
	      for (j = 0, len = oldBindList.length; j < len; j++) {
	        k = oldBindList[j];
	        if (indexOf.call(newBindList, k) < 0) {
	          delete this[k];
	        }
	      }
	    }
	    for (l = 0, len1 = newBindList.length; l < len1; l++) {
	      k = newBindList[l];
	      this[k] = fastBind(this["class"].prototype[k], this);
	    }
	    return this._bindList = newBindList;
	  };

	  Component.prototype._componentWillReceiveProps = function(newProps) {
	    if (defaultComponentWillReceiveProps === this.componentWillReceiveProps) {
	      return;
	    }
	    return timePerformance("reactLC", (function(_this) {
	      return function() {
	        return _this.componentWillReceiveProps(newProps);
	      };
	    })(this));
	  };

	  Component.prototype._preprocessProps = function(props) {
	    if (defaultPreprocessProps === this.preprocessProps) {
	      return props;
	    }
	    timePerformance("reactLC", (function(_this) {
	      return function() {
	        return props = _this.preprocessProps(props);
	      };
	    })(this));
	    return props;
	  };

	  Component.prototype._preprocessState = function(state) {
	    if (defaultPreprocessState === this.preprocessState) {
	      return state;
	    }
	    timePerformance("reactLC", (function(_this) {
	      return function() {
	        return state = _this.preprocessState(state);
	      };
	    })(this));
	    return state;
	  };

	  Component.prototype._componentWillMount = function() {
	    if (defaultComponentWillMount === this.componentWillMount) {
	      return;
	    }
	    return timePerformance("reactLC", (function(_this) {
	      return function() {
	        return _this.componentWillMount();
	      };
	    })(this));
	  };

	  Component.prototype._componentWillUnmount = function() {
	    if (defaultComponentWillUnmount === this.componentWillUnmount) {
	      return;
	    }
	    return timePerformance("reactLC", (function(_this) {
	      return function() {
	        return _this.componentWillUnmount();
	      };
	    })(this));
	  };

	  Component.prototype._componentWillUpdate = function(newProps, newState) {
	    if (!defaultComponentWillUpdate) {
	      return;
	    }
	    return timePerformance("reactLC", (function(_this) {
	      return function() {
	        return _this.componentWillUpdate(newProps, newState);
	      };
	    })(this));
	  };

	  Component.prototype._componentDidMount = function() {
	    if (defaultComponentDidMount === this.componentDidMount) {
	      return;
	    }
	    return this.onNextReady((function(_this) {
	      return function() {
	        return timePerformance("reactLC", function() {
	          return _this.componentDidMount();
	        });
	      };
	    })(this));
	  };

	  Component.prototype._componentDidUpdate = function(oldProps, oldState) {
	    if (defaultComponentDidUpdate === this.componentDidUpdate) {
	      return;
	    }
	    return this.onNextReady((function(_this) {
	      return function() {
	        return timePerformance("reactLC", function() {
	          return _this.componentDidUpdate(oldProps, oldState);
	        });
	      };
	    })(this));
	  };

	  return Component;

	})(VirtualNode);


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(246);


/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var Webpack;

	module.exports = Webpack = __webpack_require__(247);

	Webpack.HotLoader = __webpack_require__(248);

	Webpack.finishLoad(["HotLoader"]);


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	var DevTools,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	DevTools = __webpack_require__(213);

	module.exports = DevTools.Webpack || (DevTools.Webpack = (function(superClass) {
	  extend(Webpack, superClass);

	  function Webpack() {
	    return Webpack.__super__.constructor.apply(this, arguments);
	  }

	  Webpack.namespace = DevTools;

	  Webpack.namespacePath = "Neptune.Art.DevTools.Webpack";

	  return Webpack;

	})(Neptune.Base));

	DevTools.addNamespace(DevTools.Webpack);


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, HotLoader, log, peek, ref,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(11), BaseObject = ref.BaseObject, peek = ref.peek, log = ref.log;

	module.exports = HotLoader = (function(superClass) {
	  extend(HotLoader, superClass);

	  HotLoader.singletonClass();

	  HotLoader.runHot = function(m, f) {
	    return HotLoader.singleton.runHot(m, f);
	  };

	  HotLoader.getModuleState = function() {
	    return peek(HotLoader.singleton._modulePersistantState);
	  };

	  function HotLoader() {
	    this._modulePersistantState = [];
	  }

	  HotLoader.prototype.runHot = function(_module, f) {
	    var base, res;
	    if (_module != null ? _module.hot : void 0) {
	      this._modulePersistantState.push(((base = _module.hot).data || (base.data = {
	        modulePersistantState: {}
	      })).modulePersistantState);
	      _module.hot.accept();
	      _module.hot.dispose(function(data) {
	        return data.modulePersistantState = _module.hot.data.modulePersistantState;
	      });
	    }
	    res = f(peek(this._modulePersistantState));
	    if (_module != null ? _module.hot : void 0) {
	      this._modulePersistantState.pop();
	    }
	    return res;
	  };

	  return HotLoader;

	})(BaseObject);


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var Component, Foundation, HotStyleProps,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Component = __webpack_require__(244);

	module.exports = HotStyleProps = (function(superClass) {
	  extend(HotStyleProps, superClass);

	  function HotStyleProps() {
	    return HotStyleProps.__super__.constructor.apply(this, arguments);
	  }

	  HotStyleProps.postCreate = function(hotLoaded) {
	    hotLoaded && Component.rerenderAll();
	    return HotStyleProps.__super__.constructor.postCreate.apply(this, arguments);
	  };

	  return HotStyleProps;

	})(Foundation.BaseObject);


/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	var Flux;

	module.exports = Flux = __webpack_require__(251);

	Flux.Core = __webpack_require__(253);

	Flux.Db = __webpack_require__(260);

	Flux.Models = __webpack_require__(265);

	Flux.React = __webpack_require__(271);

	Flux.All = __webpack_require__(275);

	Flux.finishLoad(["All"]);


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	var Art,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Art = __webpack_require__(252);

	module.exports = Art.Flux || (Art.Flux = (function(superClass) {
	  extend(Flux, superClass);

	  function Flux() {
	    return Flux.__super__.constructor.apply(this, arguments);
	  }

	  Flux.namespace = Art;

	  Flux.namespacePath = "Neptune.Art.Flux";

	  return Flux;

	})(Neptune.Base));

	Art.addNamespace(Art.Flux);


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	__webpack_require__(5);

	module.exports = Neptune.Art || (Neptune.Art = (function(superClass) {
	  extend(Art, superClass);

	  function Art() {
	    return Art.__super__.constructor.apply(this, arguments);
	  }

	  Art.namespace = Neptune;

	  Art.namespacePath = "Neptune.Art";

	  return Art;

	})(Neptune.Base));

	Neptune.addNamespace(Neptune.Art);


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var Core;

	module.exports = Core = __webpack_require__(254);

	Core.Entry = __webpack_require__(255);

	Core.FluxModel = __webpack_require__(257);

	Core.FluxStatus = __webpack_require__(256);

	Core.FluxStore = __webpack_require__(258);

	Core.ModelRegistry = __webpack_require__(259);

	Core.finishLoad(["Entry", "FluxModel", "FluxStatus", "FluxStore", "ModelRegistry"]);


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	var Flux,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Flux = __webpack_require__(251);

	module.exports = Flux.Core || (Flux.Core = (function(superClass) {
	  extend(Core, superClass);

	  function Core() {
	    return Core.__super__.constructor.apply(this, arguments);
	  }

	  Core.namespace = Flux;

	  Core.namespacePath = "Neptune.Art.Flux.Core";

	  return Core;

	})(Neptune.Base));

	Flux.addNamespace(Flux.Core);


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Entry, Epoch, Foundation, Unique, clone, failure, inspect, log, merge, pending, pushIfNotPresent, ref, removeFirstMatch, shallowClone, success,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	ref = __webpack_require__(256), pending = ref.pending, success = ref.success, failure = ref.failure;

	log = Foundation.log, BaseObject = Foundation.BaseObject, merge = Foundation.merge, removeFirstMatch = Foundation.removeFirstMatch, pushIfNotPresent = Foundation.pushIfNotPresent, Epoch = Foundation.Epoch, shallowClone = Foundation.shallowClone, inspect = Foundation.inspect, Unique = Foundation.Unique, clone = Foundation.clone;

	module.exports = Entry = (function(superClass) {
	  var warnCantSetField, warnUnsettableFields;

	  extend(Entry, superClass);

	  Entry.warnCantSetField = warnCantSetField = function(newFluxRecord, oldFluxRecord, field) {
	    var newValue, oldValue;
	    newValue = newFluxRecord[field];
	    oldValue = oldFluxRecord != null ? oldFluxRecord[field] : void 0;
	    if (newFluxRecord.hasOwnProperty(field) && newValue !== oldValue) {
	      return console.warn((Entry.getClassPathName()) + ": Do not put/post the '" + field + "' field (new value == " + (inspect(newValue)) + ", old value == " + (inspect(oldValue)) + "). Ignored.");
	    }
	  };

	  Entry.warnUnsettableFields = warnUnsettableFields = function(newFluxRecord, oldFluxRecord) {
	    warnCantSetField(newFluxRecord, oldFluxRecord, "key");
	    return warnCantSetField(newFluxRecord, oldFluxRecord, "modelName");
	  };

	  function Entry(modelName, key) {
	    Entry.__super__.constructor.apply(this, arguments);
	    this._fluxRecord = {
	      status: pending,
	      key: key,
	      modelName: modelName
	    };
	    this._updated = false;
	    this._subscribers = [];
	  }

	  Entry.getter({
	    subscriberCount: function() {
	      return this._subscribers.length;
	    },
	    key: function() {
	      return this._fluxRecord.key;
	    },
	    modelName: function() {
	      return this._fluxRecord.modelName;
	    }
	  });

	  Entry.getter("fluxRecord subscribers");

	  Entry.setter({
	    fluxRecord: function(newFluxRecord) {
	      var key, modelName, ref1;
	      ref1 = this._fluxRecord, key = ref1.key, modelName = ref1.modelName;
	      warnUnsettableFields(newFluxRecord, this._fluxRecord);
	      newFluxRecord.key = key;
	      newFluxRecord.modelName = modelName;
	      return this._fluxRecord = newFluxRecord;
	    }
	  });

	  Entry.getter({
	    plainStructure: function() {
	      return {
	        fluxRecord: this._fluxRecord,
	        subscribers: this._subscribers
	      };
	    },
	    hasSubscribers: function() {
	      return this._subscribers.length > 0;
	    }
	  });

	  Entry.prototype._merge = function(src) {
	    this._fluxRecord = src._fluxRecord;
	    return this._subscribers = this._subscribers.concat(src._subscribers);
	  };

	  Entry.prototype._notifySubscribers = function() {
	    var i, len, ref1, subscriber;
	    if (!(this._subscribers && this._updated)) {
	      return;
	    }
	    ref1 = this._subscribers;
	    for (i = 0, len = ref1.length; i < len; i++) {
	      subscriber = ref1[i];
	      subscriber(this._fluxRecord);
	    }
	    return this._updated = false;
	  };

	  Entry.prototype._update = function(updateFunction) {
	    this._updated = true;
	    return this.setFluxRecord((typeof updateFunction === "function" ? updateFunction(this._fluxRecord) : void 0) || {});
	  };

	  Entry.prototype._subscribe = function(subscriber) {
	    return pushIfNotPresent(this._subscribers, subscriber);
	  };

	  Entry.prototype._unsubscribe = function(subscriber) {
	    return removeFirstMatch(this._subscribers, subscriber);
	  };

	  return Entry;

	})(BaseObject);


/***/ },
/* 256 */
/***/ function(module, exports) {

	var FluxStatus;

	module.exports = FluxStatus = (function() {
	  function FluxStatus() {}

	  FluxStatus.success = 200;

	  FluxStatus.pending = "pending";

	  FluxStatus.failure = "failure";

	  FluxStatus.missing = 404;

	  return FluxStatus;

	})();


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, FluxModel, Foundation, ModelRegistry, capitalize, compactFlatten, decapitalize, emailRegexp, fluxStore, globalCount, inspect, isFunction, isNumber, isString, isoDateRegexp, log, missing, nextTick, pending, pluralize, pureMerge, ref, shallowClone, success, time, urlRegexp,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	ref = __webpack_require__(256), missing = ref.missing, success = ref.success, pending = ref.pending;

	fluxStore = __webpack_require__(258).fluxStore;

	ModelRegistry = __webpack_require__(259);

	log = Foundation.log, BaseObject = Foundation.BaseObject, decapitalize = Foundation.decapitalize, pluralize = Foundation.pluralize, pureMerge = Foundation.pureMerge, shallowClone = Foundation.shallowClone, isString = Foundation.isString, emailRegexp = Foundation.emailRegexp, urlRegexp = Foundation.urlRegexp, isNumber = Foundation.isNumber, nextTick = Foundation.nextTick, capitalize = Foundation.capitalize, inspect = Foundation.inspect, isFunction = Foundation.isFunction, pureMerge = Foundation.pureMerge, isoDateRegexp = Foundation.isoDateRegexp, time = Foundation.time, globalCount = Foundation.globalCount, compactFlatten = Foundation.compactFlatten;

	module.exports = FluxModel = (function(superClass) {
	  extend(FluxModel, superClass);

	  FluxModel.register = function() {
	    this.singletonClass();
	    return ModelRegistry.register(this.getSingleton());
	  };

	  FluxModel.postCreate = function(klass) {
	    this.register();
	    return klass;
	  };


	  /*
	  INPUT: zero or more strings or arrays of strings
	    - arbitrary nesting of arrays is OK
	    - nulls are OK, they are ignored
	  OUTPUT: null
	  
	  NOTE: @aliases can be called multiple times.
	  
	  example:
	    class Post extends FluxModel
	      @aliases "chapterPost"
	  
	  purpose:
	    - declare alternative names to access this model.
	    - allows you to use the shortest form of FluxComponent subscriptions for each alias:
	        @subscriptions "chapterPost"
	      in addition to the model's class name:
	        @subscriptions "post"
	   */

	  FluxModel.aliases = function() {
	    this._aliases = compactFlatten(arguments, this._aliases);
	    return null;
	  };

	  FluxModel.prototype.onNextReady = function(f) {
	    return fluxStore.onNextReady(f);
	  };

	  function FluxModel(name) {
	    FluxModel.__super__.constructor.apply(this, arguments);
	    this._name = name || decapitalize(this["class"].name);
	  }

	  FluxModel.classGetter({
	    models: function() {
	      return ModelRegistry.models;
	    },
	    fluxStore: function() {
	      return fluxStore;
	    }
	  });

	  FluxModel.getter({
	    models: function() {
	      return ModelRegistry.models;
	    },
	    fluxStore: function() {
	      return fluxStore;
	    },
	    singlesModel: function() {
	      return this._singlesModel || this;
	    }
	  });

	  FluxModel.prototype.subscribe = function(fluxKey, subscriptionFunction) {
	    return fluxStore.subscribe(this._name, fluxKey, subscriptionFunction);
	  };

	  FluxModel.getter("name");


	  /*
	  load the requested data for the given key and update the fluxStore
	  
	  required:
	    Should ALWAYS call fluxStore.update immediately OR once the data is available.
	    Clients will assume that a call to "load" forces a reload of the data in the fluxStore.
	  
	  optional:
	    If the data is immediately available, you can return the fluxRecord instead of "null"
	    If load was called because of a new Component being mounted and its subscriptions initialized,
	      returning the fluxRecord immediately will guarantee the Component has valid data for its
	      first render.
	  
	  Note:
	    Typically called automatically by the fluxStore when a Component subscribes to
	    data from this model with the given key.
	  
	  The simplest possible load function:
	    load: (key) -> @updateFluxStore key, {}
	  
	  The "load" function below is:
	    Simplest "load" with immediate fluxRecord return.
	    Immediate return means:
	     - fluxStore.subscribe() will return the fluxRecord returned from this "load"
	     - FluxComponent subscriptions will update state in time for the inital render.
	  
	  inputs:
	    key: string
	  
	  side effects:
	    expected to call fluxStore.update @_name, key, fluxRecord
	      - when fluxRecord.status is no longer pending
	      - optionally as progress is made loading the fluxRecord.data
	  
	  returns: null OR fluxRecord if the value is immediately available
	    NOTE: load can return null or fluxRecord as it chooses. The client shouldn't
	      rely on the fact that it returned a fluxRecord with a set of inputs, it might not
	      the next time.
	  
	  Optionally, you can implement one of to altenative load functions with Promise support:
	  
	    loadData:       (key) -> promise.then (data) ->
	    loadFluxRecord: (key) -> promise.then (fluxRecord) ->
	  
	    @load will take care of updating FluxStore.
	   */

	  FluxModel.prototype.load = function(key) {
	    if (this.loadData) {
	      this.loadData(key).then((function(_this) {
	        return function(data) {
	          return _this.updateFluxStore(key, {
	            status: success,
	            data: data
	          }, function(error) {
	            return _this.updateFluxStore(key, {
	              status: failure,
	              error: error
	            });
	          });
	        };
	      })(this));
	      return null;
	    } else if (this.loadFluxRecord) {
	      log({
	        "use loadFluxRecord": key
	      });
	      this.loadFluxRecord(key).then((function(_this) {
	        return function(fluxRecord) {
	          log({
	            loadFluxRecord: {
	              key: key,
	              fluxRecord: fluxRecord
	            }
	          });
	          return _this.updateFluxStore(key, fluxRecord);
	        };
	      })(this));
	      return null;
	    } else {
	      return this.updateFluxStore(key, {
	        status: missing
	      });
	    }
	  };

	  FluxModel.prototype.reload = function(key) {
	    return this.load(key);
	  };

	  FluxModel.prototype.updateFluxStore = function(key, fluxRecord) {
	    return fluxStore.update(this._name, key, fluxRecord);
	  };

	  FluxModel.prototype.toFluxKey = function(key) {
	    if (!isString(key)) {
	      throw "FluxModel " + this.name + ": Must implement custom toFluxKey for non-string fluxKeys like: " + (inspect(key));
	    }
	    return key;
	  };

	  FluxModel.prototype.fluxStoreEntryUpdated = function(entry) {};

	  FluxModel.prototype.fluxStoreEntryAdded = function(entry) {};

	  FluxModel.prototype.fluxStoreEntryRemoved = function(entry) {};


	  /*
	  localStorage helper methods
	   */

	  FluxModel.prototype._localStoreKey = function(id) {
	    return "fluxModel:" + this._name + ":" + id;
	  };

	  FluxModel.prototype._localStoreGet = function(id) {
	    var data;
	    if (data = localStorage.getItem(this._localStoreKey(id))) {
	      return JSON.parse(data);
	    } else {
	      return null;
	    }
	  };

	  FluxModel.prototype._localStoreSet = function(id, data) {
	    return localStorage.setItem(this._localStoreKey(id), JSON.stringify(data));
	  };

	  return FluxModel;

	})(BaseObject);


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Entry, Epoch, FluxStore, Foundation, GlobalEpochCycle, ModelRegistry, Unique, clone, consistentJsonStringify, failure, globalCount, inspect, isFunction, isString, log, merge, missing, pending, plainObjectsDeepEq, pushIfNotPresent, ref, ref1, ref2, removeFirstMatch, success, time, timeout,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	Entry = __webpack_require__(255);

	ModelRegistry = __webpack_require__(259);

	ref = __webpack_require__(256), success = ref.success, pending = ref.pending, missing = ref.missing, failure = ref.failure;

	BaseObject = Foundation.BaseObject, merge = Foundation.merge, removeFirstMatch = Foundation.removeFirstMatch, pushIfNotPresent = Foundation.pushIfNotPresent, removeFirstMatch = Foundation.removeFirstMatch, Epoch = Foundation.Epoch, log = Foundation.log, isFunction = Foundation.isFunction, Unique = Foundation.Unique, clone = Foundation.clone, consistentJsonStringify = Foundation.consistentJsonStringify, isString = Foundation.isString, timeout = Foundation.timeout, plainObjectsDeepEq = Foundation.plainObjectsDeepEq, globalCount = Foundation.globalCount, time = Foundation.time, inspect = Foundation.inspect;

	module.exports = FluxStore = (function(superClass) {
	  extend(FluxStore, superClass);

	  FluxStore.singletonClass();

	  function FluxStore() {
	    FluxStore.__super__.constructor.apply(this, arguments);
	    this._reset();
	  }

	  FluxStore.getter("length");

	  FluxStore.prototype.get = function(modelName, key) {
	    var ref1;
	    return (ref1 = this._getEntry(modelName, key)) != null ? ref1.fluxRecord : void 0;
	  };

	  FluxStore.prototype.getSubscribers = function(modelName, key) {
	    var ref1;
	    return (ref1 = this._getEntry(modelName, key)) != null ? ref1.subscribers : void 0;
	  };

	  FluxStore.prototype.getHasSubscribers = function(modelName, key) {
	    var ref1;
	    return !!((ref1 = this._getEntry(modelName, key)) != null ? ref1.getHasSubscribers() : void 0);
	  };


	  /*
	  subscribe to all changes to the fluxStore Entry identified by modelName and Key.
	  
	  subscribers:
	    are notified on all changes to the entry's:
	      @fluxRecord object
	      @subscribers list
	    are NOT explicitly notified of when the entry is first added or removed
	      However, when an entry is added, subscribers will be notified that a change happened.
	      When an entry is removed, subscribers will be again notified, and the "subscribers" param will be [].
	    See subscribeToStore for notifications about entries being added or removed
	  
	  inputs:
	    modelName: string
	    key: string
	    subscriber signature: (fluxRecord, subscribers) -> # => null
	    initialFluxRecord: if set, and the key is not in the store, this is used
	      as the initial value instead of the calling "load" on the model.
	  
	  side effects:
	    vivifies a new entry with fluxRecord = {status: pending} if one isn't present
	    calls ModelRegistry[modelName].load key if vivification occured
	    Notifies all subscribers.
	  
	  returns: current fluxRecord for the entry
	   */

	  FluxStore.prototype.subscribe = function(modelName, key, subscriber, initialFluxRecord) {
	    this._queueChange({
	      modelName: modelName,
	      key: key,
	      addSubscriber: subscriber
	    });
	    return this._vivifyAndLoadEntry(modelName, key, initialFluxRecord).fluxRecord;
	  };


	  /*
	  inputs:
	    modelName: string
	    key: string
	    subscriber: the exact same function (including closure) used to subscribe
	  
	  side effects:
	    Notifies all subscribers.
	  
	  returns: null
	   */

	  FluxStore.prototype.unsubscribe = function(modelName, key, subscriber) {
	    return this._queueChange({
	      modelName: modelName,
	      key: key,
	      removeSubscriber: subscriber
	    });
	  };


	  /*
	  subscribe to all changes on the store
	  
	  inputs:
	    subscriber:
	      signature: (action, entry.plainStructure) -> # => null
	      actions: "addedEntry", "removedEntry" and "updatedEntry"
	  
	      entry.plainStructure looks like this: (see Flux.Core.Entry)
	        fluxRecord: key: , modelName: , status: , ...
	        subscribers: [functions]
	  
	  returns: null
	  
	  Note:
	    Used by models to take actions when entries are added and removed
	    Added for Pusher subscriptions
	   */

	  FluxStore.prototype.subscribeToStore = function(subscriber) {
	    throw new Error("subscribeToStore is depricated. Use fluxStoreEntryUpdated (etc...) overrides.");
	  };


	  /*
	  put updates or creates the record
	  updateFunctionOrNewFluxRecord: can be:
	    1) an arbitrary function: (oldRecord) -> newRecord
	      oldRecord will be null/undefined only if the record has not been created.
	      do not alter oldRecord
	      must return a new Object or null/undefined (in which case an empty Object is created)
	    2) a new Object to replace the existing object
	  
	  Notifies all subscribers.
	  returns: updateFunctionOrNewFluxRecord
	   */

	  FluxStore.prototype.update = function(modelName, key, updateFunctionOrNewFluxRecord) {
	    this._queueChange({
	      modelName: modelName,
	      key: key,
	      updateFunction: isFunction(updateFunctionOrNewFluxRecord) ? updateFunctionOrNewFluxRecord : function(oldRecord) {
	        return updateFunctionOrNewFluxRecord;
	      }
	    });
	    return updateFunctionOrNewFluxRecord;
	  };

	  FluxStore.getter({
	    status: function() {
	      var entries, entry, entrySubscribers, key, model, modelCount, ref1;
	      entrySubscribers = 0;
	      modelCount = 0;
	      ref1 = this._entriesByModelName;
	      for (model in ref1) {
	        entries = ref1[model];
	        modelCount++;
	        for (key in entries) {
	          entry = entries[key];
	          entrySubscribers += entry.subscriberCount;
	        }
	      }
	      return {
	        entries: this._length,
	        entrySubscribers: entrySubscribers,
	        models: modelCount
	      };
	    }
	  });

	  FluxStore.prototype._reset = function() {
	    this._length = 0;
	    this._entriesByModelName = {};
	    return this._addedEntries = [];
	  };

	  FluxStore.prototype._getEntriesForModelName = function(modelName) {
	    var base;
	    return (base = this._entriesByModelName)[modelName] || (base[modelName] = {});
	  };

	  FluxStore.prototype._getEntry = function(modelName, key) {
	    if (!isString(modelName)) {
	      throw new Error("Expected 'modelName' to be a String. Got: " + (inspect(modelName)));
	    }
	    if (!isString(key)) {
	      throw new Error("Expected 'key' to be a String. Got: " + (inspect(key)));
	    }
	    return this._getEntriesForModelName(modelName)[key];
	  };

	  FluxStore.prototype._addEntry = function(modelName, key) {
	    var entry;
	    this._length++;
	    entry = this._getEntriesForModelName(modelName)[key] = new Entry(modelName, key);
	    pushIfNotPresent(this._addedEntries, entry);
	    return entry;
	  };

	  FluxStore.prototype._removeEntry = function(entry) {
	    this._length--;
	    return delete this._getEntriesForModelName(entry.fluxRecord.modelName)[entry.fluxRecord.key];
	  };


	  /*
	  Returns existing entry if there is one, otherwise it vivifies a "defaultFluxRecord" and starts the model.load.
	  
	  _vivifyAndLoadEntry solves the problem of two or more subscriptions starting in the same epoch
	  on a new entry. Without this, we'd try to call "load" on the same model+key more than once.
	  Ex: if we are loading remote images, loading the same remote image multiple times is a huge waste.
	  
	  returns: entry
	   */

	  FluxStore.prototype._vivifyAndLoadEntry = function(modelName, key, initialFluxRecord) {
	    var entry;
	    entry = this._getEntry(modelName, key);
	    if (!entry) {
	      entry = this._addEntry(modelName, key);
	      if (initialFluxRecord) {
	        entry.setFluxRecord(initialFluxRecord);
	      } else {
	        this._loadKeyWithRetriesWithExponentalFalloff(modelName, key, entry);
	      }
	    }
	    return entry;
	  };

	  FluxStore.prototype._loadKeyWithRetriesWithExponentalFalloff = function(modelName, key, entry) {
	    var fluxRecord, loadRetryCallback, model, retryDelay;
	    retryDelay = 250;
	    if (model = ModelRegistry.models[modelName]) {
	      loadRetryCallback = (function(_this) {
	        return function(loadInfo) {
	          if (loadInfo.status !== pending && loadInfo.status !== success && loadInfo.status !== missing) {
	            if (_this._getEntry(modelName, key)) {
	              if (retryDelay < 60 * 1000) {
	                retryDelay *= 2;
	              }
	              return console.warn("FluxStore retry is disabled");
	            } else {
	              return log({
	                FluxStore_get_retry: {
	                  model: modelName,
	                  key: key,
	                  status: loadInfo.status,
	                  aborting: "no longer have subscribers"
	                }
	              });
	            }
	          }
	        };
	      })(this);
	      if (fluxRecord = model.load(key, loadRetryCallback)) {
	        return entry.setFluxRecord(fluxRecord);
	      }
	    } else {
	      return console.warn("ArtFlux: there is no model registered with the name: " + modelName + ". Entry for " + modelName + ":" + key + " will forever be status: pending.");
	    }
	  };

	  FluxStore.prototype._vivifyEntry = function(modelName, key) {
	    return this._getEntry(modelName, key) || this._addEntry(modelName, key);
	  };

	  FluxStore.prototype._queueChange = function(change) {
	    var key, modelName;
	    modelName = change.modelName, key = change.key;
	    if (!isString(modelName)) {
	      throw new Error("Expected 'modelName' to be a String. Got: " + (inspect(modelName)));
	    }
	    if (!isString(key)) {
	      throw new Error("Expected 'key' to be a String. Got: " + (inspect(key)));
	    }
	    this.queueItem(change);
	    return null;
	  };

	  FluxStore.prototype.processEpochItems = function(changes) {
	    var addSubscriber, entry, i, j, k, key, l, len, len1, len2, len3, modelName, models, ref1, ref2, removeEntry, removeSubscriber, removedEntries, updateFunction, updatedEntries;
	    updatedEntries = [];
	    removedEntries = [];
	    for (i = 0, len = changes.length; i < len; i++) {
	      ref1 = changes[i], modelName = ref1.modelName, key = ref1.key, removeEntry = ref1.removeEntry, addSubscriber = ref1.addSubscriber, removeSubscriber = ref1.removeSubscriber, updateFunction = ref1.updateFunction;
	      entry = this._vivifyEntry(modelName, key);
	      if (updateFunction) {
	        entry._update(updateFunction);
	      } else if (addSubscriber) {
	        entry._subscribe(addSubscriber);
	      } else if (removeSubscriber) {
	        entry._unsubscribe(removeSubscriber);
	      }
	      pushIfNotPresent(updatedEntries, entry);
	    }
	    models = ModelRegistry.models;
	    for (j = 0, len1 = updatedEntries.length; j < len1; j++) {
	      entry = updatedEntries[j];
	      models[entry.getModelName()].fluxStoreEntryUpdated(entry);
	      entry._notifySubscribers();
	      if (entry.subscribers.length === 0) {
	        pushIfNotPresent(removedEntries, entry);
	        this._removeEntry(entry);
	      }
	    }
	    ref2 = this._addedEntries;
	    for (k = 0, len2 = ref2.length; k < len2; k++) {
	      entry = ref2[k];
	      models[entry.getModelName()].fluxStoreEntryAdded(entry);
	    }
	    for (l = 0, len3 = removedEntries.length; l < len3; l++) {
	      entry = removedEntries[l];
	      models[entry.getModelName()].fluxStoreEntryRemoved(entry);
	    }
	    this._addedEntries = [];
	    return null;
	  };

	  return FluxStore;

	})(Epoch);

	if (GlobalEpochCycle = (ref1 = Neptune.Art.Engine) != null ? (ref2 = ref1.Core) != null ? ref2.GlobalEpochCycle : void 0 : void 0) {
	  GlobalEpochCycle.singleton.includeFlux(FluxStore.singleton);
	}


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, ModelRegistry, decapitalize, inspect, isClass, log, ref,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(11), log = ref.log, BaseObject = ref.BaseObject, decapitalize = ref.decapitalize, isClass = ref.isClass, inspect = ref.inspect;

	module.exports = ModelRegistry = (function(superClass) {
	  var models;

	  extend(ModelRegistry, superClass);

	  function ModelRegistry() {
	    return ModelRegistry.__super__.constructor.apply(this, arguments);
	  }

	  ModelRegistry.models = models = {};

	  ModelRegistry.register = function(modelClassOrInstance) {
	    var _aliases, alias, newSingleton, ref1;
	    newSingleton = isClass(modelClassOrInstance) ? (console.warn("ModelRegistry.register Class (not instance) is DEPRICATED"), (_aliases = modelClassOrInstance._aliases, modelClassOrInstance), new modelClassOrInstance) : ((ref1 = modelClassOrInstance["class"], _aliases = ref1._aliases, ref1), modelClassOrInstance);
	    _aliases && (function() {
	      var i, len, results;
	      results = [];
	      for (i = 0, len = _aliases.length; i < len; i++) {
	        alias = _aliases[i];
	        results.push(models[alias] = newSingleton);
	      }
	      return results;
	    })();
	    return models[newSingleton.name] = newSingleton;
	  };

	  ModelRegistry._singletonName = function(model) {
	    return decapitalize(model.name);
	  };

	  ModelRegistry._reset = function() {
	    var i, k, len, ref1, results;
	    ref1 = Object.keys(models);
	    results = [];
	    for (i = 0, len = ref1.length; i < len; i++) {
	      k = ref1[i];
	      results.push(delete models[k]);
	    }
	    return results;
	  };

	  return ModelRegistry;

	})(BaseObject);


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var Db;

	module.exports = Db = __webpack_require__(261);

	Db.FluxDbModel = __webpack_require__(262);

	Db.FluxDbModelBase = __webpack_require__(263);

	Db.FluxDbQueryModel = __webpack_require__(264);

	Db.finishLoad(["FluxDbModel", "FluxDbModelBase", "FluxDbQueryModel"]);


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var Flux,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Flux = __webpack_require__(251);

	module.exports = Flux.Db || (Flux.Db = (function(superClass) {
	  extend(Db, superClass);

	  function Db() {
	    return Db.__super__.constructor.apply(this, arguments);
	  }

	  Db.namespace = Flux;

	  Db.namespacePath = "Neptune.Art.Flux.Db";

	  return Db;

	})(Neptune.Base));

	Flux.addNamespace(Flux.Db);


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, FluxCore, FluxDbModel, FluxDbModelBase, FluxModel, FluxStatus, FluxStore, Foundation, ModelRegistry, capitalize, compact, decapitalize, emailRegexp, failure, fluxStore, idRegExpStr, inspect, isFunction, isHexColor, isId, isNumber, isPlainArray, isPlainObject, isString, log, merge, missing, nextTick, objectWithout, pending, pluralize, pureMerge, shallowClone, success, urlRegexp,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	FluxCore = __webpack_require__(253);

	FluxDbModelBase = __webpack_require__(263);

	log = Foundation.log, BaseObject = Foundation.BaseObject, decapitalize = Foundation.decapitalize, pluralize = Foundation.pluralize, pureMerge = Foundation.pureMerge, shallowClone = Foundation.shallowClone, isString = Foundation.isString, emailRegexp = Foundation.emailRegexp, urlRegexp = Foundation.urlRegexp, isNumber = Foundation.isNumber, nextTick = Foundation.nextTick, capitalize = Foundation.capitalize, inspect = Foundation.inspect, isFunction = Foundation.isFunction, merge = Foundation.merge, objectWithout = Foundation.objectWithout, isPlainObject = Foundation.isPlainObject, isPlainArray = Foundation.isPlainArray, compact = Foundation.compact;

	FluxStore = FluxCore.FluxStore, ModelRegistry = FluxCore.ModelRegistry, FluxModel = FluxCore.FluxModel, FluxStatus = FluxCore.FluxStatus;

	missing = FluxStatus.missing, failure = FluxStatus.failure, success = FluxStatus.success, pending = FluxStatus.pending;

	fluxStore = FluxStore.fluxStore;

	idRegExpStr = "[a-z0-9]+";

	isId = function(v) {
	  return isString(v) && v.match(RegExp("^" + idRegExpStr + "$", "i"));
	};

	isHexColor = function(v) {
	  return isString(v) && v.match(/^#([a-f0-9]{3})|([a-f0-9]{6})/i);
	};


	/*
	FluxDbModel

	Adds declarative API:
	  @fields - with validation and preprocessing support
	  @query - declare/create a model for each query
	 */

	module.exports = FluxDbModel = (function(superClass) {
	  var fieldTypes, i, key, len, normalizeUrl, ref, requiredKey;

	  extend(FluxDbModel, superClass);

	  FluxDbModel.normalizeUrl = normalizeUrl = function(url) {
	    var match;
	    match = url.match(urlRegexp);
	    return "" + (match[1].toLowerCase()) + match[2] + (match[3].toLowerCase()) + (match.slice(4).join(''));
	  };

	  FluxDbModel.fieldTypes = fieldTypes = {
	    id: {
	      validate: function(v) {
	        return isId(v);
	      }
	    },
	    color: {
	      validate: function(v) {
	        return isHexColor(v);
	      }
	    },
	    number: {
	      validate: function(v) {
	        return isNumber(v);
	      }
	    },
	    date: {
	      validate: function(v) {
	        return isString(v) || (v instanceof Date);
	      },
	      preprocess: function(v) {
	        if (isString(v)) {
	          return new Date(v);
	        } else {
	          return v;
	        }
	      }
	    },
	    email: {
	      validate: function(v) {
	        return isString(v) && v.trim().match(emailRegexp);
	      },
	      preprocess: function(v) {
	        return v.trim().toLowerCase();
	      }
	    },
	    url: {
	      validate: function(v) {
	        return isString(v) && v.match(urlRegexp);
	      },
	      preprocess: function(v) {
	        return normalizeUrl(v);
	      }
	    },
	    boolean: {
	      validate: function(v) {
	        return v === true || v === false;
	      }
	    },
	    count: {
	      validate: function(v) {
	        return isNumber(v);
	      }
	    },
	    object: {
	      validate: function(v) {
	        return isPlainObject(v);
	      }
	    },
	    string: {
	      validate: function(v) {
	        return isString(v);
	      }
	    },
	    array: {
	      validate: function(v) {
	        return isPlainArray(v);
	      }
	    },
	    trimmedString: {
	      validate: function(v) {
	        return isString(v);
	      },
	      preprocess: function(v) {
	        return v.trim();
	      }
	    }
	  };

	  ref = Object.keys(FluxDbModel.fieldTypes);
	  for (i = 0, len = ref.length; i < len; i++) {
	    key = ref[i];
	    requiredKey = "required" + capitalize(key);
	    FluxDbModel.fieldTypes[requiredKey] = merge(FluxDbModel.fieldTypes[key], {
	      required: true
	    });
	  }


	  /*
	  fieldDeclarationMap is a map from field-names to fieldOptions
	  
	  fieldOptions: (all optional)
	    validate: ->
	    preprocess: ->
	    required: t/f
	      note: for internal use only, this can also be a string specifying an alternatite field-name
	        meaning: 'either this field or the alternate must be set'
	    linkTo: "modelName"
	   */

	  FluxDbModel.fields = function(fieldDeclarationMap) {
	    var field, idFieldOptions, linkTo, results, subOptions;
	    this.register();
	    results = [];
	    for (field in fieldDeclarationMap) {
	      subOptions = fieldDeclarationMap[field];
	      if (subOptions.type) {
	        throw new Error((this.getClassPathName()) + ": @fields declarations using 'type' no longer supported");
	      }
	      if (linkTo = subOptions.linkTo) {
	        if (field.match(/.*Id$/)) {
	          console.warn("FluxDbModel " + this.name + ": linkTo field '" + field + "' should not end in 'Id'");
	        }
	        this._addField(field + "Id", idFieldOptions = merge(this.fieldTypes.id, objectWithout(subOptions, "linkTo")));
	        subOptions = merge(this.fieldTypes.plainObject, subOptions);
	        if (subOptions.required) {
	          delete subOptions.required;
	          idFieldOptions.required = field;
	        }
	      }
	      results.push(this._addField(field, subOptions));
	    }
	    return results;
	  };

	  FluxDbModel.getter({
	    relations: function() {
	      var field, linkTo, ref1;
	      if (!this._relations) {
	        this._relations = {};
	        ref1 = this.fieldProperties;
	        for (field in ref1) {
	          linkTo = ref1[field].linkTo;
	          if (linkTo) {
	            this._relations[field] = {
	              model: this.models[linkTo],
	              idField: field + "Id"
	            };
	          }
	        }
	      }
	      return this._relations;
	    }
	  });


	  /*
	  @query defines and registers a new model for returning sets of records.
	  Example
	    definition:
	      class Post extends FluxModel
	        @query "feed"
	  
	    creates and registers new model class: PostsByFeed
	  
	    example use:
	      class MyComponent extends RestComponent
	        getInitialState: ->
	          posts: models.postsByFeed.get "feedId"
	  
	    example use:
	      class MyComponent extends RestComponent
	        @restSubscriptions
	          postsByFeed: -> "feedId"
	  
	  NOTE: the @queryModel class member MUST be set by an inheriting class before this works.
	  options:
	    keyFromData: (data) -> key
	   */

	  FluxDbModel.query = function(parameterizedField, options) {
	    var ref1, rm, rqm;
	    if (options == null) {
	      options = {};
	    }
	    ModelRegistry.register(rqm = new this.queryModel(rm = this.register(), parameterizedField, options));
	    rm.queryModels.push(rqm);
	    return (ref1 = rm._queriesToUpdate) != null ? ref1.push(function(fields) {
	      return rm._updateQuery(rqm, fields[parameterizedField]);
	    }) : void 0;
	  };

	  function FluxDbModel() {
	    FluxDbModel.__super__.constructor.apply(this, arguments);
	    this.queryModels = [];
	  }

	  FluxDbModel.prototype.put = function(id, fields, callback) {
	    if (this._presentFieldsValid(fields)) {
	      FluxDbModel.__super__.put.call(this, id, this._preprocessFields(fields), callback);
	    } else {
	      callback && fluxStore.onNextReady((function(_this) {
	        return function() {
	          return callback({
	            status: failure,
	            model: _this.name,
	            id: id,
	            pendingData: fields,
	            invalidFields: _this._invalidFields(fields)
	          });
	        };
	      })(this));
	    }
	    return null;
	  };

	  FluxDbModel.prototype.post = function(fields, callback) {
	    if (this._requiredFieldsPresent(fields) && this._presentFieldsValid(fields)) {
	      FluxDbModel.__super__.post.call(this, this._preprocessFields(fields), callback);
	    } else {
	      callback && fluxStore.onNextReady((function(_this) {
	        return function() {
	          return callback({
	            status: failure,
	            pendingData: fields,
	            missingFields: _this._missingFields(fields),
	            invalidFields: _this._invalidFields(fields)
	          });
	        };
	      })(this));
	    }
	    return null;
	  };

	  FluxDbModel.prototype.validatePostFields = function(fields) {
	    if (this._requiredFieldsPresent(fields) && this._presentFieldsValid(fields)) {
	      return null;
	    }
	    return {
	      invalidFields: this._invalidFields(fields),
	      missingFields: this._missingFields(fields)
	    };
	  };

	  FluxDbModel._addField = function(field, options) {
	    return this._getFieldProperties()[field] = options;
	  };

	  FluxDbModel._getFieldProperties = function() {
	    return this.getPrototypePropertyExtendedByInheritance("fieldProperties", {});
	  };

	  FluxDbModel.prototype._missingFields = function(fields) {
	    var fieldName, ref1, required, results;
	    ref1 = this.fieldProperties;
	    results = [];
	    for (fieldName in ref1) {
	      required = ref1[fieldName].required;
	      if (required && !((fields[fieldName] != null) || (fields[required] != null))) {
	        results.push(fieldName);
	      }
	    }
	    return results;
	  };

	  FluxDbModel.prototype._requiredFieldsPresent = function(fields) {
	    var fieldName, ref1, required;
	    ref1 = this.fieldProperties;
	    for (fieldName in ref1) {
	      required = ref1[fieldName].required;
	      if (required && !((fields[fieldName] != null) || (fields[required] != null))) {
	        return false;
	      }
	    }
	    return true;
	  };

	  FluxDbModel.prototype._preprocessFields = function(fields) {
	    var fieldName, oldV, preprocess, processedFields, ref1, v, value;
	    processedFields = null;
	    ref1 = this.fieldProperties;
	    for (fieldName in ref1) {
	      preprocess = ref1[fieldName].preprocess;
	      if (preprocess && ((value = fields[fieldName]) != null)) {
	        if ((v = preprocess(oldV = fields[fieldName])) !== oldV) {
	          processedFields || (processedFields = shallowClone(fields));
	          processedFields[fieldName] = v;
	        }
	      }
	    }
	    return processedFields || fields;
	  };

	  FluxDbModel.prototype._presentFieldsValid = function(fields) {
	    var fieldName, ref1, validate, value;
	    ref1 = this.fieldProperties;
	    for (fieldName in ref1) {
	      validate = ref1[fieldName].validate;
	      if (validate && ((value = fields[fieldName]) != null) && !validate(value)) {
	        return false;
	      }
	    }
	    return true;
	  };

	  FluxDbModel.prototype._invalidFields = function(fields) {
	    var fieldName, ref1, results, validate, value;
	    ref1 = this.fieldProperties;
	    results = [];
	    for (fieldName in ref1) {
	      validate = ref1[fieldName].validate;
	      if (validate && ((value = fields[fieldName]) != null) && !validate(value)) {
	        results.push(fieldName);
	      }
	    }
	    return results;
	  };

	  return FluxDbModel;

	})(FluxDbModelBase);


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, FluxCore, FluxDbModelBase, FluxModel, FluxStatus, FluxStore, Foundation, ModelRegistry, capitalize, decapitalize, emailRegexp, failure, fluxStore, globalCount, idRegExpStr, inspect, isFunction, isHexColor, isId, isNumber, isString, log, merge, missing, nextTick, objectWithout, pending, pluralize, pureMerge, shallowClone, success, time, urlRegexp,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	FluxCore = __webpack_require__(253);

	log = Foundation.log, BaseObject = Foundation.BaseObject, decapitalize = Foundation.decapitalize, pluralize = Foundation.pluralize, pureMerge = Foundation.pureMerge, shallowClone = Foundation.shallowClone, isString = Foundation.isString, emailRegexp = Foundation.emailRegexp, urlRegexp = Foundation.urlRegexp, isNumber = Foundation.isNumber, nextTick = Foundation.nextTick, capitalize = Foundation.capitalize, inspect = Foundation.inspect, isFunction = Foundation.isFunction, merge = Foundation.merge, objectWithout = Foundation.objectWithout, shallowClone = Foundation.shallowClone, time = Foundation.time, globalCount = Foundation.globalCount;

	FluxStore = FluxCore.FluxStore, ModelRegistry = FluxCore.ModelRegistry, FluxModel = FluxCore.FluxModel, FluxStatus = FluxCore.FluxStatus;

	fluxStore = FluxStore.fluxStore;

	pending = FluxStatus.pending, success = FluxStatus.success, failure = FluxStatus.failure, missing = FluxStatus.missing;

	idRegExpStr = "[a-z0-9]+";

	isId = function(v) {
	  return isString(v) && v.match(RegExp("^" + idRegExpStr + "$", "i"));
	};

	isHexColor = function(v) {
	  return isString(v) && v.match(/^#([a-f0-9]{3})|([a-f0-9]{6})/i);
	};


	/*
	FluxDbModelBase

	Basic functionality for DB-like models (CRUD).
	To use: inherit and override at least _storeGet and possibly other overrides.
	 */

	module.exports = FluxDbModelBase = (function(superClass) {
	  extend(FluxDbModelBase, superClass);

	  function FluxDbModelBase() {
	    return FluxDbModelBase.__super__.constructor.apply(this, arguments);
	  }

	  FluxDbModelBase.localStoreCacheEnabled = false;

	  FluxDbModelBase.prototype.get = function(key) {
	    return fluxStore.get(this._name, key);
	  };

	  FluxDbModelBase.prototype.getOrLoad = function(key, callback) {
	    var fluxRecord;
	    if (fluxRecord = this.get(key)) {
	      callback && fluxStore.onNextReady(function() {
	        return callback(fluxRecord);
	      });
	    } else {
	      this.load(key, callback);
	    }
	    return fluxRecord;
	  };

	  FluxDbModelBase.prototype.load = function(key, callback) {
	    var data;
	    this._storeGet(key, (function(_this) {
	      return function(fluxRecord) {
	        if (data) {
	          fluxRecord.data || (fluxRecord.data = data);
	        }
	        fluxStore.update(_this._name, key, fluxRecord);
	        if (fluxRecord.data && FluxDbModelBase.localStoreCacheEnabled) {
	          _this._localStoreSet(key, fluxRecord.data);
	        }
	        return callback && fluxStore.onNextReady(function() {
	          return callback(fluxRecord);
	        });
	      };
	    })(this));
	    if (FluxDbModelBase.localStoreCacheEnabled && (data = this._localStoreGet(key))) {
	      return {
	        data: data,
	        status: success
	      };
	    }
	  };


	  /*
	  calls _storePut (must be overriden by inheriting class)
	  
	  updates fluxRecord as progress is made:
	    start: sets fluxRecord.pendingData to expected result
	    success: sets data to most up-to-date value
	    success or failure: removes fluxRecord.pendingData
	  
	  callback:
	    signature: (fluxRecord) => null
	    invoked on:
	      fluxRecord.status changes
	      success or failure
	  
	  sets additional fields on the fluxStore fluxRecord:
	    putPendingCount: 0 or more. if more, then there is a pending put
	    data: is set to what we think the updated data will be for immediate user viz
	    oldData: what the data was before the put
	    retry: if set, this is a function you can call to retry a failed put. signature: (fluxRecord) -> null
	      NOTE: retry will also call the original callback which may still be waiting for a success.
	        Most the time you'll just call retry() and let the original callback do the work.
	      Note: If there were multiple posts that failed, retry will retry them all.
	   */

	  FluxDbModelBase.prototype.put = function(id, fields, callback) {
	    var ourOldData, ourRetry;
	    ourOldData = null;
	    ourRetry = null;
	    if (id === null || id === void 0 || id === false) {
	      throw new Error("invalid id: " + (inspect(id)));
	    }
	    fluxStore.update(this.name, id, (function(_this) {
	      return function(oldFields) {
	        var res;
	        res = merge(oldFields, {
	          putPendingCount: (oldFields.putPendingCount || 0) + 1,
	          data: merge((oldFields != null ? oldFields.pendingData : void 0) || (oldFields != null ? oldFields.data : void 0), fields),
	          oldData: ourOldData = shallowClone((oldFields != null ? oldFields.oldData : void 0) || (oldFields != null ? oldFields.data : void 0))
	        });
	        return res;
	      };
	    })(this));
	    this._storePut(id, fields, (function(_this) {
	      return function(putStatus) {
	        callback && fluxStore.onNextReady(function() {
	          return callback(putStatus);
	        });
	        if (putStatus.status === pending) {
	          return;
	        }
	        if (putStatus.status === success) {
	          return fluxStore.update(_this.name, id, function(oldFields) {
	            var putPendingCount, res, updatedData;
	            if (oldFields.status !== pending && oldFields.status !== success) {
	              _this.load(id);
	            }
	            updatedData = merge(oldFields.data, fields);
	            fluxStore.onNextReady(function() {
	              return _this._updateQueries(updatedData);
	            });
	            putPendingCount = (oldFields.putPendingCount || 0) - 1;
	            res = merge(oldFields, {
	              data: merge(oldFields.data, fields)
	            });
	            if (putPendingCount <= 0) {
	              delete res.putPendingCount;
	            }
	            if (res.retry === oldFields.retry) {
	              delete res.retry;
	            }
	            if (ourOldData === res.oldData) {
	              delete res.oldData;
	            }
	            return res;
	          });
	        } else {
	          return fluxStore.update(_this.name, id, function(oldFields) {
	            return merge(oldFields, {
	              data: ourOldData === oldFields.oldData ? ourOldData : oldFields.data,
	              putPendingCount: (oldFields.putPendingCount || 0) - 1,
	              retry: ourRetry = function(newCallback) {
	                var otherRetry;
	                ourRetry = (function(_this) {
	                  return function() {
	                    return _this.put(id, fields, function(fluxRecord) {
	                      if (typeof newCallback === "function") {
	                        newCallback(fluxRecord);
	                      }
	                      return typeof callback === "function" ? callback(fluxRecord) : void 0;
	                    });
	                  };
	                })(this);
	                if (otherRetry = oldFields.retry) {
	                  return otherRetry((function(_this) {
	                    return function(fluxRecord) {
	                      if (fluxRecord.status === success) {
	                        return ourRetry();
	                        if (typeof newCallback === "function") {
	                          newCallback(fluxRecord);
	                        }
	                        return typeof callback === "function" ? callback(fluxRecord) : void 0;
	                      }
	                    };
	                  })(this));
	                } else {
	                  return ourRetry();
	                }
	              }
	            });
	          });
	        }
	      };
	    })(this));
	    return null;
	  };


	  /*
	  Updates fluxStore on success, otherwise is a passthrough for _storePost
	  SBD TODO: fluxStore will purge entries with no subscribers, won't POST fluxStore updates always result in a no-op
	    since, by definition, there can be no subscribers yet?
	   */

	  FluxDbModelBase.prototype.post = function(fields, callback) {
	    this._storePost(fields, (function(_this) {
	      return function(fluxRecord) {
	        if (fluxRecord.status === success) {
	          _this._updateQueries(fluxRecord.data);
	          fluxStore.update(_this.name, fluxRecord.data.id, fluxRecord);
	        }
	        return callback && fluxStore.onNextReady(function() {
	          return callback(fluxRecord);
	        });
	      };
	    })(this));
	    return null;
	  };

	  FluxDbModelBase.prototype.keyFromData = function(data) {
	    return data.id;
	  };

	  FluxDbModelBase.prototype._updateQueries = function(updatedRecordData) {};

	  FluxDbModelBase.prototype._storeGet = function(id, callback) {
	    throw new Error("must override. Class: " + this.className);
	  };

	  FluxDbModelBase.prototype._storePut = function(id, fields, callback) {
	    throw new Error("must override. Class: " + this.className);
	  };

	  FluxDbModelBase.prototype._storePost = function(fields, callback) {
	    throw new Error("must override. Class: " + this.className);
	  };

	  return FluxDbModelBase;

	})(FluxModel);


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(263)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, FluxDbModelBase) {
	  var BaseObject, FluxDbQueryModel, capitalize, decapitalize, emailRegexp, inspect, isFunction, isNumber, isString, log, nextTick, objectWithout, pluralize, pureMerge, shallowClone, urlRegexp;
	  log = Foundation.log, BaseObject = Foundation.BaseObject, decapitalize = Foundation.decapitalize, pluralize = Foundation.pluralize, pureMerge = Foundation.pureMerge, shallowClone = Foundation.shallowClone, isString = Foundation.isString, emailRegexp = Foundation.emailRegexp, urlRegexp = Foundation.urlRegexp, isNumber = Foundation.isNumber, nextTick = Foundation.nextTick, capitalize = Foundation.capitalize, inspect = Foundation.inspect, isFunction = Foundation.isFunction, objectWithout = Foundation.objectWithout;

	  /*
	  FluxDbQueryModel
	  
	  Foundation for auto-created query models.
	  
	  Currently only supports differentiating query model names based on a single field-name.
	  
	  To use: inherit and override _storeGet (required)
	  
	  options:
	    keyFromData: (singleRecordData) -> key # override the default keyFromData method
	      should return the key used by this model to fetch the list, aggregate or derrivative "data"
	      that contains the singleRecordData
	  
	    modelName: "string"
	      Normally the model name is generated from the singlesModel name and the parameterized field.
	      This allows you to set an arbitrary alternative model name.
	      Capitalization of the first letter is automatically handled correctly no matter what you pass in.
	   */
	  return FluxDbQueryModel = (function(superClass) {
	    extend(FluxDbQueryModel, superClass);

	    function FluxDbQueryModel(singlesModel, parameterizedField, options) {
	      FluxDbQueryModel.__super__.constructor.call(this, (options != null ? options.modelName : void 0) ? decapitalize(options != null ? options.modelName : void 0) : pluralize(singlesModel.name) + "By" + capitalize(parameterizedField));
	      this._singlesModel = singlesModel;
	      this._parameterizedField = parameterizedField;
	      this.keyFromData = options.keyFromData || options.toFluxKey || eval("(function(data) {return data['" + parameterizedField + "'];})");
	      this._options = options;
	      if (options.toFluxKey) {
	        this.toFluxKey = options.toFluxKey;
	      }
	    }

	    return FluxDbQueryModel;

	  })(FluxDbModelBase);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	var Models;

	module.exports = Models = __webpack_require__(266);

	Models.ApplicationState = __webpack_require__(267);

	Models.VolatileModel = __webpack_require__(268);

	Models.VolatileQueryModel = __webpack_require__(270);

	Models.VolatileStore = __webpack_require__(269);

	Models.finishLoad(["ApplicationState", "VolatileModel", "VolatileQueryModel", "VolatileStore"]);


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var Flux,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Flux = __webpack_require__(251);

	module.exports = Flux.Models || (Flux.Models = (function(superClass) {
	  extend(Models, superClass);

	  function Models() {
	    return Models.__super__.constructor.apply(this, arguments);
	  }

	  Models.namespace = Flux;

	  Models.namespacePath = "Neptune.Art.Flux.Models";

	  return Models;

	})(Neptune.Base));

	Flux.addNamespace(Flux.Models);


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var ApplicationState, BaseObject, FluxCore, FluxModel, FluxStatus, FluxStore, Foundation, failure, fluxStore, isPlainObject, isString, log, merge, mergeInto, missing, pending, plainObjectsDeepEq, propsEq, success,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	FluxCore = __webpack_require__(253);

	BaseObject = Foundation.BaseObject, log = Foundation.log, isString = Foundation.isString, isPlainObject = Foundation.isPlainObject, merge = Foundation.merge, plainObjectsDeepEq = Foundation.plainObjectsDeepEq, mergeInto = Foundation.mergeInto;

	FluxStore = FluxCore.FluxStore, FluxModel = FluxCore.FluxModel, FluxStatus = FluxCore.FluxStatus;

	fluxStore = FluxStore.fluxStore;

	pending = FluxStatus.pending, success = FluxStatus.success, failure = FluxStatus.failure, missing = FluxStatus.missing;

	propsEq = plainObjectsDeepEq;


	/*
	A state-store with the same state API as React Components:
	  setState: (map) -> or (key, value) -> # => null
	  getInitialState: -> # => {}
	  @state: {} # the current State

	NOTE: Components should never access @state. Instead, they should subscribe to state changes:
	Example:
	  createComponentFactory class Top extends FluxComponent
	    @subscriptions
	      showingWelcome: model: "ozAppState"

	  showWelcome: ->
	    @model.ozAppState.showWelcome()

	Usage:
	  Inherit, register and optionally override getInitalState.
	  Note: Each time you inherit creates a new model and a different collection state
	  NOTE: @register immeidately instantiates the OzAppState singleton - which will
	    immediately call getInitialState.
	    Therefor, call @register AFTER defining getInitialState.

	Example:
	  class OzAppState extends ApplicationState

	    getInitialState: ->
	      showingWelcome: true

	    @register()

	    showWelcome: -> @setState "showingWelcome", true
	    hideWelcome: -> @setState "showingWelcome", false
	 */

	module.exports = ApplicationState = (function(superClass) {
	  extend(ApplicationState, superClass);

	  ApplicationState.classProperty("persistant");


	  /*
	  Declare state fields you intend to use.
	  IN: fields
	    map from field names to initial values
	  
	  EFFECTS:
	    initializes @state
	    declares @getters and @setters for each field
	   */

	  ApplicationState.stateFields = function(fields) {
	    var field, initialValue, results;
	    this._stateFields = mergeInto(this._stateFields, fields);
	    results = [];
	    for (field in fields) {
	      initialValue = fields[field];
	      results.push((function(_this) {
	        return function(field) {
	          _this._addSetter(_this.prototype, field, function(v) {
	            return this.setState(field, v);
	          });
	          return _this._addGetter(_this.prototype, field, function() {
	            return this.state[field];
	          });
	        };
	      })(this)(field));
	    }
	    return results;
	  };

	  function ApplicationState() {
	    ApplicationState.__super__.constructor.apply(this, arguments);
	    this.state = this._getInitialState();
	  }


	  /*
	  provided for consistency with React Components
	  To use: override
	  But, using @stateFields works just as well and also declares field getter / setters.
	   */

	  ApplicationState.prototype.getInitialState = function() {
	    return {};
	  };


	  /*
	  option 1:
	    IN: plainObject state-map
	    AFFECT: set many states
	    OUT: state-map
	  
	  option 2:
	    IN: key, value
	    AFFECT: set one state
	    OUT: key
	   */

	  ApplicationState.prototype.setState = function(key, value) {
	    var k, map, v;
	    if (isPlainObject(map = key)) {
	      for (k in map) {
	        v = map[k];
	        if (!(!propsEq(this.state[k], v))) {
	          continue;
	        }
	        this.state[k] = v;
	        this.load(k);
	      }
	    } else if (isString(key) && !propsEq(this.state[key], value)) {
	      this.state[key] = value;
	      this.load(key);
	    }
	    this._saveToLocalStorage();
	    return key;
	  };

	  ApplicationState.prototype.removeState = function(key) {
	    var ret;
	    this._removeFromFluxStore(key);
	    ret = this.state[key];
	    delete this.state[key];
	    return ret;
	  };


	  /*
	  Removes all values in @state.
	  All entries currently in FluxStore become: state: missing
	   */

	  ApplicationState.prototype.clearState = function() {
	    var k, ref, v;
	    ref = this.state;
	    for (k in ref) {
	      v = ref[k];
	      this._removeFromFluxStore(k);
	    }
	    return this.state = {};
	  };

	  ApplicationState.prototype.resetState = function() {
	    return this.replaceState(this._getInitialState());
	  };


	  /*
	  Replace all state with newState.
	  Logically equivelent to:
	    @clearState()
	    @setState newState
	   */

	  ApplicationState.prototype.replaceState = function(newState) {
	    var k, ref, v;
	    ref = this.state;
	    for (k in ref) {
	      v = ref[k];
	      if (!(!newState.hasOwnProperty(k))) {
	        continue;
	      }
	      this._removeFromFluxStore(k);
	      delete this.state[k];
	    }
	    return this.setState(newState);
	  };

	  ApplicationState.prototype.load = function(key, callback) {
	    var fluxRecord;
	    fluxRecord = this.state.hasOwnProperty(key) ? {
	      status: success,
	      data: this.state[key]
	    } : {
	      status: missing
	    };
	    this.updateFluxStore(key, fluxRecord);
	    callback && fluxStore.onNextReady(function() {
	      return callback(fluxRecord);
	    });
	    return fluxRecord;
	  };

	  ApplicationState.prototype._removeFromFluxStore = function(key) {
	    return this.updateFluxStore(key, {
	      status: missing
	    });
	  };

	  ApplicationState.prototype._loadFromLocalStorage = function() {
	    var data, v;
	    if (this["class"].persistant) {
	      data = localStorage.getItem(this.name);
	      if (data) {
	        v = JSON.parse(data);
	      }
	      log({
	        _loadFromLocalStorage: v
	      });
	      return v;
	    }
	  };

	  ApplicationState.prototype._saveToLocalStorage = function(state) {
	    var v;
	    if (state == null) {
	      state = this.state;
	    }
	    if (this["class"].persistant) {
	      localStorage.setItem(this.name, v = JSON.stringify(state));
	      return log({
	        _saveToLocalStorage: v
	      });
	    }
	  };

	  ApplicationState.prototype._getInitialState = function() {
	    return merge(this.getInitialState(), this["class"]._stateFields, (function() {
	      try {
	        return this._loadFromLocalStorage();
	      } catch (undefined) {}
	    }).call(this));
	  };

	  return ApplicationState;

	})(FluxModel);


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(11), __webpack_require__(253), __webpack_require__(269), __webpack_require__(270), __webpack_require__(260)], __WEBPACK_AMD_DEFINE_RESULT__ = function(Foundation, FluxCore, VolatileStore, VolatileQueryModel, FluxDb) {
	  var BaseObject, FluxDbModel, FluxModel, FluxStore, ModelRegistry, VolatileModel, decapitalize, fluxStore, log, pluralize, volatileStore;
	  log = Foundation.log, BaseObject = Foundation.BaseObject, decapitalize = Foundation.decapitalize, pluralize = Foundation.pluralize;
	  FluxStore = FluxCore.FluxStore, FluxModel = FluxCore.FluxModel, ModelRegistry = FluxCore.ModelRegistry;
	  volatileStore = VolatileStore.volatileStore;
	  fluxStore = FluxStore.fluxStore;
	  FluxDbModel = FluxDb.FluxDbModel;
	  return VolatileModel = (function(superClass) {
	    extend(VolatileModel, superClass);

	    VolatileModel.queryModel = VolatileQueryModel;

	    function VolatileModel() {
	      VolatileModel.__super__.constructor.apply(this, arguments);
	      this._queriesToUpdate = [
	        (function(_this) {
	          return function(fields) {
	            return _this._updateQuery(_this, "");
	          };
	        })(this)
	      ];
	      volatileStore.init(this.name);
	    }

	    VolatileModel.prototype._storeGet = function(id, callback) {
	      return volatileStore.get(this.name, id, callback);
	    };

	    VolatileModel.prototype._storePut = function(id, fields, callback) {
	      return volatileStore.put(this.name, id, fields, callback);
	    };

	    VolatileModel.prototype._storePost = function(fields, callback) {
	      return volatileStore.post(this.name, fields, callback);
	    };

	    VolatileModel.prototype._updateQueries = function(fields) {
	      return fluxStore.onNextReady((function(_this) {
	        return function() {
	          var f, i, len, ref, results;
	          ref = _this._queriesToUpdate;
	          results = [];
	          for (i = 0, len = ref.length; i < len; i++) {
	            f = ref[i];
	            results.push(f(fields));
	          }
	          return results;
	        };
	      })(this));
	    };

	    VolatileModel.prototype._updateQuery = function(model, id) {
	      if (fluxStore.get(model.name, id)) {
	        return model.load(id);
	      }
	    };

	    return VolatileModel;

	  })(FluxDbModel);
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, FluxCore, FluxStatus, FluxStore, Foundation, VolatileStore, arrayWithOne, clone, fluxStore, log, merge, mergeInfo, missing, simulateAsyncRequest, slice, success,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	FluxCore = __webpack_require__(253);

	FluxStore = FluxCore.FluxStore, FluxStatus = FluxCore.FluxStatus;

	success = FluxStatus.success, missing = FluxStatus.missing;

	BaseObject = Foundation.BaseObject, mergeInfo = Foundation.mergeInfo, log = Foundation.log, clone = Foundation.clone, slice = Foundation.slice, merge = Foundation.merge, arrayWithOne = Foundation.arrayWithOne;

	fluxStore = FluxStore.fluxStore;

	simulateAsyncRequest = function(asyncCallback) {
	  fluxStore.onNextReady(asyncCallback);
	  return null;
	};

	module.exports = VolatileStore = (function(superClass) {
	  var getDbKey;

	  extend(VolatileStore, superClass);

	  VolatileStore.singletonClass();

	  function VolatileStore() {
	    VolatileStore.__super__.constructor.apply(this, arguments);
	    this._reset();
	  }

	  VolatileStore.prototype._reset = function() {
	    this._nextId = 0;
	    return this._db = {};
	  };

	  VolatileStore.prototype.init = function(listUri) {
	    return this._list(listUri);
	  };

	  VolatileStore.prototype.get = function(modelPrefix, id, requestStatusCallback) {
	    return simulateAsyncRequest((function(_this) {
	      return function() {
	        var dbKey, res;
	        dbKey = getDbKey(modelPrefix, id);
	        return requestStatusCallback((res = clone(_this._db[dbKey])) ? {
	          status: success,
	          data: res
	        } : {
	          status: missing
	        });
	      };
	    })(this));
	  };

	  VolatileStore.prototype.put = function(modelPrefix, id, fields, requestStatusCallback) {
	    return simulateAsyncRequest((function(_this) {
	      return function() {
	        var dbKey;
	        dbKey = getDbKey(modelPrefix, id);
	        return requestStatusCallback({
	          status: success,
	          data: clone(_this._setSingle(modelPrefix, id, dbKey, merge(_this._db[dbKey], fields)))
	        });
	      };
	    })(this));
	  };

	  VolatileStore.prototype.post = function(modelPrefix, fields, requestStatusCallback) {
	    return simulateAsyncRequest((function(_this) {
	      return function() {
	        var dbKey, id;
	        id = (_this._nextId++).toString();
	        dbKey = getDbKey(modelPrefix, id);
	        return requestStatusCallback({
	          status: success,
	          data: clone(_this._setSingle(modelPrefix, id, dbKey, fields))
	        });
	      };
	    })(this));
	  };

	  VolatileStore._getDbKey = getDbKey = function(modelPrefix, id) {
	    if (id && id.length > 0) {
	      return modelPrefix + "/" + id;
	    } else {
	      return modelPrefix;
	    }
	  };

	  VolatileStore.prototype._setSingle = function(modelPrefix, id, dbKey, fields) {
	    return this._list(modelPrefix)[id] = this._db[dbKey] = merge(fields, {
	      id: id
	    });
	  };

	  VolatileStore.prototype._list = function(modelPrefix) {
	    var base;
	    return (base = this._db)[modelPrefix] || (base[modelPrefix] = {});
	  };

	  return VolatileStore;

	})(BaseObject);


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	var FluxDbQueryModel, Foundation, VolatileQueryModel, failure, log, missing, objectWithout, pending, ref, success,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	FluxDbQueryModel = __webpack_require__(264);

	ref = __webpack_require__(256), success = ref.success, failure = ref.failure, pending = ref.pending, missing = ref.missing;

	log = Foundation.log, objectWithout = Foundation.objectWithout;

	module.exports = VolatileQueryModel = (function(superClass) {
	  extend(VolatileQueryModel, superClass);

	  function VolatileQueryModel() {
	    this._storeGet = bind(this._storeGet, this);
	    return VolatileQueryModel.__super__.constructor.apply(this, arguments);
	  }

	  VolatileQueryModel.prototype._storeGet = function(queryParam, callback) {
	    return this._singlesModel._storeGet("", (function(_this) {
	      return function(allRequestStatus) {
	        var fields, k;
	        log({
	          success: success
	        });
	        if (allRequestStatus.status !== 200) {
	          return callback(objectWithout(allRequestStatus, "fluxKey"));
	        } else {
	          return callback({
	            status: allRequestStatus.status,
	            data: (function() {
	              var ref1, results;
	              ref1 = allRequestStatus.data;
	              results = [];
	              for (k in ref1) {
	                fields = ref1[k];
	                if (fields[this._parameterizedField] === queryParam) {
	                  results.push(fields);
	                }
	              }
	              return results;
	            }).call(_this)
	          });
	        }
	      };
	    })(this), true);
	  };

	  return VolatileQueryModel;

	})(FluxDbQueryModel);


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var React;

	module.exports = React = __webpack_require__(272);

	React.FluxComponent = __webpack_require__(273);

	React.FluxComponentBase = __webpack_require__(274);

	React.finishLoad(["FluxComponent", "FluxComponentBase"]);


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	var Flux,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Flux = __webpack_require__(251);

	module.exports = Flux.React || (Flux.React = (function(superClass) {
	  extend(React, superClass);

	  function React() {
	    return React.__super__.constructor.apply(this, arguments);
	  }

	  React.namespace = Flux;

	  React.namespacePath = "Neptune.Art.Flux.React";

	  return React;

	})(Neptune.Base));

	Flux.addNamespace(Flux.React);


/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Component, FluxComponent, FluxComponentBase, FluxCore, FluxStatus, Foundation, ModelRegistry, compactFlatten, createComponentFactory, globalCount, inspect, isFunction, isPlainObject, isString, log, mergeInfo, nextTick, pending, ref, rubyFalse, rubyTrue, success, time,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	FluxCore = __webpack_require__(253);

	FluxComponentBase = __webpack_require__(274);

	ref = Neptune.Art.React, Component = ref.Component, createComponentFactory = ref.createComponentFactory;

	BaseObject = Foundation.BaseObject, nextTick = Foundation.nextTick, mergeInfo = Foundation.mergeInfo, log = Foundation.log, isPlainObject = Foundation.isPlainObject, isString = Foundation.isString, isFunction = Foundation.isFunction, inspect = Foundation.inspect, time = Foundation.time, globalCount = Foundation.globalCount, rubyTrue = Foundation.rubyTrue, rubyFalse = Foundation.rubyFalse, compactFlatten = Foundation.compactFlatten;

	ModelRegistry = FluxCore.ModelRegistry, FluxStatus = FluxCore.FluxStatus;

	pending = FluxStatus.pending, success = FluxStatus.success;


	/*
	FluxComponent

	Declarative (automatic) Flux Subscription support:
	- @subscriptions declaration method

	TODO: _prepareSubscription should be triggered via createWithPostCreate rather than with each component creation
	 */

	module.exports = FluxComponent = (function(superClass) {
	  extend(FluxComponent, superClass);

	  FluxComponent.createFluxComponentFactory = function(spec) {
	    return createComponentFactory(spec, FluxComponent);
	  };

	  function FluxComponent() {
	    FluxComponent.__super__.constructor.apply(this, arguments);
	    this._autoMaintainedSubscriptions = {};
	  }


	  /*
	  @subscriptions takes an object as input with each entry describing one subscription.
	  A subscription consists of 3 parts:
	    stateField:   the field in @state which will be set with the subscribed-to data
	    model:        the subscribed-to model (from the ModelRegistry)
	    key:          key for the specific, subscribed-to data in the model
	  
	  There are three different ways to define the subscription. Each entry in subscriptionMap
	  can take any of the three patterns:
	  
	  Entry-pattern 1: Fully Explicit
	  
	    @subscriptions
	      stateField:
	        model: "modelName", model-instance or (props) -> "modelName"
	        key:   "key",       key-object     or (props) -> "key" or key-object
	  
	  Entry-pattern 2: Implicit-key-from-stateField, Explicit-model
	  
	    DEPRICATED: See Entry-pattern 5.
	  
	    @subscriptions
	      stateField:
	        model: "modelName", model-instance or (props) -> "modelName"
	  
	    In this pattern, the key is the set to the same name as stateField. This is useful when
	    subscribing to a known singleton value.
	  
	    For example, when using the ApplicationState model, you might to something like this:
	  
	      @subscriptions
	        currentUser: model: "applicationState"
	  
	  Entry-pattern 3: Implicit-model, Explicit-key
	  
	    @subscriptions
	      stateField: "key" or (props) -> "key" or key-object
	  
	    In this pattern the name of the model is the same as the stateField. This is the most common
	    pattern. Example:
	  
	      @subscriptions
	        user: (props) -> props.userId
	  
	    Or, using coffeescript shorthand:
	  
	      @subscriptions
	        user: ({userId}) -> userId
	  
	    NOTE: If the key is not a function, it must be a string. Otherwise the subscription initialization
	    will detect one of the other patterns. To use this pattern with a non-string key, do this:
	  
	      @subscriptions
	        following: (props) -> userId: props.userId, feedId: props.feedId
	  
	  Entry-pattern 4: Implicit-key-from-props, implicit-model
	  
	    @subscriptions "myField"
	  
	    is equivelent to:
	  
	    @subscriptions
	      myField:
	        model:  myField
	        key:    ({myField, myFieldId}) -> myField?.id || myFieldId
	  
	    Example:
	  
	      this:
	  
	        @subscriptions "post"
	  
	      is short for:
	  
	        @subscriptions
	          post:
	            model:  "post"
	            key:    ({post, postId}) -> post?.id || postId
	  
	    TODO: What about a subscription to another post in the same component?
	  
	      Ex: @subscriptions "post", "chapterPost"
	  
	      I think the answer may be to declare model aliases. If there was a model
	      named "chapterPost" declared, FluxComponent wouldn't need any changes. The
	      trick is we want the chapterPost model to actually be the "post" model - i.e.
	      if both a post and chapterPost subscription had the same key, they should share
	      they same FluxStore entry.
	  
	      I think we can do this fairly well via that FluxModel. Something like this:
	  
	        class Post extends FluxModel
	          @aliases "chapterPost"
	  
	      In fact... couldn't we just make @register assign the model instance to both .posts and .chapterPost?
	  
	      I think that's all we need!
	  
	  Entry-pattern 5: Implicit-key-from-fieldName, implicit-model
	  
	    @subscriptions "modelName.fieldName"
	  
	    is equivelent to:
	  
	    @subscriptions
	      fieldName:
	        key: fieldName
	        model: modelName
	  
	  Key and Model functions:
	  
	    If the key or model is a function, the function:
	  
	      is executed without @ set
	      inputs: (props)
	      outputs: key or modelName respectively
	  
	  Key functions:
	  
	    Key-functions are called initially during getInitialState to set up initial
	    subscriptions.
	  
	    If the key-function returns null, all depenendent state fields will be set to
	    null. No other action will be taken.
	  
	    Whenever @props changes (e.g. when componentWillReceiveProps is called), these
	    key-functions are re-evaluated. If the return value changes, subscriptions are
	    updated and new data is requested where needed.
	   */

	  FluxComponent.subscriptions = function() {
	    var arg, fn, fn1, i, j, len, len1, ref1, ref2, stateField, subscriptionMap, subscriptionName, subscriptionNames, subscriptionProperties, value;
	    subscriptionProperties = this._getSubscriptionProperties();
	    ref1 = compactFlatten(arguments);
	    for (i = 0, len = ref1.length; i < len; i++) {
	      arg = ref1[i];
	      if (isPlainObject(subscriptionMap = arg)) {
	        fn = (function(_this) {
	          return function(stateField, value) {
	            return subscriptionProperties[stateField] = {
	              stateField: stateField,
	              params: value
	            };
	          };
	        })(this);
	        for (stateField in subscriptionMap) {
	          value = subscriptionMap[stateField];
	          fn(stateField, value);
	        }
	      } else if (isString(subscriptionNames = arg)) {
	        ref2 = subscriptionNames.match(/[_a-zA-Z][._a-zA-Z0-9]*/g);
	        fn1 = function(subscriptionName) {
	          var _, field, matches, modelName, subscriptionNameId;
	          if (matches = subscriptionName.match(/([a-zA-Z0-9]+)\.([a-zA-Z0-9]+)/)) {
	            _ = matches[0], modelName = matches[1], field = matches[2];
	            return subscriptionProperties[field] = {
	              stateField: field,
	              params: {
	                model: modelName,
	                key: field
	              }
	            };
	          } else {
	            subscriptionNameId = subscriptionName + "Id";
	            return subscriptionProperties[subscriptionName] = {
	              stateField: subscriptionName,
	              params: {
	                model: subscriptionName,
	                key: function(props) {
	                  var ref3;
	                  return ((ref3 = props[subscriptionName]) != null ? ref3.id : void 0) || props[subscriptionNameId];
	                }
	              }
	            };
	          }
	        };
	        for (j = 0, len1 = ref2.length; j < len1; j++) {
	          subscriptionName = ref2[j];
	          fn1(subscriptionName);
	        }
	      }
	    }
	    return null;
	  };

	  FluxComponent.prototype.preprocessProps = function(newProps) {
	    this._updateAllSubscriptions(newProps = FluxComponent.__super__.preprocessProps.apply(this, arguments));
	    return newProps;
	  };

	  FluxComponent._getSubscriptionProperties = function() {
	    return this.getPrototypePropertyExtendedByInheritance("subscriptionProperties", {});
	  };

	  FluxComponent._prepareSubscription = function(subscription) {
	    var error, key, model, modelName, options, params, stateField;
	    stateField = subscription.stateField, params = subscription.params;
	    if (isPlainObject(options = params)) {
	      model = options.model, key = options.key;
	      if (key == null) {
	        key = stateField;
	      }
	    } else {
	      key = params;
	      model = stateField;
	    }
	    if (!model) {
	      throw new Error("no model specified in subscription: " + (inspect({
	        stateField: stateField,
	        model: model,
	        "class": this.name,
	        subscription: subscription
	      })));
	    }
	    if (isString(model)) {
	      modelName = model;
	      model = ModelRegistry.models[modelName];
	      if (!model) {
	        console.error(error = "RestComponent::subscriptions() model " + modelName + " not registered (component = " + (this.getClassPathName()) + ")");
	        throw new Error(error);
	      }
	    }
	    subscription.model = model;
	    return subscription.keyFunction = isFunction(key) ? key : function() {
	      return key;
	    };
	  };

	  FluxComponent.postCreate = function() {
	    if (this.prototype.subscriptions) {
	      this.subscriptions(this.prototype.subscriptions);
	    }
	    this._prepareSubscriptions();
	    return FluxComponent.__super__.constructor.postCreate.apply(this, arguments);
	  };

	  FluxComponent._prepareSubscriptions = function() {
	    var ref1, results, stateField, subscription;
	    ref1 = this._getSubscriptionProperties();
	    results = [];
	    for (stateField in ref1) {
	      subscription = ref1[stateField];
	      results.push(this._prepareSubscription(subscription));
	    }
	    return results;
	  };

	  FluxComponent.prototype._toFluxKey = function(stateField, key, model, props) {
	    var ref1;
	    if (rubyFalse(key)) {
	      key = (ref1 = props[stateField]) != null ? ref1.id : void 0;
	    }
	    if (rubyTrue(key)) {
	      return model.toFluxKey(key);
	    } else {
	      return null;
	    }
	  };

	  FluxComponent.prototype._updateSubscription = function(stateField, key, model, props) {
	    var existingSubscriptionFluxKey, fluxKey, initialData;
	    fluxKey = this._toFluxKey(stateField, key, model, props);
	    if (!rubyTrue(existingSubscriptionFluxKey = this._autoMaintainedSubscriptions[stateField])) {
	      existingSubscriptionFluxKey = null;
	    }
	    if (model && (fluxKey !== null || fluxKey !== existingSubscriptionFluxKey)) {
	      if (existingSubscriptionFluxKey !== null) {
	        this.unsubscribe(model, existingSubscriptionFluxKey, stateField);
	      }
	      this._autoMaintainedSubscriptions[stateField] = fluxKey;
	      if (rubyTrue(fluxKey)) {
	        this.setState(stateField + "Reload", function() {
	          return model.load(fluxKey);
	        });
	        this.subscribe(model, fluxKey, stateField, (initialData = props[stateField]) ? {
	          status: success,
	          data: initialData
	        } : void 0);
	      } else {
	        this.setStateFromFluxRecord(stateField, {
	          status: success
	        });
	      }
	      return true;
	    }
	  };

	  FluxComponent.prototype._updateAllSubscriptions = function(props) {
	    var keyFunction, model, ref1, stateField, subscriptionProps;
	    if (props == null) {
	      props = this.props;
	    }
	    ref1 = this["class"]._getSubscriptionProperties();
	    for (stateField in ref1) {
	      subscriptionProps = ref1[stateField];
	      keyFunction = subscriptionProps.keyFunction, model = subscriptionProps.model;
	      if (isFunction(model)) {
	        model = model(props);
	      }
	      if (isString(model)) {
	        if (!(model = this.models[model])) {
	          console.error("Could not find model named " + (inspect(model)) + " for subscription in component " + this.inspectedName);
	        }
	      }
	      if (model) {
	        this._updateSubscription(stateField, keyFunction(props), model, props);
	      }
	    }
	    return null;
	  };

	  return FluxComponent;

	})(FluxComponentBase);


/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var BaseObject, Component, FluxComponentBase, ModelRegistry, capitalize, fluxStore, globalCount, log, mergeInfo, nextTick, ref, time,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	ref = __webpack_require__(11), log = ref.log, BaseObject = ref.BaseObject, nextTick = ref.nextTick, mergeInfo = ref.mergeInfo, capitalize = ref.capitalize, globalCount = ref.globalCount, time = ref.time;

	fluxStore = __webpack_require__(258).fluxStore;

	ModelRegistry = __webpack_require__(259);

	Component = Neptune.Art.React.Component;


	/*
	FluxComponentBase

	Basic Flux Subscription support:
	 - manual subscribe and unsubscribe
	 - automatic unsubscribeAll on component unmount
	 - setStateFromFluxRecord method
	 - access to @models
	 */

	module.exports = FluxComponentBase = (function(superClass) {
	  var combinedKey;

	  extend(FluxComponentBase, superClass);

	  function FluxComponentBase() {
	    FluxComponentBase.__super__.constructor.apply(this, arguments);
	    this._subscriptions = {};
	  }

	  FluxComponentBase.getter({
	    models: function() {
	      return ModelRegistry.models;
	    }
	  });

	  FluxComponentBase._combinedKey = combinedKey = function(model, fluxKey, stateField) {
	    return model.mame + "/" + stateField + "/" + fluxKey;
	  };

	  FluxComponentBase.prototype.subscribe = function(model, fluxKey, stateField, initialFluxRecord) {
	    var ckey, subscriptionFunction;
	    ckey = combinedKey(model, fluxKey, stateField);
	    return this.setStateFromFluxRecord(stateField, this._subscriptions[ckey] ? (console.error("already subscribed"), fluxStore.get(model.name, fluxKey)) : (this._subscriptions[ckey] = {
	      fluxKey: fluxKey,
	      model: model,
	      subscriptionFunction: subscriptionFunction = (function(_this) {
	        return function(fluxRecord, subscribers) {
	          return _this.setStateFromFluxRecord(stateField, fluxRecord);
	        };
	      })(this)
	    }, fluxStore.subscribe(model.name, fluxKey, subscriptionFunction, initialFluxRecord)));
	  };

	  FluxComponentBase.prototype.unsubscribe = function(model, fluxKey, stateField) {
	    var ckey, subscription;
	    ckey = combinedKey(model, fluxKey, stateField);
	    if (subscription = this._subscriptions[ckey]) {
	      fluxStore.unsubscribe(model.name, fluxKey, subscription.subscriptionFunction);
	      return delete this._subscriptions[ckey];
	    }
	  };

	  FluxComponentBase.prototype.setStateFromFluxRecord = function(baseField, fluxRecord) {
	    this.setState(baseField, fluxRecord != null ? fluxRecord.data : void 0);
	    if (fluxRecord.status) {
	      this.setState(baseField + "Status", fluxRecord.status);
	    }
	    if (fluxRecord.progress != null) {
	      this.setState(baseField + "Progress", fluxRecord.progress);
	    }
	    return this.setState(baseField + "FluxRecord", fluxRecord);
	  };

	  FluxComponentBase.prototype.unsubscribeAll = function() {
	    var ckey, fluxKey, model, ref1, ref2, subscriptionFunction;
	    ref1 = this._subscriptions;
	    for (ckey in ref1) {
	      ref2 = ref1[ckey], model = ref2.model, fluxKey = ref2.fluxKey, subscriptionFunction = ref2.subscriptionFunction;
	      fluxStore.unsubscribe(model.name, fluxKey, subscriptionFunction);
	    }
	    return this._subscriptions = {};
	  };

	  FluxComponentBase.prototype.componentWillUnmount = function() {
	    FluxComponentBase.__super__.componentWillUnmount.apply(this, arguments);
	    return this.unsubscribeAll();
	  };

	  return FluxComponentBase;

	})(Component);


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	var ApplicationState, BaseObject, Flux, FluxComponent, FluxCore, FluxModel, FluxReact, FluxStatus, FluxStore, Foundation, ModelRegistry, createAllClass, fluxStore, select;

	Foundation = __webpack_require__(11);

	Flux = __webpack_require__(251);

	FluxCore = __webpack_require__(253);

	FluxReact = __webpack_require__(271);

	ApplicationState = __webpack_require__(267);

	FluxStore = FluxCore.FluxStore, ModelRegistry = FluxCore.ModelRegistry, FluxModel = FluxCore.FluxModel, FluxStatus = FluxCore.FluxStatus;

	FluxComponent = FluxReact.FluxComponent;

	BaseObject = Foundation.BaseObject, select = Foundation.select;

	createAllClass = BaseObject.createAllClass;

	fluxStore = FluxStore.fluxStore;

	createAllClass(Flux, FluxStatus, {
	  FluxStore: FluxStore,
	  FluxModel: FluxModel,
	  ModelRegistry: ModelRegistry,
	  FluxComponent: FluxComponent,
	  ApplicationState: ApplicationState,
	  models: ModelRegistry.models,
	  createFluxComponentFactory: FluxComponent.createFluxComponentFactory,
	  fluxStore: fluxStore
	});

	Flux._reset = function() {
	  fluxStore._reset();
	  return ModelRegistry._reset();
	};


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	var Data;

	module.exports = Data = __webpack_require__(277);

	Data.Nvc = __webpack_require__(278);

	Data.finishLoad(["Nvc"]);


/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	var App,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	App = __webpack_require__(3);

	module.exports = App.Data || (App.Data = (function(superClass) {
	  extend(Data, superClass);

	  function Data() {
	    return Data.__super__.constructor.apply(this, arguments);
	  }

	  Data.namespace = App;

	  Data.namespacePath = "Neptune.Nvc.App.Data";

	  return Data;

	})(Neptune.Base));

	App.addNamespace(App.Data);


/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	var Foundation, HotStyleProps, Nvc, arrayToFalseMap, log, splitOnLines,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	HotStyleProps = __webpack_require__(235).HotStyleProps;

	log = Foundation.log, arrayToFalseMap = Foundation.arrayToFalseMap;

	splitOnLines = function(str) {
	  return str.split("\n");
	};

	module.exports = Nvc = (function(superClass) {
	  extend(Nvc, superClass);

	  function Nvc() {
	    return Nvc.__super__.constructor.apply(this, arguments);
	  }

	  Nvc.categories = ["needs", "posEmotions", "negEmotions"];

	  Nvc.needs = {
	    connection: arrayToFalseMap(splitOnLines("acceptance\naffection\nappreciation\nbelonging\ncooperation\ncommunication\ncloseness\ncommunity\ncompanionship\ncompassion\nconsideration\nconsistency\nempathy\ninclusion\nintimacy\nlove\nmutuality\nnurturing\nrespect/self-respect\nsafety\nsecurity\nstability\nsupport\nto know and be known\nto see and be seen\nto understand and be understood\ntrust\nwarmth")),
	    "physical well being": arrayToFalseMap(splitOnLines("air\nfood\nmovement/exercise\nrest/sleep\nsexual expression\nsafety\nshelter\ntouch\nwater")),
	    honesty: arrayToFalseMap(splitOnLines("authenticity\nintegrity\npresence")),
	    play: arrayToFalseMap(splitOnLines("joy\nhumor")),
	    peace: arrayToFalseMap(splitOnLines("beauty\ncommunion\nease\nequality\nharmony\ninspiration\norder")),
	    autonomy: arrayToFalseMap(splitOnLines("choice\nfreedom\nindependence\nspace\nspontaneity")),
	    meaning: arrayToFalseMap(splitOnLines("awareness\ncelebration of life\nchallenge\nclarity\ncompetence\nconsciousness\ncontribution\ncreativity\ndiscovery\nefficacy\neffectiveness\ngrowth\nhope\nlearning\nmourning\nparticipation\npurpose\nself-expression\nstimulation\nto matter\nunderstanding"))
	  };

	  Nvc.posEmotions = {
	    affectionate: arrayToFalseMap(splitOnLines("compassionate\nfriendly\nloving\nopen hearted\nsympathetic\ntender\nwarm")),
	    engaged: arrayToFalseMap(splitOnLines("absorbed\nalert\ncurious\nengrossed\nenchanted\nentranced\nfascinated\ninterested\nintrigued\ninvolved\nspellbound\nstimulated")),
	    hopeful: arrayToFalseMap(splitOnLines("expectant\nencouraged\noptimistic")),
	    confident: arrayToFalseMap(splitOnLines("empowered\nopen\nproud\nsafe\nsecure")),
	    excited: arrayToFalseMap(splitOnLines("amazed\nanimated\nardent\naroused\nastonished\ndazzled\neager\nenergetic\nenthusiastic\ngiddy\ninvigorated\nlively\npassionate\nsurprised\nvibrant")),
	    grateful: arrayToFalseMap(splitOnLines("appreciative\nmoved\nthankful\ntouched")),
	    inspired: arrayToFalseMap(splitOnLines("amazed\nawed\nwonder")),
	    joyful: arrayToFalseMap(splitOnLines("amused\ndelighted\nglad\nhappy\njubilant\npleased\ntickled")),
	    exhilarated: arrayToFalseMap(splitOnLines("blissful\necstatic\nelated\nenthralled\nexuberant\nradiant\nrapturous\nthrilled")),
	    peaceful: arrayToFalseMap(splitOnLines("calm\nclear headed\ncomfortable\ncentered\ncontent\nequanimous\nfulfilled\nmellow\nquiet\nrelaxed\nrelieved\nsatisfied\nserene\nstill\ntranquil\ntrusting"))
	  };

	  Nvc.negEmotions = {
	    afraid: arrayToFalseMap(splitOnLines("apprehensive\ndread\nforeboding\nfrightened\nmistrustful\npanicked\npetrified\nscared\nsuspicious\nterrified\nwary\nworried")),
	    annoyed: arrayToFalseMap(splitOnLines("aggravated\ndismayed\ndisgruntled\ndispleased\nexasperated\nfrustrated\nimpatient\nirritated\nirked")),
	    angry: arrayToFalseMap(splitOnLines("enraged\nfurious\nincensed\nindignant\nirate\nlivid\noutraged\nresentful")),
	    aversion: arrayToFalseMap(splitOnLines("animosity\nappalled\ncontempt\ndisgusted\ndislike\nhate\nhorrified\nhostile\nrepulsed")),
	    confused: arrayToFalseMap(splitOnLines("ambivalent\nbaffled\nbewildered\ndazed\nhesitant\nlost\nmystified\nperplexed\npuzzled\ntorn")),
	    disconnected: arrayToFalseMap(splitOnLines("alienated\naloof\napathetic\nbored\ncold\ndetached\ndistant\ndistracted\nindifferent\nnumb\nremoved\nuninterested\nwithdrawn")),
	    disquiet: arrayToFalseMap(splitOnLines("agitated\nalarmed\ndiscombobulated\ndisconcerted\ndisturbed\nperturbed\nrattled\nrestless\nshocked\nstartled\nsurprised\ntroubled\nturbulent\nturmoil\nuncomfortable\nuneasy\nunnerved\nunsettled\nupset")),
	    embarrassed: arrayToFalseMap(splitOnLines("ashamed\nchagrined\nflustered\nguilty\nmortified\nself-conscious")),
	    fatigue: arrayToFalseMap(splitOnLines("beat\nburnt out\ndepleted\nexhausted\nlethargic\nlistless\nsleepy\ntired\nweary\nworn out")),
	    pain: arrayToFalseMap(splitOnLines("agony\nanguished\nbereaved\ndevastated\ngrief\nheartbroken\nhurt\nlonely\nmiserable\nregretful\nremorseful")),
	    sad: arrayToFalseMap(splitOnLines("depressed\ndejected\ndespair\ndespondent\ndisappointed\ndiscouraged\ndisheartened\nforlorn\ngloomy\nheavy hearted\nhopeless\nmelancholy\nunhappy\nwretched")),
	    tense: arrayToFalseMap(splitOnLines("anxious\ncranky\ndistressed\ndistraught\nedgy\nfidgety\nfrazzled\nirritable\njittery\nnervous\noverwhelmed\nrestless\nstressed out")),
	    vulnerable: arrayToFalseMap(splitOnLines("fragile\nguarded\nhelpless\ninsecure\nleery\nreserved\nsensitive\nshaky")),
	    yearning: arrayToFalseMap(splitOnLines("envious\njealous\nlonging\nnostalgic\npining\nwistful"))
	  };

	  Nvc.core = {
	    needs: Nvc.needs,
	    posEmotions: Nvc.posEmotions,
	    negEmotions: Nvc.negEmotions
	  };

	  return Nvc;

	})(HotStyleProps);


/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	var Components;

	module.exports = Components = __webpack_require__(280);

	Components.App = __webpack_require__(281);

	Components.Pages = __webpack_require__(282);

	Components.finishLoad(["App"]);


/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	var App,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	App = __webpack_require__(3);

	module.exports = App.Components || (App.Components = (function(superClass) {
	  extend(Components, superClass);

	  function Components() {
	    return Components.__super__.constructor.apply(this, arguments);
	  }

	  Components.namespace = App;

	  Components.namespacePath = "Neptune.Nvc.App.Components";

	  return Components;

	})(Neptune.Base));

	App.addNamespace(App.Components);


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var CanvasElement, Foundation, Namespace, Pages, React, createComponentFactory, inspect, log;

	Foundation = __webpack_require__(11);

	React = __webpack_require__(235);

	Namespace = __webpack_require__(280);

	Pages = __webpack_require__(282);

	log = Foundation.log, inspect = Foundation.inspect;

	createComponentFactory = React.createComponentFactory, CanvasElement = React.CanvasElement;

	module.exports = createComponentFactory({
	  module: module,
	  render: function() {
	    return CanvasElement({
	      canvasId: "artCanvas"
	    }, Pages.ShowMap());
	  }
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	var Pages;

	module.exports = Pages = __webpack_require__(283);

	Pages.ShowMap = __webpack_require__(284);

	Pages.finishLoad(["ShowMap"]);


/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	var Components,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Components = __webpack_require__(280);

	module.exports = Components.Pages || (Components.Pages = (function(superClass) {
	  extend(Pages, superClass);

	  function Pages() {
	    return Pages.__super__.constructor.apply(this, arguments);
	  }

	  Pages.namespace = Components;

	  Pages.namespacePath = "Neptune.Nvc.App.Components.Pages";

	  return Pages;

	})(Neptune.Base));

	Components.addNamespace(Components.Pages);


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var Atomic, CanvasElement, Component, Element, FluxComponent, Foundation, MapLine, Namespace, Nvc, OutlineElement, PagingScrollElement, React, RectangleElement, ShowMap, TabBar, TabButton, TextElement, Top, arrayWith, capitalize, createComponentFactory, createFluxComponentFactory, inspect, isPlainObject, log, peek, point, ref, textStyle,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	Foundation = __webpack_require__(11);

	React = __webpack_require__(235);

	Atomic = __webpack_require__(93);

	Namespace = __webpack_require__(283);

	Nvc = __webpack_require__(276).Nvc;

	ref = __webpack_require__(81), createFluxComponentFactory = ref.createFluxComponentFactory, FluxComponent = ref.FluxComponent;

	point = Atomic.point;

	log = Foundation.log, inspect = Foundation.inspect, isPlainObject = Foundation.isPlainObject, capitalize = Foundation.capitalize, peek = Foundation.peek, arrayWith = Foundation.arrayWith;

	createComponentFactory = React.createComponentFactory, Component = React.Component, Element = React.Element, CanvasElement = React.CanvasElement, RectangleElement = React.RectangleElement, TextElement = React.TextElement, PagingScrollElement = React.PagingScrollElement, OutlineElement = React.OutlineElement;

	textStyle = {
	  color: "#000a",
	  fontFamily: "sans-serif",
	  fontSize: 18
	};

	MapLine = createFluxComponentFactory({
	  drillIn: function() {
	    var category, ref1, showSubMap, subMap;
	    ref1 = this.props, category = ref1.category, subMap = ref1.subMap, showSubMap = ref1.showSubMap;
	    if (subMap) {
	      this.models.navState.currentMap = subMap;
	      return this.models.navState.currentPath = arrayWith(this.models.navState.currentPath, category);
	    }
	  },
	  render: function() {
	    var category, color, indent, ref1, selected, subMap;
	    ref1 = this.props, category = ref1.category, subMap = ref1.subMap, selected = ref1.selected, color = ref1.color, indent = ref1.indent;
	    color = selected ? "orange" : "white";
	    indent || (indent = 0);
	    return Element({
	      size: {
	        wcw: 1,
	        hch: 1
	      },
	      on: {
	        pointerClick: this.drillIn
	      }
	    }, RectangleElement({
	      inFlow: false,
	      color: "white",
	      animate: {
	        to: {
	          color: color
	        }
	      },
	      padding: 3
	    }), TextElement(textStyle, {
	      size: {
	        hch: 1,
	        wcw: 1
	      },
	      padding: subMap ? 20 : 15,
	      align: "centerLeft",
	      text: category
	    }));
	  }
	});

	ShowMap = createComponentFactory({
	  module: module,
	  setShowSubMap: function(props) {
	    var ref1;
	    if (props.category === ((ref1 = this.state.showSubMap) != null ? ref1.category : void 0)) {
	      return this.clearShowSubMap();
	    } else {
	      return this.setState({
	        showSubMap: props
	      });
	    }
	  },
	  clearShowSubMap: function() {
	    return this.setState({
	      showSubMap: false
	    });
	  },
	  render: function() {
	    var animate, category, indent, k, map, ref1, showSubMap, v;
	    ref1 = this.props, map = ref1.map, category = ref1.category, indent = ref1.indent, animate = ref1.animate;
	    showSubMap = this.state.showSubMap;
	    return Element({
	      size: {
	        ps: 1
	      },
	      cacheDraw: true,
	      childrenLayout: "column",
	      animators: "axis",
	      voidProps: {
	        axis: point(-1, 0)
	      }
	    }, isPlainObject(map) ? Element({
	      size: {
	        ps: 1
	      },
	      childrenAlignment: "centerCenter",
	      childrenLayout: "flow"
	    }, (function() {
	      var results;
	      results = [];
	      for (k in map) {
	        v = map[k];
	        v && (showSubMap || (showSubMap = {
	          category: k,
	          map: v
	        }));
	        results.push(MapLine({
	          category: k,
	          subMap: v,
	          indent: indent,
	          selected: (showSubMap != null ? showSubMap.category : void 0) === k,
	          showSubMap: this.setShowSubMap
	        }));
	      }
	      return results;
	    }).call(this)) : TextElement(textStyle, {
	      padding: 10,
	      size: {
	        ww: 1,
	        hch: 1
	      },
	      text: map.join(', ')
	    }));
	  }
	});

	TabButton = createFluxComponentFactory({
	  pointerClick: function() {
	    var map, path, ref1;
	    ref1 = this.props, path = ref1.path, map = ref1.map;
	    this.models.navState.currentPath = path;
	    return this.models.navState.currentMap = map;
	  },
	  render: function() {
	    var emojiMap, emojiText, props, ref1, selected, text;
	    ref1 = this.props, text = ref1.text, selected = ref1.selected;
	    emojiMap = {
	      needs: "🍎",
	      negEmotions: "☹️",
	      posEmotions: "😀"
	    };
	    props = (emojiText = emojiMap[text]) ? {
	      text: emojiText,
	      fontSize: 32,
	      color: "black"
	    } : {
	      text: text
	    };
	    return Element({
	      on: {
	        pointerClick: this.pointerClick
	      }
	    }, selected && RectangleElement({
	      color: "orange",
	      padding: 5,
	      radius: 5
	    }), TextElement(textStyle, props, {
	      size: {
	        ps: 1
	      },
	      align: .5
	    }));
	  }
	});

	TabBar = createFluxComponentFactory({
	  subscriptions: "navState.currentPath navState.currentMap",
	  render: function() {
	    var currentMap, currentPath, i, k, p, path, ref1, rootMap;
	    ref1 = this.state, currentPath = ref1.currentPath, currentMap = ref1.currentMap;
	    return Element({
	      size: {
	        ww: 1,
	        h: 50
	      },
	      voidProps: {
	        size: {
	          ww: 1,
	          h: 0
	        }
	      },
	      animators: "size"
	    }, RectangleElement({
	      color: "white"
	    }), Element({
	      childrenLayout: "row",
	      padding: function(ps) {
	        return {
	          h: ps.x / 12
	        };
	      }
	    }, (function() {
	      var j, l, len, len1, ref2, results, results1;
	      switch (currentPath.length) {
	        case 0:
	        case 1:
	          ref2 = Nvc.categories;
	          results = [];
	          for (j = 0, len = ref2.length; j < len; j++) {
	            k = ref2[j];
	            results.push(TabButton({
	              path: [k],
	              map: Nvc[k],
	              text: k,
	              selected: k === peek(currentPath)
	            }));
	          }
	          return results;
	          break;
	        default:
	          rootMap = Nvc.core;
	          path = [];
	          results1 = [];
	          for (i = l = 0, len1 = currentPath.length; l < len1; i = ++l) {
	            p = currentPath[i];
	            path = arrayWith(path, p);
	            log({
	              element: p,
	              path: path,
	              subKeyts: Object.keys(rootMap[p] || {})
	            });
	            results1.push(TabButton({
	              path: path,
	              map: rootMap = rootMap[p],
	              text: p,
	              selected: i === currentPath.length - 1
	            }));
	          }
	          return results1;
	      }
	    })()));
	  }
	});

	module.exports = createFluxComponentFactory(Top = (function(superClass) {
	  extend(Top, superClass);

	  function Top() {
	    return Top.__super__.constructor.apply(this, arguments);
	  }

	  Top.prototype.module = module;

	  Top.prototype.subscriptions = "navState.currentPath navState.currentMap";

	  Top.prototype.render = function() {
	    var currentMap, currentPath, currentTab, ref1;
	    ref1 = this.state, currentPath = ref1.currentPath, currentMap = ref1.currentMap;
	    currentTab = peek(currentPath);
	    log({
	      currentTab: currentTab
	    }, currentPath);
	    return Element({
	      size: {
	        ps: 1
	      },
	      childrenLayout: "column"
	    }, RectangleElement({
	      inFlow: false,
	      color: "#f9f9f9"
	    }), Element({
	      size: {
	        ps: 1
	      }
	    }, currentMap && ShowMap({
	      key: currentTab,
	      category: "NVC",
	      map: currentMap
	    })), TabBar());
	  };

	  return Top;

	})(FluxComponent));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)(module)))

/***/ }
/******/ ]);