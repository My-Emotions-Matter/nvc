import &ArtSuite
{dataNodes} = &Data

class NavState extends ApplicationState

  @stateFields
    selectedKey: :about
    keyPath: [] :about
    currentTab:     null
    searchResults:  []
    searchQuery:    null

  selectKey: (key) ->
    if key?
      @clearCurrentTab()

      n = node = &Data.dataNodes[key]
      keyPath = []
      array to node.depth
        keyPath[n.depth] = n.key
        n = dataNodes[n.parentKey]

      @setKeyPath keyPath

  setKeyPath: (keyPath) ->
    @setState
      selectedKey:  peek keyPath
      keyPath:      keyPath
    keyPath

  clearSelectedKey: ->
    @setState
      selectedKey: null
      keyPath: []

  toggleSearchVisible: ->
    if @currentTab == :search
      @currentTab = null
    else
      @currentTab = :search
      @clearSelectedKey()

  showAffirmations: ->
    @currentTab = :affirmations

  searchNodes = (regexps) ->
    array v, k from dataNodes
      toTest = "" #{k} #{v.description}
      matchedAll = true
      each reg from regexps
        matchedAll = false unless reg.test toTest
      if matchedAll then k

  search: (query) ->
    @searchQuery = query
    @searchResults = if query.length > 1
      compactFlatten searchNodes array term from query.split /\s+/
        ///i #{escapeRegExp term}
    else
      []
