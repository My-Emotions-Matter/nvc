import &StandardImport

class Status extends ApplicationState

  @persistant()

  set: (key, status) ->
    @models.history.save()
    @setState key, bound 1, status + .5 | 0, 5

  @getter
    average: ->
      count = 0
      sum = reduce a, b in @state inject 0 when b? && b != 3
        count++; a + b
      if count > 0
        sum / count

  getSumFor: (key) ->
    if dataNodes[key] extract? childKeys
      reduce total, childKey in childKeys inject 0
        total + @getSumFor childKey

    else
      sum = @state[key]
      if sum? && sum != 3 then sum else 0

  getCountFor: (key) ->
    if dataNodes[key] extract? childKeys
      reduce count, childKey in childKeys inject 0
        count + @getCountFor childKey

    else
      sum = @state[key]
      if sum? && sum != 3 then 1 else 0

  getAverageFor: (key) ->
    if 0 == count = @getCountFor key
      3
    else
      @getSumFor key
      / count

  getRoundedAverageFor: (key) ->
    Math.round @getAverageFor key
