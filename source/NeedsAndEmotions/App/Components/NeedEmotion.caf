import &StandardImport, &Data, &Widgets, {} &CategoryButton, &Data/NavigationGraph

class NeedEmotion extends FluxComponent
  @subscriptions
    :viewState.viewState
    status: ({needEmotion}) -> needEmotion

  @stateFields
    descriptionFocused: false

  @propFields :needEmotion

  @getter
    status:    -> @state.status || 3
    landscape: -> @viewState.deviceSize.aspectRatio > 1

  toggleDescriptionFocused: -> @descriptionFocused = !@descriptionFocused

  updateFromPointerEvent: ({location, target}) ->
    {x, y} = target.currentSize
    @models.status.set
      @needEmotion
      location.x - y / 2
      / (x - y)
      * 4
      + 1

  renderBitmap: ->
    NeedStatusBitmap {} @status

  renderDescription: ->
    {textStyle} = StyleProps
    TextElement
      textStyle
      :textCenterCenter
      :topCenter
      size:     w: 300, h: 6 * textStyle.fontSize * textStyle.leading
      text:     dataNodes[@needEmotion].description
      margin:   bottom: 20

  renderText: ->
    TextElement
      StyleProps.textStyle
      :childrenSize
      color:  StyleProps.colors[@status]
      text:   StyleProps.statuses[@status]

  renderTitle: ->
    TextElement
      StyleProps.titleStyle
      :childrenSize
      margin: bottom: 20
      text:   upperCamelCase @needEmotion, ' '

  renderSlider: ->
    Element
      size: size = w: 300, h: 44
      margin: 10
      :pointerCursor

      on:
        pointerDown:  (event) -> event.target.capturePointerEvents()
        pointerUp:    @updateFromPointerEvent
        pointerMove:  (event)->
          event.target.capturePointerEvents()
          @updateFromPointerEvent event

      draw: padding: 15, radius: 10000, color: #0001

      Element
        :centerCenter
        pointerEventPriority: 1
        size:       40
        animators:  :draw :location
        location: yh: .5, x:
          (size.w - size.h) * (@status - 1)
          / 4
          + size.h / 2

        draw:
          :circle
          color:  StyleProps.colors[@status]
          shadow: true
          {} outline: lineWidth: 2 color: :white

  renderLandscape: ->
    Element
      :row :childrenCenterCenter

      @renderBitmap()

      Element
        :column :childrenBottomCenter
        padding: bottom:    10

        @renderTitle()
        @renderDescription()
        @renderText()
        @renderSlider()

  renderPortrait: ->
    Element
      :column
      :childrenCenterCenter

      @renderBitmap()
      @renderTitle()
      @renderDescription()
      @renderText()
      @renderSlider()

  render: ->

    NavigationGraph[@needEmotion] extract? prev, next
    Element
      if @viewState.deviceSize
        if @landscape
          @renderLandscape()
        else
          @renderPortrait()


