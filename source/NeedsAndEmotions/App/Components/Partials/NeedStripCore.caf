import &StandardImport

class NeedStripCore extends FluxComponent
  @subscriptions :viewState.viewState

  @stateFields
    hoverNeed: null
    parentWidth: 0

  @propFields :status :selectedKey

  pointerMove: (event) ->
    if @props.selectOnMove
      @models.navState.selectKey @getNeedFromMouseEvent event

  getNeedFromMouseEvent: (event) ->
    {target, location} = event
    OrderedNeedsList[Math.floor (location.x / target.currentSize.x) * OrderedNeedsList.length]

  pointerClick: (event) -> @models.navState.selectKey @getNeedFromMouseEvent event
  mouseOut: -> @clearHoverNeed()
  mouseMove: (event) -> @hoverNeed = @getNeedFromMouseEvent event
  ready: ({target})-> @parentWidth = target.parent.currentSize.x

  render: ->
    @ extract parentWidth, selectedKey, hoverNeed
    key = hoverNeed ? selectedKey

    cellSpacing = 1
    rootNeedSpacing = 5

    Element
      :pointerCursor
      size: h: 30
      on: {}
        @ready
        @mouseOut
        @mouseMove
        @pointerClick
        @pointerMove

      animators: :draw
      draw: if parentWidth > 0
        cellWidth =
          parentWidth
          - (OrderedNeedsList.length - 1 ) * cellSpacing
          - (dataNodes.needs.childKeys.length - 1 ) * rootNeedSpacing
          / OrderedNeedsList.length

        array need, i in OrderedNeedsList
          try
            dataNodes[need] extract? parentKey
            parentNum = max 0, rootNeedIndex = dataNodes.needs.childKeys.indexOf parentKey
            rectangle:
              area:#  ({x:parentWidth}) ->
                rect
                  cellWidth + cellSpacing
                  * i
                  + parentNum * rootNeedSpacing

                  if need != key
                    5
                  else
                    0

                  cellWidth

                  if need == key
                    30
                  else
                    20

            fill: StyleProps.colors[@status[need]||3]
