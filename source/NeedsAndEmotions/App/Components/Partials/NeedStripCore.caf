import &StandardImport

class NeedStripCore extends FluxComponent
  @subscriptions :viewState.viewState

  @stateFields
    hoverNeed: null
    parentWidth: 0

  @propFields :status :selectedKey

  pointerMove: (event) ->
    if @props.selectOnMove
      @models.navState.selectKey @getNeedFromMouseEvent event

  getNeedFromMouseEvent: (event) ->
    {target, location} = event
    OrderedNeedsList[Math.floor (location.x / target.currentSize.x) * OrderedNeedsList.length]

  pointerClick: (event) ->
    @models.navState.selectKey @getNeedFromMouseEvent event

  mouseOut: ->
    @clearHoverNeed()

  mouseMove: (event) ->
    @hoverNeed = @getNeedFromMouseEvent event

  padding = 0

  render: ->
    @ extract parentWidth, selectedKey, hoverNeed
    w = 1 / OrderedNeedsList.length
    key = hoverNeed ? selectedKey

    Element
      :pointerCursor
      size: h: 40
      on: {}
        @mouseOut
        @mouseMove
        @pointerClick
        @pointerMove

      Element
        animators: :draw
        draw: # if parentWidth > 0
          array need, i in OrderedNeedsList
            dataNodes[need] extract? parentKey
            parentNum = switch parentKey
            when :thriving      then 1
            when :transcending  then 2
            else 0
            rectangle:
              area: ({x:parentWidth}) ->
                rect
                  parentWidth
                  - 9
                  * i * w
                  # + 2.5
                  + parentNum * 5

                  if need != key
                    10
                  else
                    0

                  parentWidth * w - 1

                  if need == key
                    40
                  else
                    20

            fill: StyleProps.colors[@status[need]||3]
