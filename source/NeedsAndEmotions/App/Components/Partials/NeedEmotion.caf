import &StandardImport, &Data, &Widgets, {} &CategoryButton, &Data/NavigationGraph

class NeedEmotion extends FluxComponent
  @subscriptions
    :viewState.viewState
    status: ({needEmotion}) -> needEmotion

  @stateFields
    descriptionFocused: false

  @propFields :needEmotion



  @getter
    hideStatus: -> @props.hideStatus || @props.emotions
    status:    ->
      if @props.emotions
        switch @models.navState.keyPath[1]
        when :painful     then 1
        when :pleasurable then 5
        else 4
      else
        @state.status || 3
    statusText: ->
      if @state.status then StyleProps.statuses[@status]
      else StyleProps.noStatusText
    landscape: -> @viewState.deviceSize.aspectRatio > 1

  toggleDescriptionFocused: -> @descriptionFocused = !@descriptionFocused

  updateFromPointerEvent: ({location, target}) ->
    {x, y} = target.currentSize
    @models.status.set
      @needEmotion
      location.x - y / 2
      / (x - y)
      * 4
      + 1

  renderBitmap: ->
    Element
      size: 300
      NeedStatusBitmap {} @status

  renderDescription: ->
    {mediumText} = StyleProps
    TextElement
      mediumText
      :textCenterCenter
      :topCenter
      size:
        if @hideStatus
          w: 300 hch: 1
        else
          w: 300, h: 6 * mediumText.fontSize * mediumText.leading

      text:     dataNodes[@needEmotion]?.description
      # margin:   bottom: 20

  renderStatusText: ->
    TextElement
      StyleProps.mediumText
      :childrenSize
      color:  StyleProps.colorsForText[@status]
      text:   @statusText

  renderTitle: ->
    []
      TextElement
        StyleProps.largeText
        :childrenSize
        # margin: bottom: 20
        text:   upperCamelCase @needEmotion, ' '
      TextElement
        StyleProps.smallText
        :childrenSize
        # margin: bottom: 20
        color: StyleProps.textPalette.black.tertiary
        text:   &Data.dataNodes[@needEmotion]?.parentKey

  renderSlider: ->
    Element
      size: size = w: 300, h: 44
      margin: 10
      :pointerCursor

      on:
        pointerDown:  (event) -> event.target.capturePointerEvents()
        pointerUp:    @updateFromPointerEvent
        pointerMove:  (event)->
          event.target.capturePointerEvents()
          @updateFromPointerEvent event

      draw: padding: 15, radius: 10000, color: #0001

      Element
        :centerCenter
        pointerEventPriority: 1
        size:       40
        animators:  :draw :location
        location: yh: .5, x:
          (size.w - size.h) * (@status - 1)
          / 4
          + size.h / 2

        draw:
          :circle
          color:  StyleProps.colors[@status]
          shadow: true
          {} outline: lineWidth: 2 color: :white

  renderLandscape: ->
    Element
      :centerCenter
      :row :childrenCenterCenter
      size: w: ({x}) -> min x, @viewState.maxWidth

      Element
        :row :childrenCenterCenter
        NeedStatusBitmap {} @status

      Element
        :column :childrenCenterCenter
        childrenMargins: 20

        @renderTitle()
        @renderDescription()
        @renderStatusWidget()

  renderStatusWidget: ->
    if @hideStatus
      Element
        size: h: 150
    else []
      @renderStatusText()
      @renderSlider()

  renderPortrait: ->
    Element
      :column
      :childrenTopCenter
      childrenMargins: 20
      # draw: :red

      Element
        switch
        when @hideStatus
          size: h: 100
        else
          size: hw: 1 max: h: 500


        NeedStatusBitmap {} @status
      @renderTitle()
      @renderDescription()
      @renderStatusWidget()

  render: ->
    NavigationGraph[@needEmotion] extract? prev, next
    Element
      if @viewState.deviceSize
        if @landscape
          @renderLandscape()
        else
          @renderPortrait()
