import &StandardImport

class NeedStatus extends FluxComponent
  @subscriptions
    status: ({need}) -> need

  pointerClick: ->
    @models.navState.setKeyPath [] :needs, @props.category, @props.need

  render: ->
    initials = codeWords(@props.need)[0].slice 0, 3
    Element
      cursor: :pointer
      size: 44
      margin: 2
      on: {} @pointerClick
      draw:
        radius: 3
        StyleProps.colors[@status] ? #eee

      TextElement StyleProps.textStyle,
        fontSize: 9
        align: .5
        color: #0006
        initials


class NeedsDashboardSection extends FluxComponent

  @getter
    sortedNeeds: ->
      statusMap = @models.status.state
      array v, need from @props.needs
        {} need, status: statusMap[need] ? 0
      .sort (a, b) ->
        b.status - a.status
        || a.need.localeCompare b.need


  render: ->
    Element
      size: :parentWidthChildrenHeight
      childrenLayout: :column
      childrenMargins: 10
      TextElement
        StyleProps.textStyle
        size: :childrenSize
        @props.category

      Element
        childrenLayout: :flow
        childrenMargins: 1
        size: :parentWidthChildrenHeight
        padding: h: 10
        draw:
          :padded
          :children
          # outline: #0007

        array {need} in @sortedNeeds
          NeedStatus {} @props.category, need


class NeedsDashboard extends FluxComponent

  render: ->
    ScrollElement
      childrenLayout: :column
      childrenMargins: 20
      padding: 10

      array needs, category in Needs
        NeedsDashboardSection {} category, needs